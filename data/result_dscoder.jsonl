{"project": "Chart", "bug_id": "1", "eval": "PASS", "attempt": 3, "mode": "SL", "patch": "        if (dataset == null) {", "diff": "diff --git a/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java b/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\nindex 226b25a..ffa187c 100644\n--- a/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\n+++ b/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\n@@ -1794,7 +1794,7 @@ public abstract class AbstractCategoryItemRenderer extends AbstractRenderer\n         }\n         int index = this.plot.getIndexOf(this);\n         CategoryDataset dataset = this.plot.getDataset(index);\n-        if (dataset != null) {\n+        if (dataset == null) {\n             return result;\n         }\n         int seriesCount = dataset.getRowCount();"}
{"project": "Chart", "bug_id": "3", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Chart", "bug_id": "4", "eval": "PASS", "attempt": 13, "mode": "SF", "patch": "\npublic Range getDataRange(ValueAxis axis) {\n\n        Range result = null;\n        List mappedDatasets = new ArrayList();\n        boolean isDomainAxis = true;\n\n        // is it a domain axis?\n        int domainIndex = getDomainAxisIndex(axis);\n        if (domainIndex >= 0) {\n            isDomainAxis = true;\n            mappedDatasets.addAll(getDatasetsMappedToDomainAxis(\n                    new Integer(domainIndex)));\n        }\n\n        // or is it a range axis?\n        int rangeIndex = getRangeAxisIndex(axis);\n        if (rangeIndex >= 0) {\n            isDomainAxis = false;\n            mappedDatasets.addAll(getDatasetsMappedToRangeAxis(\n                    new Integer(rangeIndex)));\n        }\n\n        // iterate through the datasets that map to the axis and get the union\n        // of the ranges.\n        Iterator iterator = mappedDatasets.iterator();\n        while (iterator.hasNext()) {\n            XYDataset d = (XYDataset) iterator.next();\n            if (d != null) {\n                XYItemRenderer r = getRendererForDataset(d);\n                if (isDomainAxis) {\n                    if (r != null) {\n                        result = Range.combine(result, r.findDomainBounds(d));\n                    }\n                    else {\n                        result = Range.combine(result,\n                                DatasetUtilities.findDomainBounds(d));\n                    }\n                }\n                else {\n                    if (r != null) {\n                        result = Range.combine(result, r.findRangeBounds(d));\n                    }\n                    else {\n                        result = Range.combine(result,\n                                DatasetUtilities.findRangeBounds(d));\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n", "diff": "diff --git a/source/org/jfree/chart/plot/XYPlot.java b/source/org/jfree/chart/plot/XYPlot.java\nindex ec26162..41db5fa 100644\n--- a/source/org/jfree/chart/plot/XYPlot.java\n+++ b/source/org/jfree/chart/plot/XYPlot.java\n@@ -4422,101 +4422,60 @@ public class XYPlot extends Plot implements ValueAxisPlot, Pannable,\n      *\n      * @return The range.\n      */\n-    public Range getDataRange(ValueAxis axis) {\n-\n-        Range result = null;\n-        List mappedDatasets = new ArrayList();\n-        List includedAnnotations = new ArrayList();\n-        boolean isDomainAxis = true;\n-\n-        // is it a domain axis?\n-        int domainIndex = getDomainAxisIndex(axis);\n-        if (domainIndex >= 0) {\n-            isDomainAxis = true;\n-            mappedDatasets.addAll(getDatasetsMappedToDomainAxis(\n-                    new Integer(domainIndex)));\n-            if (domainIndex == 0) {\n-                // grab the plot's annotations\n-                Iterator iterator = this.annotations.iterator();\n-                while (iterator.hasNext()) {\n-                    XYAnnotation annotation = (XYAnnotation) iterator.next();\n-                    if (annotation instanceof XYAnnotationBoundsInfo) {\n-                        includedAnnotations.add(annotation);\n-                    }\n-                }\n-            }\n-        }\n-\n-        // or is it a range axis?\n-        int rangeIndex = getRangeAxisIndex(axis);\n-        if (rangeIndex >= 0) {\n-            isDomainAxis = false;\n-            mappedDatasets.addAll(getDatasetsMappedToRangeAxis(\n-                    new Integer(rangeIndex)));\n-            if (rangeIndex == 0) {\n-                Iterator iterator = this.annotations.iterator();\n-                while (iterator.hasNext()) {\n-                    XYAnnotation annotation = (XYAnnotation) iterator.next();\n-                    if (annotation instanceof XYAnnotationBoundsInfo) {\n-                        includedAnnotations.add(annotation);\n-                    }\n-                }\n-            }\n-        }\n-\n-        // iterate through the datasets that map to the axis and get the union\n-        // of the ranges.\n-        Iterator iterator = mappedDatasets.iterator();\n-        while (iterator.hasNext()) {\n-            XYDataset d = (XYDataset) iterator.next();\n-            if (d != null) {\n-                XYItemRenderer r = getRendererForDataset(d);\n-                if (isDomainAxis) {\n-                    if (r != null) {\n-                        result = Range.combine(result, r.findDomainBounds(d));\n-                    }\n-                    else {\n-                        result = Range.combine(result,\n-                                DatasetUtilities.findDomainBounds(d));\n-                    }\n-                }\n-                else {\n-                    if (r != null) {\n-                        result = Range.combine(result, r.findRangeBounds(d));\n-                    }\n-                    else {\n-                        result = Range.combine(result,\n-                                DatasetUtilities.findRangeBounds(d));\n-                    }\n-                }\n-                \n-                    Collection c = r.getAnnotations();\n-                    Iterator i = c.iterator();\n-                    while (i.hasNext()) {\n-                        XYAnnotation a = (XYAnnotation) i.next();\n-                        if (a instanceof XYAnnotationBoundsInfo) {\n-                            includedAnnotations.add(a);\n-                        }\n-                    }\n-            }\n-        }\n-\n-        Iterator it = includedAnnotations.iterator();\n-        while (it.hasNext()) {\n-            XYAnnotationBoundsInfo xyabi = (XYAnnotationBoundsInfo) it.next();\n-            if (xyabi.getIncludeInDataBounds()) {\n-                if (isDomainAxis) {\n-                    result = Range.combine(result, xyabi.getXRange());\n-                }\n-                else {\n-                    result = Range.combine(result, xyabi.getYRange());\n-                }\n-            }\n-        }\n-\n-        return result;\n-\n-    }\n+\n+public Range getDataRange(ValueAxis axis) {\n+\n+        Range result = null;\n+        List mappedDatasets = new ArrayList();\n+        boolean isDomainAxis = true;\n+\n+        // is it a domain axis?\n+        int domainIndex = getDomainAxisIndex(axis);\n+        if (domainIndex >= 0) {\n+            isDomainAxis = true;\n+            mappedDatasets.addAll(getDatasetsMappedToDomainAxis(\n+                    new Integer(domainIndex)));\n+        }\n+\n+        // or is it a range axis?\n+        int rangeIndex = getRangeAxisIndex(axis);\n+        if (rangeIndex >= 0) {\n+            isDomainAxis = false;\n+            mappedDatasets.addAll(getDatasetsMappedToRangeAxis(\n+                    new Integer(rangeIndex)));\n+        }\n+\n+        // iterate through the datasets that map to the axis and get the union\n+        // of the ranges.\n+        Iterator iterator = mappedDatasets.iterator();\n+        while (iterator.hasNext()) {\n+            XYDataset d = (XYDataset) iterator.next();\n+            if (d != null) {\n+                XYItemRenderer r = getRendererForDataset(d);\n+                if (isDomainAxis) {\n+                    if (r != null) {\n+                        result = Range.combine(result, r.findDomainBounds(d));\n+                    }\n+                    else {\n+                        result = Range.combine(result,\n+                                DatasetUtilities.findDomainBounds(d));\n+                    }\n+                }\n+                else {\n+                    if (r != null) {\n+                        result = Range.combine(result, r.findRangeBounds(d));\n+                    }\n+                    else {\n+                        result = Range.combine(result,\n+                                DatasetUtilities.findRangeBounds(d));\n+                    }\n+                }\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n \n     /**\n      * Receives notification of a change to the plot's dataset."}
{"project": "Chart", "bug_id": "5", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Chart", "bug_id": "6", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Chart", "bug_id": "7", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Chart", "bug_id": "8", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": "        this(time, zone, Locale.getDefault());", "diff": "diff --git a/source/org/jfree/data/time/Week.java b/source/org/jfree/data/time/Week.java\nindex 3cc4138..183bac2 100644\n--- a/source/org/jfree/data/time/Week.java\n+++ b/source/org/jfree/data/time/Week.java\n@@ -172,7 +172,7 @@ public class Week extends RegularTimePeriod implements Serializable {\n      */\n     public Week(Date time, TimeZone zone) {\n         // defer argument checking...\n-        this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n+        this(time, zone, Locale.getDefault());\n     }\n \n     /**"}
{"project": "Chart", "bug_id": "9", "eval": "PASS", "attempt": 6, "mode": "SL", "patch": "            if (startIndex > endIndex) {", "diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 4067e3e..4eab810 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -941,7 +941,7 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             endIndex = -(endIndex + 1); // this is first item AFTER end period\n             endIndex = endIndex - 1;    // so this is last item BEFORE end\n         }\n-        if (endIndex < 0) {\n+            if (startIndex > endIndex) {\n             emptyRange = true;\n         }\n         if (emptyRange) {"}
{"project": "Chart", "bug_id": "10", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Chart", "bug_id": "11", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": "        PathIterator iterator2 = p2.getPathIterator(null);", "diff": "diff --git a/source/org/jfree/chart/util/ShapeUtilities.java b/source/org/jfree/chart/util/ShapeUtilities.java\nindex 31aa6c6..f49ecb5 100644\n--- a/source/org/jfree/chart/util/ShapeUtilities.java\n+++ b/source/org/jfree/chart/util/ShapeUtilities.java\n@@ -272,7 +272,7 @@ public class ShapeUtilities {\n             return false;\n         }\n         PathIterator iterator1 = p1.getPathIterator(null);\n-        PathIterator iterator2 = p1.getPathIterator(null);\n+        PathIterator iterator2 = p2.getPathIterator(null);\n         double[] d1 = new double[6];\n         double[] d2 = new double[6];\n         boolean done = iterator1.isDone() && iterator2.isDone();"}
{"project": "Chart", "bug_id": "12", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Chart", "bug_id": "13", "eval": "PASS", "attempt": 9, "mode": "SL", "patch": "                    new Range(0.0, constraint.getWidth() - w[4]),", "diff": "diff --git a/source/org/jfree/chart/block/BorderArrangement.java b/source/org/jfree/chart/block/BorderArrangement.java\nindex 730aeb3..15e9ace 100644\n--- a/source/org/jfree/chart/block/BorderArrangement.java\n+++ b/source/org/jfree/chart/block/BorderArrangement.java\n@@ -452,7 +452,7 @@ public class BorderArrangement implements Arrangement, Serializable {\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth() - w[2]),\n+                    new Range(0.0, constraint.getWidth() - w[4]),\n                     LengthConstraintType.RANGE, h[2], null,\n                     LengthConstraintType.FIXED);\n             Size2D size = this.rightBlock.arrange(g2, c4);"}
{"project": "Chart", "bug_id": "17", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Chart", "bug_id": "20", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": "        super(paint, stroke, outlinePaint, outlineStroke, alpha);", "diff": "diff --git a/source/org/jfree/chart/plot/ValueMarker.java b/source/org/jfree/chart/plot/ValueMarker.java\nindex 075683d..83af579 100644\n--- a/source/org/jfree/chart/plot/ValueMarker.java\n+++ b/source/org/jfree/chart/plot/ValueMarker.java\n@@ -92,7 +92,7 @@ public class ValueMarker extends Marker {\n      */\n     public ValueMarker(double value, Paint paint, Stroke stroke, \n                        Paint outlinePaint, Stroke outlineStroke, float alpha) {\n-        super(paint, stroke, paint, stroke, alpha);\n+        super(paint, stroke, outlinePaint, outlineStroke, alpha);\n         this.value = value;\n     }\n     "}
{"project": "Chart", "bug_id": "23", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Chart", "bug_id": "24", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Chart", "bug_id": "26", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "2", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "3", "eval": "PASS", "attempt": 1, "mode": "SH", "patch": "\n            return new Double(Double.parseDouble(str));\n", "diff": "diff --git a/src/java/org/apache/commons/cli/TypeHandler.java b/src/java/org/apache/commons/cli/TypeHandler.java\nindex addf90b..86aa08e 100644\n--- a/src/java/org/apache/commons/cli/TypeHandler.java\n+++ b/src/java/org/apache/commons/cli/TypeHandler.java\n@@ -158,7 +158,9 @@ public class TypeHandler {\n     {\n         try\n         {\n-            return org.apache.commons.lang.math.NumberUtils.createNumber(str);\n+\n+            return new Double(Double.parseDouble(str));\n+\n         }\n         catch (NumberFormatException nfe)\n         {"}
{"project": "Cli", "bug_id": "4", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "5", "eval": "PASS", "attempt": 1, "mode": "SH", "patch": "\n        if (str == null || str.isEmpty()) {\n            return str;\n        }\n", "diff": "diff --git a/src/java/org/apache/commons/cli/Util.java b/src/java/org/apache/commons/cli/Util.java\nindex 2d88c30..e1d1cd5 100644\n--- a/src/java/org/apache/commons/cli/Util.java\n+++ b/src/java/org/apache/commons/cli/Util.java\n@@ -33,6 +33,11 @@ class Util {\n      */\n     static String stripLeadingHyphens(String str)\n     {\n+\n+        if (str == null || str.isEmpty()) {\n+            return str;\n+        }\n+\n         if (str.startsWith(\"--\"))\n         {\n             return str.substring(2, str.length());\n@@ -64,4 +69,4 @@ class Util {\n         }\n         return str;\n     }\n-}\n\\ No newline at end of file\n+}"}
{"project": "Cli", "bug_id": "8", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "9", "eval": "PASS", "attempt": 2, "mode": "SF", "patch": "\nprotected void checkRequiredOptions()\n    throws MissingOptionException\n{\n    // if there are required options that have not been\n    // processed\n    if (getRequiredOptions().size() > 0)\n    {\n        Iterator iter = getRequiredOptions().iterator();\n        StringBuilder buff = new StringBuilder(\"Missing required option\");\n        buff.append(getRequiredOptions().size() == 1 ? \"\" : \"s\");\n        buff.append(\": \");\n\n\n        // loop through the required options\n        while (iter.hasNext())\n        {\n            buff.append(iter.next());\n            if (iter.hasNext()) {\n                buff.append(\", \");\n            }\n        }\n\n        throw new MissingOptionException(buff.toString());\n    }\n}\n", "diff": "diff --git a/src/java/org/apache/commons/cli/Parser.java b/src/java/org/apache/commons/cli/Parser.java\nindex dbace06..b57ef90 100644\n--- a/src/java/org/apache/commons/cli/Parser.java\n+++ b/src/java/org/apache/commons/cli/Parser.java\n@@ -300,28 +300,33 @@ public abstract class Parser implements CommandLineParser {\n      * @throws MissingOptionException if any of the required Options\n      * are not present.\n      */\n-    protected void checkRequiredOptions()\n-        throws MissingOptionException\n+\n+protected void checkRequiredOptions()\n+    throws MissingOptionException\n+{\n+    // if there are required options that have not been\n+    // processed\n+    if (getRequiredOptions().size() > 0)\n     {\n-        // if there are required options that have not been\n-        // processsed\n-        if (getRequiredOptions().size() > 0)\n-        {\n-            Iterator iter = getRequiredOptions().iterator();\n-            StringBuffer buff = new StringBuffer(\"Missing required option\");\n-            buff.append(getRequiredOptions().size() == 1 ? \"\" : \"s\");\n-            buff.append(\": \");\n+        Iterator iter = getRequiredOptions().iterator();\n+        StringBuilder buff = new StringBuilder(\"Missing required option\");\n+        buff.append(getRequiredOptions().size() == 1 ? \"\" : \"s\");\n+        buff.append(\": \");\n \n \n-            // loop through the required options\n-            while (iter.hasNext())\n-            {\n-                buff.append(iter.next());\n+        // loop through the required options\n+        while (iter.hasNext())\n+        {\n+            buff.append(iter.next());\n+            if (iter.hasNext()) {\n+                buff.append(\", \");\n             }\n-\n-            throw new MissingOptionException(buff.toString());\n         }\n+\n+        throw new MissingOptionException(buff.toString());\n     }\n+}\n+\n \n     /**\n      * <p>Process the argument values for the specified Option"}
{"project": "Cli", "bug_id": "11", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": "        if (option.hasArg() && (option.getArgName() != null) && (!option.getArgName().isEmpty()))", "diff": "diff --git a/src/java/org/apache/commons/cli/HelpFormatter.java b/src/java/org/apache/commons/cli/HelpFormatter.java\nindex 183cae3..9817d4c 100644\n--- a/src/java/org/apache/commons/cli/HelpFormatter.java\n+++ b/src/java/org/apache/commons/cli/HelpFormatter.java\n@@ -629,7 +629,7 @@ public class HelpFormatter {\n         }\n \n         // if the Option has a value\n-        if (option.hasArg() && (option.getArgName() != null))\n+        if (option.hasArg() && (option.getArgName() != null) && (!option.getArgName().isEmpty()))\n         {\n             buff.append(\" <\").append(option.getArgName()).append(\">\");\n         }"}
{"project": "Cli", "bug_id": "12", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "14", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "15", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "17", "eval": "PASS", "attempt": 3, "mode": "SL", "patch": "                    break;", "diff": "diff --git a/src/java/org/apache/commons/cli/PosixParser.java b/src/java/org/apache/commons/cli/PosixParser.java\nindex cafcede..cc5ba36 100644\n--- a/src/java/org/apache/commons/cli/PosixParser.java\n+++ b/src/java/org/apache/commons/cli/PosixParser.java\n@@ -300,6 +300,7 @@ public class PosixParser extends Parser {\n             else if (stopAtNonOption)\n             {\n                 process(token.substring(i));\n+                    break;\n             }\n             else\n             {"}
{"project": "Cli", "bug_id": "19", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "20", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "24", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "25", "eval": "PASS", "attempt": 5, "mode": "SL", "patch": "        nextLineTabStop = width - pos;", "diff": "diff --git a/src/java/org/apache/commons/cli/HelpFormatter.java b/src/java/org/apache/commons/cli/HelpFormatter.java\nindex 028ff5c..e8e55f0 100644\n--- a/src/java/org/apache/commons/cli/HelpFormatter.java\n+++ b/src/java/org/apache/commons/cli/HelpFormatter.java\n@@ -822,7 +822,7 @@ public class HelpFormatter\n         if (nextLineTabStop >= width)\n         {\n             // stops infinite loop happening\n-            nextLineTabStop = width - 1;\n+        nextLineTabStop = width - pos;\n         }\n \n         // all following lines must be padded with nextLineTabStop space "}
{"project": "Cli", "bug_id": "26", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "27", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "28", "eval": "PASS", "attempt": 2, "mode": "SL", "patch": "                    continue;", "diff": "diff --git a/src/java/org/apache/commons/cli/Parser.java b/src/java/org/apache/commons/cli/Parser.java\nindex 6b39536..c106932 100644\n--- a/src/java/org/apache/commons/cli/Parser.java\n+++ b/src/java/org/apache/commons/cli/Parser.java\n@@ -287,7 +287,7 @@ public abstract class Parser implements CommandLineParser\n                 {\n                     // if the value is not yes, true or 1 then don't add the\n                     // option to the CommandLine\n-                    break;\n+                    continue;\n                 }\n \n                 cmd.addOption(opt);"}
{"project": "Cli", "bug_id": "29", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "32", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "35", "eval": "PASS", "attempt": 7, "mode": "SH", "patch": "\n        // for a perfect match return the single option only\n        if (longOpts.containsKey(opt)) {\n            matchingOpts.add(opt);\n            return matchingOpts;\n        }\n", "diff": "diff --git a/src/main/java/org/apache/commons/cli/Options.java b/src/main/java/org/apache/commons/cli/Options.java\nindex e9a0aa9..199680b 100644\n--- a/src/main/java/org/apache/commons/cli/Options.java\n+++ b/src/main/java/org/apache/commons/cli/Options.java\n@@ -238,6 +238,13 @@ public class Options implements Serializable\n \n         // for a perfect match return the single option only\n \n+        // for a perfect match return the single option only\n+        if (longOpts.containsKey(opt)) {\n+            matchingOpts.add(opt);\n+            return matchingOpts;\n+        }\n+\n+\n         for (String longOpt : longOpts.keySet())\n         {\n             if (longOpt.startsWith(opt))"}
{"project": "Cli", "bug_id": "37", "eval": "PASS", "attempt": 4, "mode": "SF", "patch": "\n    private boolean isShortOption(String token)\n    {\n        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n        return token.startsWith(\"-\") && token.length() >= 2 && options.hasShortOption(token.substring(1));\n\n        // remove leading \"-\" and \"=value\"\n    }\n", "diff": "diff --git a/src/main/java/org/apache/commons/cli/DefaultParser.java b/src/main/java/org/apache/commons/cli/DefaultParser.java\nindex 6aeaebe..8d29254 100644\n--- a/src/main/java/org/apache/commons/cli/DefaultParser.java\n+++ b/src/main/java/org/apache/commons/cli/DefaultParser.java\n@@ -296,14 +296,16 @@ public class DefaultParser implements CommandLineParser\n      * \n      * @param token\n      */\n+\n     private boolean isShortOption(String token)\n     {\n         // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n-        return token.startsWith(\"-\") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));\n+        return token.startsWith(\"-\") && token.length() >= 2 && options.hasShortOption(token.substring(1));\n \n         // remove leading \"-\" and \"=value\"\n     }\n \n+\n     /**\n      * Tells if the token looks like a long option.\n      *"}
{"project": "Cli", "bug_id": "38", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "40", "eval": "PASS", "attempt": 4, "mode": "SL", "patch": "throw new ParseException(\"Requested class type (\" + clazz.getName() + \") is not recognizable\");", "diff": "diff --git a/src/main/java/org/apache/commons/cli/TypeHandler.java b/src/main/java/org/apache/commons/cli/TypeHandler.java\nindex 6bd84b0..682f702 100644\n--- a/src/main/java/org/apache/commons/cli/TypeHandler.java\n+++ b/src/main/java/org/apache/commons/cli/TypeHandler.java\n@@ -100,7 +100,7 @@ public class TypeHandler\n         }\n         else\n         {\n-            return null;\n+throw new ParseException(\"Requested class type (\" + clazz.getName() + \") is not recognizable\");\n         }\n     }\n "}
{"project": "Closure", "bug_id": "1", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "2", "eval": "PASS", "attempt": 1, "mode": "SF", "patch": "\nprivate void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n      String functionName, HashMap<String, ObjectType> properties,\n      HashMap<String, ObjectType> currentProperties,\n      ObjectType interfaceType) {\n    Set<String> currentPropertyNames = null;\n    if (interfaceType == null || interfaceType.getImplicitPrototype() == null) {\n        return;\n    }\n    currentPropertyNames = interfaceType.getImplicitPrototype().getOwnPropertyNames();\n    for (String name : currentPropertyNames) {\n      ObjectType oType = properties.get(name);\n      if (oType != null) {\n        if (!interfaceType.getPropertyType(name).isEquivalentTo(\n            oType.getPropertyType(name))) {\n          compiler.report(\n              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                  functionName, name, oType.toString(),\n                  interfaceType.toString()));\n        }\n      }\n      currentProperties.put(name, interfaceType);\n    }\n    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n      checkInterfaceConflictProperties(t, n, functionName, properties,\n          currentProperties, iType);\n    }\n  }\n", "diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex a0f95db9..5f9e0890 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1563,15 +1563,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * that have been visited\n    * @param interfaceType The super interface that is being visited\n    */\n-  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n+\n+private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n       String functionName, HashMap<String, ObjectType> properties,\n       HashMap<String, ObjectType> currentProperties,\n       ObjectType interfaceType) {\n-    ObjectType implicitProto = interfaceType.getImplicitPrototype();\n-    Set<String> currentPropertyNames;\n-      // This can be the case if interfaceType is proxy to a non-existent\n-      // object (which is a bad type annotation, but shouldn't crash).\n-      currentPropertyNames = implicitProto.getOwnPropertyNames();\n+    Set<String> currentPropertyNames = null;\n+    if (interfaceType == null || interfaceType.getImplicitPrototype() == null) {\n+        return;\n+    }\n+    currentPropertyNames = interfaceType.getImplicitPrototype().getOwnPropertyNames();\n     for (String name : currentPropertyNames) {\n       ObjectType oType = properties.get(name);\n       if (oType != null) {\n@@ -1591,6 +1592,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     }\n   }\n \n+\n   /**\n    * Visits a {@link Token#FUNCTION} node.\n    *"}
{"project": "Closure", "bug_id": "4", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "5", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "7", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "10", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": "return mayBeStringHelper(n) || allResultsMatch(n, MAY_BE_STRING_PREDICATE);", "diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..7d092b10 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1414,7 +1414,7 @@ public final class NodeUtil {\n \n   static boolean mayBeString(Node n, boolean recurse) {\n     if (recurse) {\n-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n+return mayBeStringHelper(n) || allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n     } else {\n       return mayBeStringHelper(n);\n     }"}
{"project": "Closure", "bug_id": "11", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "12", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "13", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "14", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "15", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "18", "eval": "PASS", "attempt": 3, "mode": "SL", "patch": "      if (options.dependencyOptions.needsManagement() && !modules.isEmpty()) {", "diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 8898f77f..dc479672 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -1285,7 +1285,7 @@ public class Compiler extends AbstractCompiler {\n \n       // Check if the sources need to be re-ordered.\n       boolean staleInputs = false;\n-      if (options.dependencyOptions.needsManagement() && options.closurePass) {\n+      if (options.dependencyOptions.needsManagement() && !modules.isEmpty()) {\n         for (CompilerInput input : inputs) {\n           // Forward-declare all the provided types, so that they\n           // are not flagged even if they are dropped from the process."}
{"project": "Closure", "bug_id": "19", "eval": "PASS", "attempt": 11, "mode": "SF", "patch": "\n  protected void declareNameInScope(FlowScope scope, Node node, JSType type) {\n    switch (node.getType()) {\n      case Token.NAME:\n        scope.inferSlotType(node.getString(), type);\n        break;\n\n      case Token.GETPROP:\n        String qualifiedName = node.getQualifiedName();\n        Preconditions.checkNotNull(qualifiedName);\n\n        JSType origType = node.getJSType();\n        origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;\n        scope.inferQualifiedSlot(node, qualifiedName, origType, type);\n        break;\n\n      default:\n        if (node.getType() != Token.THIS) {\n            throw new IllegalArgumentException(\"Node cannot be refined. \\n\" +\n            node.toStringTree());\n        }\n        break;\n    }\n  }\n", "diff": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 0345c855..88cdb60a 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -154,6 +154,7 @@ public abstract class ChainableReverseAbstractInterpreter\n    * {@code node}. It must be possible to refine the type of the given node in\n    * the given scope, as determined by {@link #getTypeIfRefinable}.\n    */\n+\n   protected void declareNameInScope(FlowScope scope, Node node, JSType type) {\n     switch (node.getType()) {\n       case Token.NAME:\n@@ -169,14 +170,16 @@ public abstract class ChainableReverseAbstractInterpreter\n         scope.inferQualifiedSlot(node, qualifiedName, origType, type);\n         break;\n \n-        // \"this\" references aren't currently modeled in the CFG.\n-\n       default:\n-        throw new IllegalArgumentException(\"Node cannot be refined. \\n\" +\n+        if (node.getType() != Token.THIS) {\n+            throw new IllegalArgumentException(\"Node cannot be refined. \\n\" +\n             node.toStringTree());\n+        }\n+        break;\n     }\n   }\n \n+\n   /**\n    * @see #getRestrictedWithoutUndefined(JSType)\n    */"}
{"project": "Closure", "bug_id": "20", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "21", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "22", "eval": "PASS", "attempt": 7, "mode": "SF", "patch": "\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // We'll allow it, but we'll give a warning.\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (parent.getType() == Token.COMMA) {\n      Node gramps = parent.getParent();\n      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n          return;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n          n == parent.getFirstChild().getNext().getNext())) {\n      } else {\n        return;\n      }\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (!isResultUsed &&\n        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n        return;\n      } else if (n.isExprResult()) {\n        return;\n      }\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      // TODO(johnlenz): determine if it is necessary to\n      // try to protect side-effect free statements as well.\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }\n", "diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex b9aa412c..61ca4e72 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,11 +81,10 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+\n+public void visit(NodeTraversal t, Node n, Node parent) {\n     // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n+    // We'll allow it, but we'll give a warning.\n     if (n.isEmpty() ||\n         n.isComma()) {\n       return;\n@@ -102,28 +101,14 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n       Node gramps = parent.getParent();\n       if (gramps.isCall() && parent == gramps.getFirstChild()) {\n         if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n-      return;\n-        }\n-    }\n-\n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA)\n-            continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n-            return;\n-          else\n-            break;\n+          return;\n         }\n       }\n     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n       if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n-           n == parent.getFirstChild().getNext().getNext())) {\n+          n == parent.getFirstChild().getNext().getNext())) {\n       } else {\n-      return;\n+        return;\n       }\n     }\n \n@@ -154,6 +139,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n     }\n   }\n \n+\n   /**\n    * Protect side-effect free nodes by making them parameters\n    * to a extern function call.  This call will be removed"}
{"project": "Closure", "bug_id": "23", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "24", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "25", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "29", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "31", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": "      !options.skipAllPasses ||", "diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b76bbb5c..11aa4ad7 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -1282,7 +1282,7 @@ public class Compiler extends AbstractCompiler {\n \n       // Check if the sources need to be re-ordered.\n       if (options.dependencyOptions.needsManagement() &&\n-          !options.skipAllPasses &&\n+      !options.skipAllPasses ||\n           options.closurePass) {\n         for (CompilerInput input : inputs) {\n           // Forward-declare all the provided types, so that they"}
{"project": "Closure", "bug_id": "32", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "33", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "35", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "36", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "38", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "39", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "40", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "42", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "44", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "48", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "50", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "52", "eval": "PASS", "attempt": 4, "mode": "SL", "patch": "    return len == 1 || (len > 1 && s.charAt(0) != '0');", "diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex ac6299d1..d3535f67 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -742,7 +742,7 @@ class CodeGenerator {\n         return false;\n       }\n     }\n-    return len > 0;\n+    return len == 1 || (len > 1 && s.charAt(0) != '0');\n   }\n \n   static double getSimpleNumber(String s) {"}
{"project": "Closure", "bug_id": "53", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "55", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "56", "eval": "PASS", "attempt": 19, "mode": "SF", "patch": "\n  public String getLine(int lineNumber) {\n    String js = \"\";\n    try {\n      // NOTE(nicksantos): Right now, this is optimized for few warnings.\n      // This is probably the right trade-off, but will be slow if there\n      // are lots of warnings in one file.\n      js = getCode();\n    } catch (IOException e) {\n      return null;\n    }\n\n    int pos = 0;\n    int startLine = 1;\n\n    // If we've saved a previous offset and it's for a line less than the\n    // one we're searching for, then start at that point.\n    if (lineNumber >= lastLine) {\n      pos = lastOffset;\n      startLine = lastLine;\n    }\n\n    for (int n = startLine; n < lineNumber; n++) {\n      int nextpos = js.indexOf('\\n', pos);\n      if (nextpos == -1) {\n        return null;\n      }\n      pos = nextpos + 1;\n    }\n\n    // Remember this offset for the next search we do.\n    lastOffset = pos;\n    lastLine = lineNumber;\n\n    if (js.indexOf('\\n', pos) == -1) {\n      // If next new line cannot be found, there are two cases\n      // 1. pos already reaches the end of file, then null should be returned\n      // 2. otherwise, return the contents between pos and the end of file.\n      return (pos == js.length()) ? null : js.substring(pos);\n    } else {\n      return js.substring(pos, js.indexOf('\\n', pos));\n    }\n  }\n", "diff": "diff --git a/src/com/google/javascript/jscomp/SourceFile.java b/src/com/google/javascript/jscomp/SourceFile.java\nindex fc0cf3fc..0dfc8994 100644\n--- a/src/com/google/javascript/jscomp/SourceFile.java\n+++ b/src/com/google/javascript/jscomp/SourceFile.java\n@@ -202,6 +202,7 @@ public class SourceFile implements StaticSourceFile, Serializable {\n    *     of the file. Returns {@code null} if it does not exist,\n    *     or if there was an IO exception.\n    */\n+\n   public String getLine(int lineNumber) {\n     String js = \"\";\n     try {\n@@ -239,12 +240,13 @@ public class SourceFile implements StaticSourceFile, Serializable {\n       // If next new line cannot be found, there are two cases\n       // 1. pos already reaches the end of file, then null should be returned\n       // 2. otherwise, return the contents between pos and the end of file.\n-        return null;\n+      return (pos == js.length()) ? null : js.substring(pos);\n     } else {\n       return js.substring(pos, js.indexOf('\\n', pos));\n     }\n   }\n \n+\n   /**\n    * Get a region around the indicated line number. The exact definition of a\n    * region is implementation specific, but it must contain the line indicated"}
{"project": "Closure", "bug_id": "57", "eval": "PASS", "attempt": 16, "mode": "SL", "patch": "          if (target != null && target.getType() == Token.STRING) {", "diff": "diff --git a/src/com/google/javascript/jscomp/ClosureCodingConvention.java b/src/com/google/javascript/jscomp/ClosureCodingConvention.java\nindex c507c924..b5a3c1b2 100644\n--- a/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n+++ b/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n@@ -194,7 +194,7 @@ public class ClosureCodingConvention extends DefaultCodingConvention {\n         String qualifiedName = callee.getQualifiedName();\n         if (functionName.equals(qualifiedName)) {\n           Node target = callee.getNext();\n-          if (target != null) {\n+          if (target != null && target.getType() == Token.STRING) {\n             className = target.getString();\n           }\n         }"}
{"project": "Closure", "bug_id": "58", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "59", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "61", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "62", "eval": "PASS", "attempt": 7, "mode": "SL", "patch": "        && 0 <= charno && charno <= sourceExcerpt.length()) {", "diff": "diff --git a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\nindex 5a4f884c..60ae9cba 100644\n--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n@@ -95,7 +95,7 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {\n       // charno == sourceExpert.length() means something is missing\n       // at the end of the line\n       if (excerpt.equals(LINE)\n-          && 0 <= charno && charno < sourceExcerpt.length()) {\n+        && 0 <= charno && charno <= sourceExcerpt.length()) {\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {"}
{"project": "Closure", "bug_id": "65", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "66", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "67", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "69", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "70", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "71", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "73", "eval": "PASS", "attempt": 12, "mode": "SL", "patch": "            if (c > 0x1f && c < 0x7f) {", "diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 558e74fe..823d897a 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -1042,7 +1042,7 @@ class CodeGenerator {\n             // No charsetEncoder provided - pass straight latin characters\n             // through, and escape the rest.  Doing the explicit character\n             // check is measurably faster than using the CharsetEncoder.\n-            if (c > 0x1f && c <= 0x7f) {\n+            if (c > 0x1f && c < 0x7f) {\n               sb.append(c);\n             } else {\n               // Other characters can be misinterpreted by some js parsers,"}
{"project": "Closure", "bug_id": "77", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": "        case '\\0': sb.append(\"\\\\0\"); break;", "diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 8cd3ab9d..22df6851 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -963,6 +963,7 @@ class CodeGenerator {\n     for (int i = 0; i < s.length(); i++) {\n       char c = s.charAt(i);\n       switch (c) {\n+        case '\\0': sb.append(\"\\\\0\"); break;\n         case '\\n': sb.append(\"\\\\n\"); break;\n         case '\\r': sb.append(\"\\\\r\"); break;\n         case '\\t': sb.append(\"\\\\t\"); break;"}
{"project": "Closure", "bug_id": "78", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "80", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "81", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "82", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "83", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "86", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": "        return evaluatesToLocalValue(value.getFirstChild(), locals);", "diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex dd78f900..ca677f66 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -2462,7 +2462,7 @@ public final class NodeUtil {\n         // TODO(nicksantos): This needs to be changed so that it\n         // returns true iff we're sure the value was never aliased from inside\n         // the constructor (similar to callHasLocalResult)\n-        return true;\n+        return evaluatesToLocalValue(value.getFirstChild(), locals);\n       case Token.FUNCTION:\n       case Token.REGEXP:\n       case Token.ARRAYLIT:"}
{"project": "Closure", "bug_id": "87", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "88", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "91", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "92", "eval": "PASS", "attempt": 5, "mode": "SL", "patch": "          int indexOfDot = namespace.lastIndexOf('.');", "diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex c929a363..1d738b52 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -786,7 +786,7 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n         } else {\n           // In this case, the name was implicitly provided by two independent\n           // modules. We need to move this code up to a common module.\n-          int indexOfDot = namespace.indexOf('.');\n+          int indexOfDot = namespace.lastIndexOf('.');\n           if (indexOfDot == -1) {\n             // Any old place is fine.\n             compiler.getNodeForCodeInsertion(minimumModule)"}
{"project": "Closure", "bug_id": "94", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "95", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "96", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "97", "eval": "PASS", "attempt": 4, "mode": "SH", "patch": "\n          result = Integer.toUnsignedLong(lvalInt) >>> rvalInt;\n", "diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex d6c194a3..bfdadba9 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -695,7 +695,9 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n           // JavaScript handles zero shifts on signed numbers differently than\n           // Java as an Java int can not represent the unsigned 32-bit number\n           // where JavaScript can so use a long here.\n-          result = lvalInt >>> rvalInt;\n+\n+          result = Integer.toUnsignedLong(lvalInt) >>> rvalInt;\n+\n           break;\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +"}
{"project": "Closure", "bug_id": "99", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "101", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "102", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "104", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "105", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "107", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "109", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "111", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "113", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "114", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "115", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "116", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "117", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "118", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "119", "eval": "PASS", "attempt": 4, "mode": "SL", "patch": "              case Token.CATCH:", "diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..0e9c4d33 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -363,6 +363,7 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+              case Token.CATCH:\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;"}
{"project": "Closure", "bug_id": "120", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "121", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "122", "eval": "PASS", "attempt": 10, "mode": "SH", "patch": "\n    if (comment.getValue().contains(\"\\n@\") || comment.getValue().contains(\"@\")) {\n", "diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 709534bf..0e286994 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -249,7 +249,9 @@ class IRFactory {\n    * Check to see if the given block comment looks like it should be JSDoc.\n    */\n   private void handleBlockComment(Comment comment) {\n-    if (comment.getValue().indexOf(\"/* @\") != -1 || comment.getValue().indexOf(\"\\n * @\") != -1) {\n+\n+    if (comment.getValue().contains(\"\\n@\") || comment.getValue().contains(\"@\")) {\n+\n       errorReporter.warning(\n           SUSPICIOUS_COMMENT_WARNING,\n           sourceName,"}
{"project": "Closure", "bug_id": "123", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "124", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "125", "eval": "PASS", "attempt": 8, "mode": "SL", "patch": "if (fnType != null && !fnType.isEmptyType() && !fnType.isUnknownType()) {", "diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 4e053258..9551eeb8 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1658,7 +1658,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n       FunctionType fnType = type.toMaybeFunctionType();\n-      if (fnType != null) {\n+if (fnType != null && !fnType.isEmptyType() && !fnType.isUnknownType()) {\n         visitParameterList(t, n, fnType);\n         ensureTyped(t, n, fnType.getInstanceType());\n       } else {"}
{"project": "Closure", "bug_id": "126", "eval": "PASS", "attempt": 3, "mode": "SH", "patch": "\n      if (NodeUtil.hasFinally(n)) {\n        Node finallyBlock = n.getFirstChild();\n        tryMinimizeExits(finallyBlock, exitType, labelName);\n      }\n", "diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..2ab2cb47 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,10 +138,12 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n+\n       if (NodeUtil.hasFinally(n)) {\n-        Node finallyBlock = n.getLastChild();\n+        Node finallyBlock = n.getFirstChild();\n         tryMinimizeExits(finallyBlock, exitType, labelName);\n       }\n+\n     }\n \n     // Just a 'label'."}
{"project": "Closure", "bug_id": "128", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "129", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "130", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "131", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "132", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "133", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "140", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "145", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "146", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "150", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "152", "eval": "PASS", "attempt": 2, "mode": "SH", "patch": "\n    if (typeOfThis != null && !(typeOfThis instanceof ObjectType)) {\n      typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n    }\n", "diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..0c875dcd 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,11 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+\n+    if (typeOfThis != null && !(typeOfThis instanceof ObjectType)) {\n+      typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    }\n+\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces ="}
{"project": "Closure", "bug_id": "159", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "160", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "161", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "164", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "168", "eval": "PASS", "attempt": 2, "mode": "SL", "patch": "      if (n.isReturn() && n.getFirstChild() != null && t.getScopeDepth() > 2) {", "diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex cf87eaaf..8ba43589 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1993,7 +1993,7 @@ final class TypedScopeCreator implements ScopeCreator {\n         data.get(t.getScopeRoot()).recordNonEmptyReturn();\n       }\n \n-      if (t.getScopeDepth() <= 2) {\n+      if (n.isReturn() && n.getFirstChild() != null && t.getScopeDepth() > 2) {\n         // The first-order function analyzer looks at two types of variables:\n         //\n         // 1) Local variables that are assigned in inner scopes (\"escaped vars\")"}
{"project": "Closure", "bug_id": "176", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Codec", "bug_id": "2", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Codec", "bug_id": "3", "eval": "PASS", "attempt": 2, "mode": "SL", "patch": "            } else if (contains(value, index + 1, 3, \"IER\")) {", "diff": "diff --git a/src/java/org/apache/commons/codec/language/DoubleMetaphone.java b/src/java/org/apache/commons/codec/language/DoubleMetaphone.java\nindex e2b8e110..f7122d41 100644\n--- a/src/java/org/apache/commons/codec/language/DoubleMetaphone.java\n+++ b/src/java/org/apache/commons/codec/language/DoubleMetaphone.java\n@@ -452,7 +452,7 @@ public class DoubleMetaphone implements StringEncoder {\n             if ((contains(value, 0 ,4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) || contains(value, index + 1, 2, \"ET\")) {\n                 //-- obvious germanic --//\n                 result.append('K');\n-            } else if (contains(value, index + 1, 4, \"IER\")) {\n+            } else if (contains(value, index + 1, 3, \"IER\")) {\n                 result.append('J');\n             } else {\n                 result.append('J', 'K');"}
{"project": "Codec", "bug_id": "4", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Codec", "bug_id": "5", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Codec", "bug_id": "6", "eval": "PASS", "attempt": 7, "mode": "SF", "patch": "\npublic int read(byte b[], int offset, int len) throws IOException {\n    if (b == null) {\n        throw new NullPointerException();\n    } else if (offset < 0 || len < 0) {\n        throw new IndexOutOfBoundsException();\n    } else if (offset > b.length || offset + len > b.length) {\n        throw new IndexOutOfBoundsException();\n    } else if (len == 0) {\n        return 0;\n    } else {\n        if (!base64.hasData()) {\n            byte[] buf = new byte[doEncode ? 4096 : 8192];\n            int c = in.read(buf);\n            if (c > 0 && b.length == len) {\n                base64.setInitialBuffer(b, offset, len);\n            }\n            if (doEncode) {\n                base64.encode(buf, 0, c);\n            } else {\n                base64.decode(buf, 0, c);\n            }\n        }\n        int readLen = base64.readResults(b, offset, len);\n        if (readLen == 0) {\n            byte[] buf = new byte[doEncode ? 4096 : 8192];\n            int c = in.read(buf);\n            if (c > 0 && b.length == len) {\n                base64.setInitialBuffer(b, offset, len);\n            }\n            if (doEncode) {\n                base64.encode(buf, 0, c);\n            } else {\n                base64.decode(buf, 0, c);\n            }\n            readLen = base64.readResults(b, offset, len);\n        }\n        return readLen;\n    }\n}\n", "diff": "diff --git a/src/java/org/apache/commons/codec/binary/Base64InputStream.java b/src/java/org/apache/commons/codec/binary/Base64InputStream.java\nindex 583a5847..4e227acf 100644\n--- a/src/java/org/apache/commons/codec/binary/Base64InputStream.java\n+++ b/src/java/org/apache/commons/codec/binary/Base64InputStream.java\n@@ -135,49 +135,47 @@ public class Base64InputStream extends FilterInputStream {\n      * @throws IndexOutOfBoundsException\n      *             if offset, len or buffer size are invalid\n      */\n-    public int read(byte b[], int offset, int len) throws IOException {\n-        if (b == null) {\n-            throw new NullPointerException();\n-        } else if (offset < 0 || len < 0) {\n-            throw new IndexOutOfBoundsException();\n-        } else if (offset > b.length || offset + len > b.length) {\n-            throw new IndexOutOfBoundsException();\n-        } else if (len == 0) {\n-            return 0;\n-        } else {\n-            /*\n-             Rationale for while-loop on (readLen == 0):\n-             -----\n-             Base64.readResults() usually returns > 0 or EOF (-1).  In the\n-             rare case where it returns 0, we just keep trying.\n \n-             This is essentially an undocumented contract for InputStream\n-             implementors that want their code to work properly with\n-             java.io.InputStreamReader, since the latter hates it when\n-             InputStream.read(byte[]) returns a zero.  Unfortunately our\n-             readResults() call must return 0 if a large amount of the data\n-             being decoded was non-base64, so this while-loop enables proper\n-             interop with InputStreamReader for that scenario.\n-             -----\n-             This is a fix for CODEC-101\n-            */\n-                if (!base64.hasData()) {\n-                    byte[] buf = new byte[doEncode ? 4096 : 8192];\n-                    int c = in.read(buf);\n-                    // A little optimization to avoid System.arraycopy()\n-                    // when possible.\n-                    if (c > 0 && b.length == len) {\n-                        base64.setInitialBuffer(b, offset, len);\n-                    }\n-                    if (doEncode) {\n-                        base64.encode(buf, 0, c);\n-                    } else {\n-                        base64.decode(buf, 0, c);\n-                    }\n-                }\n-            return base64.readResults(b, offset, len);\n+public int read(byte b[], int offset, int len) throws IOException {\n+    if (b == null) {\n+        throw new NullPointerException();\n+    } else if (offset < 0 || len < 0) {\n+        throw new IndexOutOfBoundsException();\n+    } else if (offset > b.length || offset + len > b.length) {\n+        throw new IndexOutOfBoundsException();\n+    } else if (len == 0) {\n+        return 0;\n+    } else {\n+        if (!base64.hasData()) {\n+            byte[] buf = new byte[doEncode ? 4096 : 8192];\n+            int c = in.read(buf);\n+            if (c > 0 && b.length == len) {\n+                base64.setInitialBuffer(b, offset, len);\n+            }\n+            if (doEncode) {\n+                base64.encode(buf, 0, c);\n+            } else {\n+                base64.decode(buf, 0, c);\n+            }\n         }\n+        int readLen = base64.readResults(b, offset, len);\n+        if (readLen == 0) {\n+            byte[] buf = new byte[doEncode ? 4096 : 8192];\n+            int c = in.read(buf);\n+            if (c > 0 && b.length == len) {\n+                base64.setInitialBuffer(b, offset, len);\n+            }\n+            if (doEncode) {\n+                base64.encode(buf, 0, c);\n+            } else {\n+                base64.decode(buf, 0, c);\n+            }\n+            readLen = base64.readResults(b, offset, len);\n+        }\n+        return readLen;\n     }\n+}\n+\n \n     /**\n      * {@inheritDoc}"}
{"project": "Codec", "bug_id": "7", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Codec", "bug_id": "9", "eval": "PASS", "attempt": 8, "mode": "SL", "patch": "        long len = getEncodeLength(binaryData, 0, CHUNK_SEPARATOR);", "diff": "diff --git a/src/java/org/apache/commons/codec/binary/Base64.java b/src/java/org/apache/commons/codec/binary/Base64.java\nindex 2cd0163b..988cfd90 100644\n--- a/src/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/java/org/apache/commons/codec/binary/Base64.java\n@@ -824,7 +824,7 @@ public class Base64 implements BinaryEncoder, BinaryDecoder {\n             return binaryData;\n         }\n \n-        long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n+        long len = getEncodeLength(binaryData, 0, CHUNK_SEPARATOR);\n         if (len > maxResultSize) {\n             throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                 len +"}
{"project": "Codec", "bug_id": "10", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Codec", "bug_id": "15", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Codec", "bug_id": "16", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Codec", "bug_id": "17", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Codec", "bug_id": "18", "eval": "PASS", "attempt": 5, "mode": "SL", "patch": "        return cs1.toString().equals(cs2.toString());", "diff": "diff --git a/src/main/java/org/apache/commons/codec/binary/StringUtils.java b/src/main/java/org/apache/commons/codec/binary/StringUtils.java\nindex bef55f70..ac548e30 100644\n--- a/src/main/java/org/apache/commons/codec/binary/StringUtils.java\n+++ b/src/main/java/org/apache/commons/codec/binary/StringUtils.java\n@@ -78,7 +78,7 @@ public class StringUtils {\n         if (cs1 instanceof String && cs2 instanceof String) {\n             return cs1.equals(cs2);\n         }\n-        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n+        return cs1.toString().equals(cs2.toString());\n     }\n \n     /**"}
{"project": "Collections", "bug_id": "25", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "1", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "5", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "7", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "8", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "10", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "11", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "12", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "13", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "14", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "15", "eval": "PASS", "attempt": 1, "mode": "SF", "patch": "\npublic boolean equals(Object obj) {\n    if(this == obj) {\n        return true;\n    }\n    if(obj == null || getClass() != obj.getClass()) {\n        return false;\n    }\n    ZipArchiveEntry other = (ZipArchiveEntry) obj;\n    String myName = getName();\n    String otherName = other.getName();\n    if(myName == null) {\n        if(otherName != null) {\n            return false;\n        }\n    } else if(!myName.equals(otherName)) {\n        return false;\n    }\n    String myComment = getComment();\n    String otherComment = other.getComment();\n    if(myComment == null || myComment.equals(\"\")) {\n        if(otherComment != null && !otherComment.equals(\"\")) {\n            return false;\n        }\n    } else if(!myComment.equals(otherComment)) {\n        return false;\n    }\n    return getTime() == other.getTime()\n        && getInternalAttributes() == other.getInternalAttributes()\n        && getPlatform() == other.getPlatform()\n        && getExternalAttributes() == other.getExternalAttributes()\n        && getMethod() == other.getMethod()\n        && getSize() == other.getSize()\n        && getCrc() == other.getCrc()\n        && getCompressedSize() == other.getCompressedSize()\n        && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra())\n        && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra())\n        && gpb.equals(other.gpb);\n}\n", "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\nindex 1833227c..6bcff375 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n@@ -646,44 +646,44 @@ public class ZipArchiveEntry extends java.util.zip.ZipEntry\n      * @see java.lang.Object#equals(java.lang.Object)\n      */\n     @Override\n-    public boolean equals(Object obj) {\n-        if (this == obj) {\n-            return true;\n-        }\n-        if (obj == null || getClass() != obj.getClass()) {\n-            return false;\n-        }\n-        ZipArchiveEntry other = (ZipArchiveEntry) obj;\n-        String myName = getName();\n-        String otherName = other.getName();\n-        if (myName == null) {\n-            if (otherName != null) {\n-                return false;\n-            }\n-        } else if (!myName.equals(otherName)) {\n+\n+public boolean equals(Object obj) {\n+    if(this == obj) {\n+        return true;\n+    }\n+    if(obj == null || getClass() != obj.getClass()) {\n+        return false;\n+    }\n+    ZipArchiveEntry other = (ZipArchiveEntry) obj;\n+    String myName = getName();\n+    String otherName = other.getName();\n+    if(myName == null) {\n+        if(otherName != null) {\n             return false;\n         }\n-        String myComment = getComment();\n-        String otherComment = other.getComment();\n-        if (myComment == null) {\n-            if (otherComment != null) {\n-                return false;\n-            }\n-        } else if (!myComment.equals(otherComment)) {\n+    } else if(!myName.equals(otherName)) {\n+        return false;\n+    }\n+    String myComment = getComment();\n+    String otherComment = other.getComment();\n+    if(myComment == null || myComment.equals(\"\")) {\n+        if(otherComment != null && !otherComment.equals(\"\")) {\n             return false;\n         }\n-        return getTime() == other.getTime()\n-            && getInternalAttributes() == other.getInternalAttributes()\n-            && getPlatform() == other.getPlatform()\n-            && getExternalAttributes() == other.getExternalAttributes()\n-            && getMethod() == other.getMethod()\n-            && getSize() == other.getSize()\n-            && getCrc() == other.getCrc()\n-            && getCompressedSize() == other.getCompressedSize()\n-            && Arrays.equals(getCentralDirectoryExtra(),\n-                             other.getCentralDirectoryExtra())\n-            && Arrays.equals(getLocalFileDataExtra(),\n-                             other.getLocalFileDataExtra())\n-            && gpb.equals(other.gpb);\n-    }\n+    } else if(!myComment.equals(otherComment)) {\n+        return false;\n+    }\n+    return getTime() == other.getTime()\n+        && getInternalAttributes() == other.getInternalAttributes()\n+        && getPlatform() == other.getPlatform()\n+        && getExternalAttributes() == other.getExternalAttributes()\n+        && getMethod() == other.getMethod()\n+        && getSize() == other.getSize()\n+        && getCrc() == other.getCrc()\n+        && getCompressedSize() == other.getCompressedSize()\n+        && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra())\n+        && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra())\n+        && gpb.equals(other.gpb);\n+}\n+\n }"}
{"project": "Compress", "bug_id": "16", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "17", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "18", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "19", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "21", "eval": "PASS", "attempt": 1, "mode": "SF", "patch": "\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i) ? 1 : 0) << shift);\n        --shift;\n        if (shift < 0) {\n            header.write(cache);\n            shift = 7;\n            cache = 0;\n        }\n    }\n    if (length > 0 && shift < 7) {\n        header.write(cache);\n    }\n}\n", "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\nindex 05912b9f..abb9869e 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n@@ -631,22 +631,24 @@ public class SevenZOutputFile {\n         }\n     }\n \n-    private void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n-        int cache = 0;\n-        int shift = 7;\n-        for (int i = 0; i < length; i++) {\n-            cache |= ((bits.get(i) ? 1 : 0) << shift);\n-            --shift;\n-            if (shift == 0) {\n-                header.write(cache);\n-                shift = 7;\n-                cache = 0;\n-            }\n-        }\n-        if (length > 0 && shift > 0) {\n+\n+private void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n+    int cache = 0;\n+    int shift = 7;\n+    for (int i = 0; i < length; i++) {\n+        cache |= ((bits.get(i) ? 1 : 0) << shift);\n+        --shift;\n+        if (shift < 0) {\n             header.write(cache);\n+            shift = 7;\n+            cache = 0;\n         }\n     }\n+    if (length > 0 && shift < 7) {\n+        header.write(cache);\n+    }\n+}\n+\n \n     private class OutputStreamWrapper extends OutputStream {\n         @Override"}
{"project": "Compress", "bug_id": "23", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": "                dictSize = (dictSize << 8) | (coder.properties[i + 1] & 0xFF);", "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\nindex 0bc5a1ee..51bc3f9d 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n@@ -109,7 +109,7 @@ class Coders {\n             byte propsByte = coder.properties[0];\n             long dictSize = coder.properties[1];\n             for (int i = 1; i < 4; i++) {\n-                dictSize |= (coder.properties[i + 1] << (8 * i));\n+                dictSize = (dictSize << 8) | (coder.properties[i + 1] & 0xFF);\n             }\n             if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {\n                 throw new IOException(\"Dictionary larger than 4GiB maximum size\");"}
{"project": "Compress", "bug_id": "24", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "25", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "26", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "27", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "28", "eval": "PASS", "attempt": 2, "mode": "SF", "patch": "\n    public int read(byte[] buf, int offset, int numToRead) throws IOException {\n        int totalRead = 0;\n\n        if (hasHitEOF || entryOffset >= entrySize) {\n            return -1;\n        }\n\n        if (currEntry == null) {\n            throw new IllegalStateException(\"No current tar entry\");\n        }\n\n        numToRead = Math.min(numToRead, available());\n\n        totalRead = is.read(buf, offset, numToRead);\n        count(totalRead);\n\n        if (totalRead == -1) {\n            hasHitEOF = true;\n            throw new IOException(\"Unexpected end of file\");\n        } else {\n            entryOffset += totalRead;\n        }\n\n        return totalRead;\n    }\n", "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\nindex fe2c1133..810ad5d4 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n@@ -566,8 +566,9 @@ public class TarArchiveInputStream extends ArchiveInputStream {\n      * @throws IOException on error\n      */\n     @Override\n+\n     public int read(byte[] buf, int offset, int numToRead) throws IOException {\n-    \tint totalRead = 0;\n+        int totalRead = 0;\n \n         if (hasHitEOF || entryOffset >= entrySize) {\n             return -1;\n@@ -578,12 +579,13 @@ public class TarArchiveInputStream extends ArchiveInputStream {\n         }\n \n         numToRead = Math.min(numToRead, available());\n-        \n+\n         totalRead = is.read(buf, offset, numToRead);\n         count(totalRead);\n-        \n+\n         if (totalRead == -1) {\n             hasHitEOF = true;\n+            throw new IOException(\"Unexpected end of file\");\n         } else {\n             entryOffset += totalRead;\n         }\n@@ -591,6 +593,7 @@ public class TarArchiveInputStream extends ArchiveInputStream {\n         return totalRead;\n     }\n \n+\n     /**\n      * Whether this class is able to read the given entry.\n      *"}
{"project": "Compress", "bug_id": "30", "eval": "PASS", "attempt": 6, "mode": "SH", "patch": "\n        if (len == 0) {\n            return 0;  // If length is 0, return 0 immediately\n        }\n", "diff": "diff --git a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\nindex e0e3b1ec..e93c9cf8 100644\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n@@ -166,6 +166,11 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements\n             throw new IOException(\"stream closed\");\n         }\n \n+        if (len == 0) {\n+            return 0;  // If length is 0, return 0 immediately\n+        }\n+\n+\n         final int hi = offs + len;\n         int destOffs = offs;\n         int b;"}
{"project": "Compress", "bug_id": "31", "eval": "PASS", "attempt": 5, "mode": "SH", "patch": "\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n", "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\nindex 40e7871f..75fea879 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n@@ -132,9 +132,12 @@ public class TarUtils {\n \n         for ( ;start < end; start++) {\n             final byte currentByte = buffer[start];\n-            if (currentByte == 0) {\n-                break;\n+\n+            if (currentByte < '0' || currentByte > '7'){\n+                throw new IllegalArgumentException(\n+                        exceptionMessage(buffer, offset, length, start, currentByte));\n             }\n+\n             // CheckStyle:MagicNumber OFF\n             if (currentByte < '0' || currentByte > '7'){\n                 throw new IllegalArgumentException("}
{"project": "Compress", "bug_id": "32", "eval": "PASS", "attempt": 9, "mode": "SF", "patch": "\n    private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n        for (Entry<String, String> ent : headers.entrySet()){\n            String key = ent.getKey();\n            String val = ent.getValue();\n            if (\"path\".equals(key)){\n                currEntry.setName(val);\n            } else if (\"linkpath\".equals(key)){\n                currEntry.setLinkName(val);\n            } else if (\"gid\".equals(key)){\n                currEntry.setGroupId(Long.parseLong(val));\n            } else if (\"gname\".equals(key)){\n                currEntry.setGroupName(val);\n            } else if (\"uid\".equals(key)){\n                currEntry.setUserId(Long.parseLong(val));\n            } else if (\"uname\".equals(key)){\n                currEntry.setUserName(val);\n            } else if (\"size\".equals(key)){\n                currEntry.setSize(Long.parseLong(val));\n            } else if (\"mtime\".equals(key)){\n                currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n            } else if (\"SCHILY.devminor\".equals(key)){\n                currEntry.setDevMinor(Integer.parseInt(val));\n            } else if (\"SCHILY.devmajor\".equals(key)){\n                currEntry.setDevMajor(Integer.parseInt(val));\n            }\n        }\n    }\n", "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\nindex c5570071..99a96179 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n@@ -478,18 +478,8 @@ public class TarArchiveInputStream extends ArchiveInputStream {\n         return headers;\n     }\n \n+\n     private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n-        /*\n-         * The following headers are defined for Pax.\n-         * atime, ctime, charset: cannot use these without changing TarArchiveEntry fields\n-         * mtime\n-         * comment\n-         * gid, gname\n-         * linkpath\n-         * size\n-         * uid,uname\n-         * SCHILY.devminor, SCHILY.devmajor: don't have setters/getters for those\n-         */\n         for (Entry<String, String> ent : headers.entrySet()){\n             String key = ent.getKey();\n             String val = ent.getValue();\n@@ -498,11 +488,11 @@ public class TarArchiveInputStream extends ArchiveInputStream {\n             } else if (\"linkpath\".equals(key)){\n                 currEntry.setLinkName(val);\n             } else if (\"gid\".equals(key)){\n-                currEntry.setGroupId(Integer.parseInt(val));\n+                currEntry.setGroupId(Long.parseLong(val));\n             } else if (\"gname\".equals(key)){\n                 currEntry.setGroupName(val);\n             } else if (\"uid\".equals(key)){\n-                currEntry.setUserId(Integer.parseInt(val));\n+                currEntry.setUserId(Long.parseLong(val));\n             } else if (\"uname\".equals(key)){\n                 currEntry.setUserName(val);\n             } else if (\"size\".equals(key)){\n@@ -517,6 +507,7 @@ public class TarArchiveInputStream extends ArchiveInputStream {\n         }\n     }\n \n+\n     /**\n      * Adds the sparse chunks from the current entry to the sparse chunks,\n      * including any additional sparse entries following the current entry."}
{"project": "Compress", "bug_id": "35", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "36", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "37", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "38", "eval": "PASS", "attempt": 12, "mode": "SL", "patch": "        if (file != null) {", "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\nindex 941bbbd3..a7cb62a4 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n@@ -856,7 +856,7 @@ public class TarArchiveEntry implements TarConstants, ArchiveEntry {\n             return true;\n         }\n \n-        if (getName().endsWith(\"/\")) {\n+        if (file != null) {\n             return true;\n         }\n \n@@ -1250,4 +1250,3 @@ public class TarArchiveEntry implements TarConstants, ArchiveEntry {\n         }\n     }\n }\n-"}
{"project": "Compress", "bug_id": "40", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "41", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "44", "eval": "PASS", "attempt": 3, "mode": "SF", "patch": "\npublic ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) {\n        if (checksum == null || in == null) {\n            throw new NullPointerException();\n        }\n        this.checksum = checksum;\n        this.in = in;\n    }\n", "diff": "diff --git a/src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java b/src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java\nindex 10c7d68d..81e7a41d 100644\n--- a/src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java\n@@ -30,14 +30,16 @@ public class ChecksumCalculatingInputStream extends InputStream {\n     private final InputStream in;\n     private final Checksum checksum;\n \n-    public ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) {\n-\n-\n \n+public ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) {\n+        if (checksum == null || in == null) {\n+            throw new NullPointerException();\n+        }\n         this.checksum = checksum;\n         this.in = in;\n     }\n \n+\n     /**\n      * Reads a single byte from the stream\n      * @throws IOException if the underlying stream throws or the"}
{"project": "Compress", "bug_id": "45", "eval": "PASS", "attempt": 6, "mode": "SF", "patch": "\npublic static int formatLongOctalOrBinaryBytes(\n    final long value, final byte[] buf, final int offset, final int length) {\n\n    // Check whether we are dealing with UID/GID or SIZE field\n    final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;\n\n    final boolean negative = value < 0;\n    if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars\n        return formatLongOctalBytes(value, buf, offset, length);\n    }\n\n    if (Math.abs(value) > Math.pow(2, 8*length)) { // updated condition for overflow\n        throw new IllegalArgumentException(String.format(\n            \"Value %s is too large for %d byte field.\", value, length));\n    }\n\n    if (length < 9) {\n        formatLongBinary(value, buf, offset, length, negative);\n    } else {\n        formatBigIntegerBinary(value, buf, offset, length, negative);\n    }\n\n    buf[offset] = (byte) (negative ? 0xff : 0x80);\n    return offset + length;\n}\n", "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\nindex 39ce5c1a..435fdee7 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n@@ -471,26 +471,34 @@ public static int formatLongOctalBytes(final long value, final byte[] buf, final\n      * will not fit in the buffer.\n      * @since 1.4\n      */\n-    public static int formatLongOctalOrBinaryBytes(\n-        final long value, final byte[] buf, final int offset, final int length) {\n \n-        // Check whether we are dealing with UID/GID or SIZE field\n-        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;\n+public static int formatLongOctalOrBinaryBytes(\n+    final long value, final byte[] buf, final int offset, final int length) {\n \n-        final boolean negative = value < 0;\n-        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars\n-            return formatLongOctalBytes(value, buf, offset, length);\n-        }\n+    // Check whether we are dealing with UID/GID or SIZE field\n+    final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;\n \n-        if (length < 9) {\n-            formatLongBinary(value, buf, offset, length, negative);\n-        }\n-        formatBigIntegerBinary(value, buf, offset, length, negative);\n+    final boolean negative = value < 0;\n+    if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars\n+        return formatLongOctalBytes(value, buf, offset, length);\n+    }\n \n-        buf[offset] = (byte) (negative ? 0xff : 0x80);\n-        return offset + length;\n+    if (Math.abs(value) > Math.pow(2, 8*length)) { // updated condition for overflow\n+        throw new IllegalArgumentException(String.format(\n+            \"Value %s is too large for %d byte field.\", value, length));\n     }\n \n+    if (length < 9) {\n+        formatLongBinary(value, buf, offset, length, negative);\n+    } else {\n+        formatBigIntegerBinary(value, buf, offset, length, negative);\n+    }\n+\n+    buf[offset] = (byte) (negative ? 0xff : 0x80);\n+    return offset + length;\n+}\n+\n+\n     private static void formatLongBinary(final long value, final byte[] buf,\n                                          final int offset, final int length,\n                                          final boolean negative) {"}
{"project": "Compress", "bug_id": "46", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Csv", "bug_id": "1", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Csv", "bug_id": "2", "eval": "PASS", "attempt": 1, "mode": "SF", "patch": "\npublic String get(final String name) {\n    if (mapping == null) {\n        throw new IllegalStateException(\n                \"No header mapping was specified, the record values can't be accessed by name\");\n    }\n    final Integer index = mapping.get(name);\n    if (index == null) {\n        return null;\n    }\n    if (index < 0 || index >= values.length) {\n        throw new IllegalArgumentException(\"Index \" + index + \" is out of range [0, \" + values.length + \")\");\n    }\n    return values[index];\n}\n", "diff": "diff --git a/src/main/java/org/apache/commons/csv/CSVRecord.java b/src/main/java/org/apache/commons/csv/CSVRecord.java\nindex dc52017..4a041c9 100644\n--- a/src/main/java/org/apache/commons/csv/CSVRecord.java\n+++ b/src/main/java/org/apache/commons/csv/CSVRecord.java\n@@ -76,14 +76,22 @@ public class CSVRecord implements Serializable, Iterable<String> {\n      *             if the record is inconsistent\n      * @see #isConsistent()\n      */\n-    public String get(final String name) {\n-        if (mapping == null) {\n-            throw new IllegalStateException(\n-                    \"No header mapping was specified, the record values can't be accessed by name\");\n-        }\n-        final Integer index = mapping.get(name);\n-            return index != null ? values[index.intValue()] : null;\n+\n+public String get(final String name) {\n+    if (mapping == null) {\n+        throw new IllegalStateException(\n+                \"No header mapping was specified, the record values can't be accessed by name\");\n+    }\n+    final Integer index = mapping.get(name);\n+    if (index == null) {\n+        return null;\n+    }\n+    if (index < 0 || index >= values.length) {\n+        throw new IllegalArgumentException(\"Index \" + index + \" is out of range [0, \" + values.length + \")\");\n     }\n+    return values[index];\n+}\n+\n \n     /**\n      * Returns true if this record is consistent, false if not. Currently, the only check is matching the record size to"}
{"project": "Csv", "bug_id": "3", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Csv", "bug_id": "4", "eval": "PASS", "attempt": 3, "mode": "SL", "patch": "        return (this.headerMap == null) ? null : new LinkedHashMap<String, Integer>(this.headerMap);", "diff": "diff --git a/src/main/java/org/apache/commons/csv/CSVParser.java b/src/main/java/org/apache/commons/csv/CSVParser.java\nindex 9d56f1a..6048095 100644\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n@@ -285,7 +285,7 @@ public final class CSVParser implements Iterable<CSVRecord>, Closeable {\n      * @return a copy of the header map that iterates in column order.\n      */\n     public Map<String, Integer> getHeaderMap() {\n-        return new LinkedHashMap<String, Integer>(this.headerMap);\n+        return (this.headerMap == null) ? null : new LinkedHashMap<String, Integer>(this.headerMap);\n     }\n \n     /**"}
{"project": "Csv", "bug_id": "5", "eval": "PASS", "attempt": 13, "mode": "SF", "patch": "\n    public void println() throws IOException {\n        final String recordSeparator = format.getRecordSeparator();\n        if (recordSeparator != null) {\n            out.append(recordSeparator);\n        }\n        newRecord = true;\n    }\n", "diff": "diff --git a/src/main/java/org/apache/commons/csv/CSVPrinter.java b/src/main/java/org/apache/commons/csv/CSVPrinter.java\nindex 3255360..baf9cab 100644\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n@@ -320,12 +320,16 @@ public final class CSVPrinter implements Flushable, Closeable {\n      * @throws IOException\n      *             If an I/O error occurs\n      */\n+\n     public void println() throws IOException {\n         final String recordSeparator = format.getRecordSeparator();\n+        if (recordSeparator != null) {\n             out.append(recordSeparator);\n+        }\n         newRecord = true;\n     }\n \n+\n     /**\n      * Prints a single line of delimiter separated values. The values will be quoted if needed. Quotes and newLine\n      * characters will be escaped."}
{"project": "Csv", "bug_id": "6", "eval": "PASS", "attempt": 17, "mode": "SF", "patch": "\n    public Iterator<String> iterator() {\n        return toList().iterator();\n    }\n\n    /**\n     * Puts all values of this record into the given Map.\n     *\n     * @param map The Map to populate.\n     * @return the given map.\n     */\n    <M extends Map<String, String>> M putIn(final M map) {\n        for (final Entry<String, Integer> entry : mapping.entrySet()) {\n            final int col = entry.getValue().intValue();\n            if (col < values.length) {\n                map.put(entry.getKey(), values[col]);\n            }\n        }\n        return map;\n    }\n", "diff": "diff --git a/src/main/java/org/apache/commons/csv/CSVRecord.java b/src/main/java/org/apache/commons/csv/CSVRecord.java\nindex 7380d9f..2893204 100644\n--- a/src/main/java/org/apache/commons/csv/CSVRecord.java\n+++ b/src/main/java/org/apache/commons/csv/CSVRecord.java\n@@ -166,6 +166,7 @@ public final class CSVRecord implements Serializable, Iterable<String> {\n      *\n      * @return an iterator over the values of this record.\n      */\n+\n     public Iterator<String> iterator() {\n         return toList().iterator();\n     }\n@@ -179,11 +180,14 @@ public final class CSVRecord implements Serializable, Iterable<String> {\n     <M extends Map<String, String>> M putIn(final M map) {\n         for (final Entry<String, Integer> entry : mapping.entrySet()) {\n             final int col = entry.getValue().intValue();\n+            if (col < values.length) {\n                 map.put(entry.getKey(), values[col]);\n+            }\n         }\n         return map;\n     }\n \n+\n     /**\n      * Returns the number of values in this record.\n      *"}
{"project": "Csv", "bug_id": "9", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Csv", "bug_id": "10", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Csv", "bug_id": "11", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": "                    final boolean emptyHeader = header == null || header.trim().isEmpty();", "diff": "diff --git a/src/main/java/org/apache/commons/csv/CSVParser.java b/src/main/java/org/apache/commons/csv/CSVParser.java\nindex b6867a4..b7ca3fa 100644\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n@@ -381,7 +381,7 @@ public final class CSVParser implements Iterable<CSVRecord>, Closeable {\n                 for (int i = 0; i < headerRecord.length; i++) {\n                     final String header = headerRecord[i];\n                     final boolean containsHeader = hdrMap.containsKey(header);\n-                    final boolean emptyHeader = header.trim().isEmpty();\n+                    final boolean emptyHeader = header == null || header.trim().isEmpty();\n                     if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {\n                         throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header +\n                                 \"\\\" in \" + Arrays.toString(headerRecord));"}
{"project": "Csv", "bug_id": "14", "eval": "PASS", "attempt": 6, "mode": "SL", "patch": "                if (c <= ' ' || c == LF || c == CR || c == quoteChar || c == delimChar) {", "diff": "diff --git a/src/main/java/org/apache/commons/csv/CSVFormat.java b/src/main/java/org/apache/commons/csv/CSVFormat.java\nindex 35ee86a..7f9932b 100644\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n@@ -1036,7 +1036,7 @@ public final class CSVFormat implements Serializable {\n                 char c = value.charAt(pos);\n \n                 // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E\n-                if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n+                if (c <= ' ' || c == LF || c == CR || c == quoteChar || c == delimChar) {\n                     quote = true;\n                 } else if (c <= COMMENT) {\n                     // Some other chars at the start of a value caused the parser to fail, so for now"}
{"project": "Csv", "bug_id": "15", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Gson", "bug_id": "5", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Gson", "bug_id": "6", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Gson", "bug_id": "10", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Gson", "bug_id": "11", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": "        case STRING:", "diff": "diff --git a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\nindex 6a51c64e..0d7da34a 100644\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n@@ -368,6 +368,7 @@ public final class TypeAdapters {\n         in.nextNull();\n         return null;\n       case NUMBER:\n+        case STRING:\n         return new LazilyParsedNumber(in.nextString());\n       default:\n         throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);"}
{"project": "Gson", "bug_id": "12", "eval": "PASS", "attempt": 2, "mode": "SF", "patch": "\n@Override public void skipValue() throws IOException {\n    if (peek() == JsonToken.NAME) {\n        nextName();\n        if (stackSize > 1){\n            pathNames[stackSize - 2] = \"null\";\n        }\n    } else {\n        popStack();\n    }\n    \n    if (stackSize > 0){\n        pathNames[stackSize - 1] = \"null\";\n        pathIndices[stackSize - 1]++;\n    }\n}\n", "diff": "diff --git a/gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java b/gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java\nindex 2e7644f0..b6b5eea2 100644\n--- a/gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java\n@@ -253,16 +253,23 @@ public final class JsonTreeReader extends JsonReader {\n     stackSize = 1;\n   }\n \n-  @Override public void skipValue() throws IOException {\n+\n+@Override public void skipValue() throws IOException {\n     if (peek() == JsonToken.NAME) {\n-      nextName();\n-      pathNames[stackSize - 2] = \"null\";\n+        nextName();\n+        if (stackSize > 1){\n+            pathNames[stackSize - 2] = \"null\";\n+        }\n     } else {\n-      popStack();\n+        popStack();\n+    }\n+    \n+    if (stackSize > 0){\n         pathNames[stackSize - 1] = \"null\";\n+        pathIndices[stackSize - 1]++;\n     }\n-      pathIndices[stackSize - 1]++;\n-  }\n+}\n+\n \n   @Override public String toString() {\n     return getClass().getSimpleName();"}
{"project": "Gson", "bug_id": "13", "eval": "PASS", "attempt": 8, "mode": "SL", "patch": "    if (last == NUMBER_CHAR_DIGIT && fitsInLong && value != 0) {", "diff": "diff --git a/gson/src/main/java/com/google/gson/stream/JsonReader.java b/gson/src/main/java/com/google/gson/stream/JsonReader.java\nindex 877742bf..c0b4b6f5 100644\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n@@ -728,7 +728,7 @@ public class JsonReader implements Closeable {\n     }\n \n     // We've read a complete number. Decide if it's a PEEKED_LONG or a PEEKED_NUMBER.\n-    if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {\n+    if (last == NUMBER_CHAR_DIGIT && fitsInLong && value != 0) {\n       peekedLong = negative ? value : -value;\n       pos += i;\n       return peeked = PEEKED_LONG;"}
{"project": "Gson", "bug_id": "15", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Gson", "bug_id": "16", "eval": "PASS", "attempt": 3, "mode": "SF", "patch": "\n  private static Type resolve(Type context, Class<?> contextRawType, Type toResolve,\n                              Collection<TypeVariable> visitedTypeVariables) {\n    // this implementation is made a little more complicated in an attempt to avoid object-creation\n    while (true) {\n      if (toResolve instanceof TypeVariable) {\n        TypeVariable<?> typeVariable = (TypeVariable<?>) toResolve;\n        if (visitedTypeVariables.contains(typeVariable)) {\n          return toResolve;\n        }\n        visitedTypeVariables.add(typeVariable);\n        toResolve = resolveTypeVariable(context, contextRawType, typeVariable);\n        if (toResolve == typeVariable) {\n          return toResolve;\n        }\n\n      } else if (toResolve instanceof Class && ((Class<?>) toResolve).isArray()) {\n        Class<?> original = (Class<?>) toResolve;\n        Type componentType = original.getComponentType();\n        Type newComponentType = resolve(context, contextRawType, componentType, visitedTypeVariables);\n        return componentType == newComponentType\n            ? original\n            : arrayOf(newComponentType);\n\n      } else if (toResolve instanceof GenericArrayType) {\n        GenericArrayType original = (GenericArrayType) toResolve;\n        Type componentType = original.getGenericComponentType();\n        Type newComponentType = resolve(context, contextRawType, componentType, visitedTypeVariables);\n        return componentType == newComponentType\n            ? original\n            : arrayOf(newComponentType);\n\n      } else if (toResolve instanceof ParameterizedType) {\n        ParameterizedType original = (ParameterizedType) toResolve;\n        Type ownerType = original.getOwnerType();\n        Type newOwnerType = resolve(context, contextRawType, ownerType, visitedTypeVariables);\n        boolean changed = newOwnerType != ownerType;\n\n        Type[] args = original.getActualTypeArguments();\n        for (int t = 0, length = args.length; t < length; t++) {\n          Type resolvedTypeArgument = resolve(context, contextRawType, args[t], visitedTypeVariables);\n          if (resolvedTypeArgument != args[t]) {\n            if (!changed) {\n              args = args.clone();\n              changed = true;\n            }\n            args[t] = resolvedTypeArgument;\n          }\n        }\n\n        return changed\n            ? newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args)\n            : original;\n\n      } else if (toResolve instanceof WildcardType) {\n        WildcardType original = (WildcardType) toResolve;\n        Type[] originalLowerBound = original.getLowerBounds();\n        Type[] originalUpperBound = original.getUpperBounds();\n\n        if (originalLowerBound.length == 1) {\n          Type lowerBound = resolve(context, contextRawType, originalLowerBound[0], visitedTypeVariables);\n          if (lowerBound != originalLowerBound[0]) {\n            return supertypeOf(lowerBound);\n          }\n        } else if (originalUpperBound.length == 1) {\n          Type upperBound = resolve(context, contextRawType, originalUpperBound[0], visitedTypeVariables);\n          if (upperBound != originalUpperBound[0]) {\n            return subtypeOf(upperBound);\n          }\n        }\n        return original;\n\n      } else {\n        return toResolve;\n      }\n    }\n  }\n", "diff": "diff --git a/gson/src/main/java/com/google/gson/internal/$Gson$Types.java b/gson/src/main/java/com/google/gson/internal/$Gson$Types.java\nindex 17ed0ff2..b1c1e527 100644\n--- a/gson/src/main/java/com/google/gson/internal/$Gson$Types.java\n+++ b/gson/src/main/java/com/google/gson/internal/$Gson$Types.java\n@@ -333,13 +333,17 @@ public final class $Gson$Types {\n     return resolve(context, contextRawType, toResolve, new HashSet<TypeVariable>());\n   }\n \n+\n   private static Type resolve(Type context, Class<?> contextRawType, Type toResolve,\n                               Collection<TypeVariable> visitedTypeVariables) {\n     // this implementation is made a little more complicated in an attempt to avoid object-creation\n     while (true) {\n       if (toResolve instanceof TypeVariable) {\n         TypeVariable<?> typeVariable = (TypeVariable<?>) toResolve;\n-          // cannot reduce due to infinite recursion\n+        if (visitedTypeVariables.contains(typeVariable)) {\n+          return toResolve;\n+        }\n+        visitedTypeVariables.add(typeVariable);\n         toResolve = resolveTypeVariable(context, contextRawType, typeVariable);\n         if (toResolve == typeVariable) {\n           return toResolve;\n@@ -407,6 +411,7 @@ public final class $Gson$Types {\n     }\n   }\n \n+\n   static Type resolveTypeVariable(Type context, Class<?> contextRawType, TypeVariable<?> unknown) {\n     Class<?> declaredByRaw = declaringClassOf(unknown);\n "}
{"project": "Gson", "bug_id": "17", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Gson", "bug_id": "18", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonCore", "bug_id": "3", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonCore", "bug_id": "4", "eval": "PASS", "attempt": 1, "mode": "SF", "patch": "\n    public char[] expandCurrentSegment()\n    {\n        final char[] curr = _currentSegment;\n        // Let's grow by 50% by default\n        final int len = curr.length;\n        // but above intended maximum, slow to increase by 25%\n        int newLen = (len == MAX_SEGMENT_LEN) ? len+1 : len + (len / 2);\n        return (_currentSegment = Arrays.copyOf(curr, newLen));\n    }\n", "diff": "diff --git a/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java b/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java\nindex f97a083f..cabc8f6f 100644\n--- a/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java\n@@ -577,16 +577,18 @@ public final class TextBuffer\n      * accommodate for more contiguous content. Usually only\n      * used when parsing tokens like names if even then.\n      */\n+\n     public char[] expandCurrentSegment()\n     {\n         final char[] curr = _currentSegment;\n         // Let's grow by 50% by default\n         final int len = curr.length;\n         // but above intended maximum, slow to increase by 25%\n-        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));\n+        int newLen = (len == MAX_SEGMENT_LEN) ? len+1 : len + (len / 2);\n         return (_currentSegment = Arrays.copyOf(curr, newLen));\n     }\n \n+\n     /**\n      * Method called to expand size of the current segment, to\n      * accommodate for more contiguous content. Usually only"}
{"project": "JacksonCore", "bug_id": "5", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": "        char c = str.charAt(i);", "diff": "diff --git a/src/main/java/com/fasterxml/jackson/core/JsonPointer.java b/src/main/java/com/fasterxml/jackson/core/JsonPointer.java\nindex d353b392..5259f3dd 100644\n--- a/src/main/java/com/fasterxml/jackson/core/JsonPointer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonPointer.java\n@@ -190,7 +190,7 @@ public class JsonPointer\n             return -1;\n         }\n         for (int i = 0; i < len; ++i) {\n-            char c = str.charAt(i++);\n+        char c = str.charAt(i);\n             if (c > '9' || c < '0') {\n                 return -1;\n             }"}
{"project": "JacksonCore", "bug_id": "6", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JacksonCore", "bug_id": "7", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JacksonCore", "bug_id": "8", "eval": "PASS", "attempt": 14, "mode": "SL", "patch": "        if (!_hasSegments && _currentSegment != null) return _currentSegment;", "diff": "diff --git a/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java b/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java\nindex e6f1cbc5..bb1dec80 100644\n--- a/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java\n@@ -295,6 +295,7 @@ public final class TextBuffer\n         return true;\n     }\n     \n+\n     public char[] getTextBuffer()\n     {\n         // Are we just using shared input buffer?\n@@ -304,7 +305,7 @@ public final class TextBuffer\n             return (_resultArray = _resultString.toCharArray());\n         }\n         // Nope; but does it fit in just one segment?\n-        if (!_hasSegments)  return _currentSegment;\n+        if (!_hasSegments && _currentSegment != null) return _currentSegment;\n         // Nope, need to have/create a non-segmented array and return it\n         return contentsAsArray();\n     }"}
{"project": "JacksonCore", "bug_id": "11", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JacksonCore", "bug_id": "15", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonCore", "bug_id": "17", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JacksonCore", "bug_id": "20", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JacksonCore", "bug_id": "21", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonCore", "bug_id": "23", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JacksonCore", "bug_id": "25", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": "            if (i < maxCode) {", "diff": "diff --git a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\nindex 2c1f5a23..f38e4aae 100644\n--- a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n@@ -1960,7 +1960,7 @@ public class ReaderBasedJsonParser // final in 2.3, earlier\n             }\n             char c = _inputBuffer[_inputPtr];\n             int i = (int) c;\n-            if (i <= maxCode) {\n+            if (i < maxCode) {\n                 if (codes[i] != 0) {\n                     break;\n                 }"}
{"project": "JacksonCore", "bug_id": "26", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "1", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "5", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "6", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "7", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "8", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "11", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "12", "eval": "PASS", "attempt": 4, "mode": "SH", "patch": "\n        return (_valueTypeDeserializer == null)\n                && (_keyDeserializer == null)\n                && (_valueDeserializer == null)\n", "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\nindex 4785e3ff4..300499b69 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n@@ -300,7 +300,11 @@ public class MapDeserializer\n         /* As per [databind#735], existence of value or key deserializer (only passed\n          * if annotated to use non-standard one) should also prevent caching.\n          */\n+\n         return (_valueTypeDeserializer == null)\n+                && (_keyDeserializer == null)\n+                && (_valueDeserializer == null)\n+\n                 && (_ignorableProperties == null);\n     }\n "}
{"project": "JacksonDatabind", "bug_id": "16", "eval": "PASS", "attempt": 2, "mode": "SL", "patch": "        return (previous != null) ? previous.equals(ann) : true;", "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap.java b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap.java\nindex f9cc5cb19..d3235de56 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap.java\n@@ -109,8 +109,6 @@ public final class AnnotationMap implements Annotations\n             _annotations = new HashMap<Class<? extends Annotation>,Annotation>();\n         }\n         Annotation previous = _annotations.put(ann.annotationType(), ann);\n-        return (previous != null) && previous.equals(ann);\n+        return (previous != null) ? previous.equals(ann) : true;\n     }\n }\n-\n-"}
{"project": "JacksonDatabind", "bug_id": "17", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "19", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "24", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "26", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "27", "eval": "PASS", "attempt": 5, "mode": "SL", "patch": "                if (ext.handlePropertyValue(p, ctxt, propName, null)) {", "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\nindex fc7961de5..23d989e83 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n@@ -791,7 +791,7 @@ public class BeanDeserializer\n                 // first: let's check to see if this might be part of value with external type id:\n                 // 11-Sep-2015, tatu: Important; do NOT pass buffer as last arg, but null,\n                 //   since it is not the bean\n-                if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n+                if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n                     ;\n                 } else {\n                     // Last creator property to set?"}
{"project": "JacksonDatabind", "bug_id": "28", "eval": "PASS", "attempt": 4, "mode": "SF", "patch": "\n        public ObjectNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n        {\n            if (p.getCurrentToken() == JsonToken.START_OBJECT) {\n                p.nextToken();\n                return deserializeObject(p, ctxt, ctxt.getNodeFactory());\n            }\n            // 23-Sep-2015, tatu: Ugh. We may also be given END_OBJECT (similar to FIELD_NAME),\n            //    if caller has advanced to the first token of Object, but for empty Object\n            if (p.getCurrentToken() == JsonToken.END_OBJECT || p.getCurrentToken() == JsonToken.FIELD_NAME) {\n                return deserializeObject(p, ctxt, ctxt.getNodeFactory());\n            }\n            throw ctxt.mappingException(ObjectNode.class);\n         }\n    }\n        \n    final static class ArrayDeserializer\n        extends BaseNodeDeserializer<ArrayNode>\n    {\n        private static final long serialVersionUID = 1L;\n\n        protected final static ArrayDeserializer _instance = new ArrayDeserializer();\n\n        protected ArrayDeserializer() { super(ArrayNode.class); }\n\n        public static ArrayDeserializer getInstance() { return _instance; }\n        \n        @Override\n        public ArrayNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n        {\n            if (p.isExpectedStartArrayToken()) {\n                return deserializeArray(p, ctxt, ctxt.getNodeFactory());\n            }\n            throw ctxt.mappingException(ArrayNode.class);\n        }\n", "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\nindex 264ed2051..f4573f857 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\n@@ -92,6 +92,7 @@ public class JsonNodeDeserializer\n         public static ObjectDeserializer getInstance() { return _instance; }\n         \n         @Override\n+\n         public ObjectNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n         {\n             if (p.getCurrentToken() == JsonToken.START_OBJECT) {\n@@ -100,7 +101,7 @@ public class JsonNodeDeserializer\n             }\n             // 23-Sep-2015, tatu: Ugh. We may also be given END_OBJECT (similar to FIELD_NAME),\n             //    if caller has advanced to the first token of Object, but for empty Object\n-            if (p.getCurrentToken() == JsonToken.FIELD_NAME) {\n+            if (p.getCurrentToken() == JsonToken.END_OBJECT || p.getCurrentToken() == JsonToken.FIELD_NAME) {\n                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());\n             }\n             throw ctxt.mappingException(ObjectNode.class);\n@@ -126,6 +127,7 @@ public class JsonNodeDeserializer\n             }\n             throw ctxt.mappingException(ArrayNode.class);\n         }\n+\n     }\n }\n "}
{"project": "JacksonDatabind", "bug_id": "34", "eval": "PASS", "attempt": 3, "mode": "SL", "patch": "                visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);", "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java\nindex 5624624af..eee90649f 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java\n@@ -78,11 +78,11 @@ public class NumberSerializer\n         } else {\n             Class<?> h = handledType();\n             if (h == BigDecimal.class) {\n-                visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n+                visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);\n             } else {\n                 // otherwise bit unclear what to call... but let's try:\n                 /*JsonNumberFormatVisitor v2 =*/ visitor.expectNumberFormat(typeHint);\n             }\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}
{"project": "JacksonDatabind", "bug_id": "35", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "37", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "39", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "42", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "45", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "46", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "47", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "49", "eval": "PASS", "attempt": 5, "mode": "SF", "patch": "\npublic Object generateId(Object forPojo) {\n    // 04-Jun-2016, tatu: As per [databind#1255], need to consider possibility of\n    //    id being generated for \"alwaysAsId\", but not being written as POJO; regardless,\n    //    need to use existing id if there is one:\n    if (this.id == null) {\n        this.id = generator.generateId(forPojo);\n    }\n    return this.id;\n}\n", "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/impl/WritableObjectId.java b/src/main/java/com/fasterxml/jackson/databind/ser/impl/WritableObjectId.java\nindex af141e12a..bfdf17ef6 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/WritableObjectId.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/WritableObjectId.java\n@@ -43,13 +43,18 @@ public final class WritableObjectId\n         return false;\n     }\n     \n-    public Object generateId(Object forPojo) {\n-        // 04-Jun-2016, tatu: As per [databind#1255], need to consider possibility of\n-        //    id being generated for \"alwaysAsId\", but not being written as POJO; regardless,\n-        //    need to use existing id if there is one:\n-            id = generator.generateId(forPojo);\n-        return id;\n+\n+\n+public Object generateId(Object forPojo) {\n+    // 04-Jun-2016, tatu: As per [databind#1255], need to consider possibility of\n+    //    id being generated for \"alwaysAsId\", but not being written as POJO; regardless,\n+    //    need to use existing id if there is one:\n+    if (this.id == null) {\n+        this.id = generator.generateId(forPojo);\n     }\n+    return this.id;\n+}\n+\n \n     /**\n      * Method called to output Object Id as specified."}
{"project": "JacksonDatabind", "bug_id": "51", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "54", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "57", "eval": "PASS", "attempt": 18, "mode": "SL", "patch": "        return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset, length), ", "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\nindex 10fddc4d6..132cd4e6c 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n@@ -1438,7 +1438,7 @@ public class ObjectReader\n         if (_dataFormatReaders != null) {\n             return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);\n         }\n-        return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n+        return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset, length), \n                 true));\n     }\n "}
{"project": "JacksonDatabind", "bug_id": "58", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "62", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "63", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "64", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "67", "eval": "PASS", "attempt": 4, "mode": "SF", "patch": "\npublic KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n        JavaType type) throws JsonMappingException {\n    final DeserializationConfig config = ctxt.getConfig();\n    KeyDeserializer deser = null;\n    if (_factoryConfig.hasKeyDeserializers()) {\n        BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n        for (KeyDeserializers d : _factoryConfig.keyDeserializers()) {\n            deser = d.findKeyDeserializer(type, config, beanDesc);\n            if (deser != null) {\n                break;\n            }\n        }\n    }\n    if (deser == null) {\n        if (type.isEnumType()) {\n            deser = _createEnumKeyDeserializer(ctxt, type);\n        } else {\n            deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);\n        }\n    }\n    if (deser != null) {\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deser = mod.modifyKeyDeserializer(config, type, deser);\n            }\n        }\n    }\n    return deser;\n}\n", "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\nindex 7d6a7bf5e..9e0de5ea4 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n@@ -1382,38 +1382,37 @@ public abstract class BasicDeserializerFactory\n      */\n     \n     @Override\n-    public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n-            JavaType type)\n-        throws JsonMappingException\n-    {\n-        final DeserializationConfig config = ctxt.getConfig();\n-        KeyDeserializer deser = null;\n-        if (_factoryConfig.hasKeyDeserializers()) {\n-            BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n-            for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {\n-                deser = d.findKeyDeserializer(type, config, beanDesc);\n-                if (deser != null) {\n-                    break;\n-                }\n+\n+public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n+        JavaType type) throws JsonMappingException {\n+    final DeserializationConfig config = ctxt.getConfig();\n+    KeyDeserializer deser = null;\n+    if (_factoryConfig.hasKeyDeserializers()) {\n+        BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n+        for (KeyDeserializers d : _factoryConfig.keyDeserializers()) {\n+            deser = d.findKeyDeserializer(type, config, beanDesc);\n+            if (deser != null) {\n+                break;\n             }\n         }\n-        // the only non-standard thing is this:\n-        if (deser == null) {\n-            if (type.isEnumType()) {\n-                return _createEnumKeyDeserializer(ctxt, type);\n-            }\n+    }\n+    if (deser == null) {\n+        if (type.isEnumType()) {\n+            deser = _createEnumKeyDeserializer(ctxt, type);\n+        } else {\n             deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);\n         }\n-        // and then post-processing\n-        if (deser != null) {\n-            if (_factoryConfig.hasDeserializerModifiers()) {\n-                for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n-                    deser = mod.modifyKeyDeserializer(config, type, deser);\n-                }\n+    }\n+    if (deser != null) {\n+        if (_factoryConfig.hasDeserializerModifiers()) {\n+            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n+                deser = mod.modifyKeyDeserializer(config, type, deser);\n             }\n         }\n-        return deser;\n     }\n+    return deser;\n+}\n+\n \n     private KeyDeserializer _createEnumKeyDeserializer(DeserializationContext ctxt,\n             JavaType type)"}
{"project": "JacksonDatabind", "bug_id": "70", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "74", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "76", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "82", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "83", "eval": "PASS", "attempt": 14, "mode": "SF", "patch": "\npublic T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n    // Retrieves the JSON value as a String\n    String text = p.getValueAsString();\n    if (text != null) {\n        if (text.length() == 0 || (text = text.trim()).length() == 0) {\n            // Returns null if the String representation is empty\n            return _deserializeFromEmptyString();\n        }\n        \n        Exception cause = null;\n        try {\n            // Attempts to deserialize the value from the String representation\n            return _deserialize(text, ctxt);\n        } catch (IllegalArgumentException iae) {\n            cause = iae;\n        } catch (MalformedURLException me) {\n            cause = me;\n        }\n        \n        String msg = \"not a valid textual representation\";\n        if (cause != null) {\n            String m2 = cause.getMessage();\n            if (m2 != null) {\n                msg = msg + \", problem: \"+m2;\n            }\n        }\n        \n        // Creates a new JsonMappingException with the specified error message\n        JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);\n        if (cause != null) {\n            e.initCause(cause);\n        }\n        throw e;\n    }\n    \n    JsonToken t = p.getCurrentToken();\n    // If the current token is an array, deserialize from the array\n    if (t == JsonToken.START_ARRAY) {\n        return _deserializeFromArray(p, ctxt);\n    }\n    \n    // If the current token is an embedded object, perform special handling\n    if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {\n        Object ob = p.getEmbeddedObject();\n        // If the embedded object is null, return null\n        if (ob == null) {\n            return null;\n        }\n        \n        // If the class of the embedded object matches the target type, return it as the target type\n        if (_valueClass.isAssignableFrom(ob.getClass())) {\n            return (T) ob;\n        }\n        \n        // Otherwise, handle the embedded object\n        return _deserializeEmbedded(ob, ctxt);\n    }\n    \n    // If no other cases match, handle the unexpected token\n    return (T) ctxt.handleUnexpectedToken(_valueClass, p);\n}\n", "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\nindex 4f4eb672a..2faed3dc1 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\n@@ -102,61 +102,69 @@ public abstract class FromStringDeserializer<T> extends StdScalarDeserializer<T>\n     \n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n-    {\n-        // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:\n-        String text = p.getValueAsString();\n-        if (text != null) { // has String representation\n-            if (text.length() == 0 || (text = text.trim()).length() == 0) {\n-                // 04-Feb-2013, tatu: Usually should become null; but not always\n-                return _deserializeFromEmptyString();\n-            }\n-            Exception cause = null;\n-            try {\n-                // 19-May-2017, tatu: Used to require non-null result (assuming `null`\n-                //    indicated error; but that seems wrong. Should be able to return\n-                //    `null` as value.\n-                if (_deserialize(text, ctxt) != null) {\n-                return _deserialize(text, ctxt);\n-                }\n-            } catch (IllegalArgumentException iae) {\n-                cause = iae;\n-            } catch (MalformedURLException me) {\n-                cause = me;\n-            }\n-            String msg = \"not a valid textual representation\";\n-            if (cause != null) {\n-                String m2 = cause.getMessage();\n-                if (m2 != null) {\n-                    msg = msg + \", problem: \"+m2;\n-                }\n-            }\n-            // 05-May-2016, tatu: Unlike most usage, this seems legit, so...\n-            JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);\n-            if (cause != null) {\n-                e.initCause(cause);\n-            }\n-            throw e;\n-            // nothing to do here, yet? We'll fail anyway\n+\n+public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n+    // Retrieves the JSON value as a String\n+    String text = p.getValueAsString();\n+    if (text != null) {\n+        if (text.length() == 0 || (text = text.trim()).length() == 0) {\n+            // Returns null if the String representation is empty\n+            return _deserializeFromEmptyString();\n         }\n-        JsonToken t = p.getCurrentToken();\n-        // [databind#381]\n-        if (t == JsonToken.START_ARRAY) {\n-            return _deserializeFromArray(p, ctxt);\n+        \n+        Exception cause = null;\n+        try {\n+            // Attempts to deserialize the value from the String representation\n+            return _deserialize(text, ctxt);\n+        } catch (IllegalArgumentException iae) {\n+            cause = iae;\n+        } catch (MalformedURLException me) {\n+            cause = me;\n         }\n-        if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {\n-            // Trivial cases; null to null, instance of type itself returned as is\n-            Object ob = p.getEmbeddedObject();\n-            if (ob == null) {\n-                return null;\n-            }\n-            if (_valueClass.isAssignableFrom(ob.getClass())) {\n-                return (T) ob;\n+        \n+        String msg = \"not a valid textual representation\";\n+        if (cause != null) {\n+            String m2 = cause.getMessage();\n+            if (m2 != null) {\n+                msg = msg + \", problem: \"+m2;\n             }\n-            return _deserializeEmbedded(ob, ctxt);\n         }\n-        return (T) ctxt.handleUnexpectedToken(_valueClass, p);\n+        \n+        // Creates a new JsonMappingException with the specified error message\n+        JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);\n+        if (cause != null) {\n+            e.initCause(cause);\n+        }\n+        throw e;\n     }\n+    \n+    JsonToken t = p.getCurrentToken();\n+    // If the current token is an array, deserialize from the array\n+    if (t == JsonToken.START_ARRAY) {\n+        return _deserializeFromArray(p, ctxt);\n+    }\n+    \n+    // If the current token is an embedded object, perform special handling\n+    if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {\n+        Object ob = p.getEmbeddedObject();\n+        // If the embedded object is null, return null\n+        if (ob == null) {\n+            return null;\n+        }\n+        \n+        // If the class of the embedded object matches the target type, return it as the target type\n+        if (_valueClass.isAssignableFrom(ob.getClass())) {\n+            return (T) ob;\n+        }\n+        \n+        // Otherwise, handle the embedded object\n+        return _deserializeEmbedded(ob, ctxt);\n+    }\n+    \n+    // If no other cases match, handle the unexpected token\n+    return (T) ctxt.handleUnexpectedToken(_valueClass, p);\n+}\n+\n         \n     protected abstract T _deserialize(String value, DeserializationContext ctxt) throws IOException;\n "}
{"project": "JacksonDatabind", "bug_id": "85", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "88", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "89", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "91", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "92", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "96", "eval": "PASS", "attempt": 9, "mode": "SL", "patch": "            paramName = candidate.paramName(0);", "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\nindex 7057c5427..042cf0afd 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n@@ -732,7 +732,7 @@ nonAnnotatedParamIndex, ctor);\n             // 25-May-2018, tatu: as per [databind#2051], looks like we have to get\n             //    not implicit name, but name with possible strategy-based-rename\n //            paramName = candidate.findImplicitParamName(0);\n-            paramName = candidate.findImplicitParamName(0);\n+            paramName = candidate.paramName(0);\n             useProps = (paramName != null) && paramDef.couldSerialize();\n         }\n         if (useProps) {"}
{"project": "JacksonDatabind", "bug_id": "97", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "99", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "100", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "101", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "102", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "107", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "112", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonXml", "bug_id": "1", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonXml", "bug_id": "3", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonXml", "bug_id": "4", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonXml", "bug_id": "5", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "1", "eval": "PASS", "attempt": 3, "mode": "SH", "patch": "\n            body().prependChild(node);\n", "diff": "diff --git a/src/main/java/org/jsoup/nodes/Document.java b/src/main/java/org/jsoup/nodes/Document.java\nindex bc0f650..f3378f3 100644\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n@@ -122,8 +122,9 @@ public class Document extends Element {\n \n         for (Node node: toMove) {\n             element.removeChild(node);\n-            body().appendChild(new TextNode(\" \", \"\"));\n-            body().appendChild(node);\n+\n+            body().prependChild(node);\n+\n         }\n     }\n \n@@ -148,4 +149,3 @@ public class Document extends Element {\n         return \"#document\";\n     }\n }\n-"}
{"project": "Jsoup", "bug_id": "2", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "4", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "5", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "6", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "10", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "13", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "15", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "19", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "20", "eval": "PASS", "attempt": 2, "mode": "SH", "patch": "\n    if (docData.startsWith(\"\\uFEFF\")) {\n        docData = docData.substring(1);\n    }\n", "diff": "diff --git a/src/main/java/org/jsoup/helper/DataUtil.java b/src/main/java/org/jsoup/helper/DataUtil.java\nindex e5b044d..13f94fc 100644\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n@@ -96,6 +96,11 @@ public class DataUtil {\n             // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n             // into head mode\n \n+    if (docData.startsWith(\"\\uFEFF\")) {\n+        docData = docData.substring(1);\n+    }\n+\n+\n             doc = parser.parseInput(docData, baseUri);\n             doc.outputSettings().charset(charsetName);\n         }"}
{"project": "Jsoup", "bug_id": "24", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "25", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": "    private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\", \"textarea\"};", "diff": "diff --git a/src/main/java/org/jsoup/parser/Tag.java b/src/main/java/org/jsoup/parser/Tag.java\nindex 40b7557..caebf4e 100644\n--- a/src/main/java/org/jsoup/parser/Tag.java\n+++ b/src/main/java/org/jsoup/parser/Tag.java\n@@ -215,7 +215,7 @@ public class Tag {\n     private static final String[] formatAsInlineTags = {\n             \"title\", \"a\", \"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"pre\", \"address\", \"li\", \"th\", \"td\", \"script\", \"style\"\n     };\n-    private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"};\n+    private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\", \"textarea\"};\n \n     static {\n         // creates"}
{"project": "Jsoup", "bug_id": "26", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "27", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "32", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "33", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "34", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "35", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "37", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "38", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "39", "eval": "PASS", "attempt": 15, "mode": "SL", "patch": "doc = parser.parseInput(docData, baseUri);", "diff": "diff --git a/src/main/java/org/jsoup/helper/DataUtil.java b/src/main/java/org/jsoup/helper/DataUtil.java\nindex d43bfe4..153ce49 100644\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n@@ -116,6 +116,7 @@ public class DataUtil {\n             docData = Charset.forName(defaultCharset).decode(byteData).toString();\n             docData = docData.substring(1);\n             charsetName = defaultCharset;\n+doc = parser.parseInput(docData, baseUri);\n         }\n         if (doc == null) {\n             doc = parser.parseInput(docData, baseUri);"}
{"project": "Jsoup", "bug_id": "40", "eval": "PASS", "attempt": 11, "mode": "SL", "patch": "        attr(\"name\", name);", "diff": "diff --git a/src/main/java/org/jsoup/nodes/DocumentType.java b/src/main/java/org/jsoup/nodes/DocumentType.java\nindex 4b4a5e9..68a9312 100644\n--- a/src/main/java/org/jsoup/nodes/DocumentType.java\n+++ b/src/main/java/org/jsoup/nodes/DocumentType.java\n@@ -19,7 +19,7 @@ public class DocumentType extends Node {\n     public DocumentType(String name, String publicId, String systemId, String baseUri) {\n         super(baseUri);\n \n-        Validate.notEmpty(name);\n+        attr(\"name\", name);\n         attr(\"name\", name);\n         attr(\"publicId\", publicId);\n         attr(\"systemId\", systemId);"}
{"project": "Jsoup", "bug_id": "41", "eval": "PASS", "attempt": 4, "mode": "SL", "patch": "        return this == o || (o instanceof Element && super.equals(o) && element.equals((Element) o));", "diff": "diff --git a/src/main/java/org/jsoup/nodes/Element.java b/src/main/java/org/jsoup/nodes/Element.java\nindex cd2e86a..8b131e7 100644\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n@@ -1172,7 +1172,7 @@ public class Element extends Node {\n \n         Element element = (Element) o;\n \n-        return this == o;\n+        return this == o || (o instanceof Element && super.equals(o) && element.equals((Element) o));\n     }\n \n     @Override"}
{"project": "Jsoup", "bug_id": "42", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "43", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "45", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": "            } else if (\"td\".equals(name) || \"th\".equals(name) && !last) {", "diff": "diff --git a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\nindex 4a58fdf..b662537 100644\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n@@ -391,7 +391,7 @@ public class HtmlTreeBuilder extends TreeBuilder {\n             if (\"select\".equals(name)) {\n                 transition(HtmlTreeBuilderState.InSelect);\n                 break; // frag\n-            } else if ((\"td\".equals(name) || \"td\".equals(name) && !last)) {\n+            } else if (\"td\".equals(name) || \"th\".equals(name) && !last) {\n                 transition(HtmlTreeBuilderState.InCell);\n                 break;\n             } else if (\"tr\".equals(name)) {"}
{"project": "Jsoup", "bug_id": "46", "eval": "PASS", "attempt": 3, "mode": "SL", "patch": "                            accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');", "diff": "diff --git a/src/main/java/org/jsoup/nodes/Entities.java b/src/main/java/org/jsoup/nodes/Entities.java\nindex 6ccb84e..3adc325 100644\n--- a/src/main/java/org/jsoup/nodes/Entities.java\n+++ b/src/main/java/org/jsoup/nodes/Entities.java\n@@ -115,7 +115,7 @@ public class Entities {\n                         if (escapeMode != EscapeMode.xhtml)\n                             accum.append(\"&nbsp;\");\n                         else\n-                            accum.append(c);\n+                            accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n                         break;\n                     case '<':\n                         if (!inAttribute)"}
{"project": "Jsoup", "bug_id": "47", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "48", "eval": "PASS", "attempt": 2, "mode": "SF", "patch": "\n        void processResponseHeaders(Map<String, List<String>> resHeaders) {\n            for (Map.Entry<String, List<String>> entry : resHeaders.entrySet()) {\n                String name = entry.getKey();\n                if (name == null)\n                    continue; // http/1.1 line\n\n                List<String> values = entry.getValue();\n                if (name.equalsIgnoreCase(\"Set-Cookie\")) {\n                    for (String value : values) {\n                        if (value == null)\n                            continue;\n                        TokenQueue cd = new TokenQueue(value);\n                        String cookieName = cd.chompTo(\"=\").trim();\n                        String cookieVal = cd.consumeTo(\";\").trim();\n                        // ignores path, date, domain, validateTLSCertificates et al. req'd?\n                        // name not blank, value not null\n                        if (cookieName.length() > 0)\n                            cookie(cookieName, cookieVal);\n                    }\n                } else { // combine same header names with comma: http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\n                    if (!values.isEmpty()) {\n                        String combinedValue = String.join(\", \", values);\n                        header(name, combinedValue);\n                    }\n                }\n            }\n        }\n", "diff": "diff --git a/src/main/java/org/jsoup/helper/HttpConnection.java b/src/main/java/org/jsoup/helper/HttpConnection.java\nindex f8fd9dd..e7e509a 100644\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n@@ -750,6 +750,7 @@ public class HttpConnection implements Connection {\n             return headers;\n         }\n \n+\n         void processResponseHeaders(Map<String, List<String>> resHeaders) {\n             for (Map.Entry<String, List<String>> entry : resHeaders.entrySet()) {\n                 String name = entry.getKey();\n@@ -770,12 +771,15 @@ public class HttpConnection implements Connection {\n                             cookie(cookieName, cookieVal);\n                     }\n                 } else { // combine same header names with comma: http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\n-                    if (!values.isEmpty())\n-                        header(name, values.get(0));\n+                    if (!values.isEmpty()) {\n+                        String combinedValue = String.join(\", \", values);\n+                        header(name, combinedValue);\n+                    }\n                 }\n             }\n         }\n \n+\n         private static String setOutputContentType(final Connection.Request req) {\n             // multipart mode, for files. add the header if we see something with an inputstream, and return a non-null boundary\n             boolean needsMulti = false;"}
{"project": "Jsoup", "bug_id": "49", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "50", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "51", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "53", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "54", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "55", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "57", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": "                it.remove();", "diff": "diff --git a/src/main/java/org/jsoup/nodes/Attributes.java b/src/main/java/org/jsoup/nodes/Attributes.java\nindex 49ff25d..8fdb654 100644\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n@@ -122,7 +122,7 @@ public class Attributes implements Iterable<Attribute>, Cloneable {\n         for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) {\n             String attrKey = it.next();\n             if (attrKey.equalsIgnoreCase(key))\n-                attributes.remove(attrKey);\n+                it.remove();\n         }\n     }\n "}
{"project": "Jsoup", "bug_id": "59", "eval": "PASS", "attempt": 3, "mode": "SF", "patch": "\n        final void newAttribute() {\n            if (attributes == null)\n                attributes = new Attributes();\n\n            if (pendingAttributeName != null && !pendingAttributeName.trim().isEmpty()) {\n                pendingAttributeName = pendingAttributeName.trim();\n                Attribute attribute;\n                if (hasPendingAttributeValue) {\n                    attribute = pendingAttributeValue.length() > 0 ? \n                        new Attribute(pendingAttributeName, pendingAttributeValue.toString()) : \n                        new Attribute(pendingAttributeName, pendingAttributeValueS);\n                } else if (hasEmptyAttributeValue) {\n                    attribute = new Attribute(pendingAttributeName, \"\");\n                } else {\n                    attribute = new BooleanAttribute(pendingAttributeName);\n                }\n                attributes.put(attribute);\n            }\n            pendingAttributeName = null;\n            hasEmptyAttributeValue = false;\n            hasPendingAttributeValue = false;\n            reset(pendingAttributeValue);\n            pendingAttributeValueS = null;\n        }\n", "diff": "diff --git a/src/main/java/org/jsoup/parser/Token.java b/src/main/java/org/jsoup/parser/Token.java\nindex 7dcfa2b..8dc9e1f 100644\n--- a/src/main/java/org/jsoup/parser/Token.java\n+++ b/src/main/java/org/jsoup/parser/Token.java\n@@ -97,22 +97,24 @@ abstract class Token {\n             return this;\n         }\n \n+\n         final void newAttribute() {\n             if (attributes == null)\n                 attributes = new Attributes();\n \n-            if (pendingAttributeName != null) {\n-                // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n+            if (pendingAttributeName != null && !pendingAttributeName.trim().isEmpty()) {\n                 pendingAttributeName = pendingAttributeName.trim();\n-                    Attribute attribute;\n-                    if (hasPendingAttributeValue)\n-                        attribute = new Attribute(pendingAttributeName,\n-                            pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS);\n-                    else if (hasEmptyAttributeValue)\n-                        attribute = new Attribute(pendingAttributeName, \"\");\n-                    else\n-                        attribute = new BooleanAttribute(pendingAttributeName);\n-                    attributes.put(attribute);\n+                Attribute attribute;\n+                if (hasPendingAttributeValue) {\n+                    attribute = pendingAttributeValue.length() > 0 ? \n+                        new Attribute(pendingAttributeName, pendingAttributeValue.toString()) : \n+                        new Attribute(pendingAttributeName, pendingAttributeValueS);\n+                } else if (hasEmptyAttributeValue) {\n+                    attribute = new Attribute(pendingAttributeName, \"\");\n+                } else {\n+                    attribute = new BooleanAttribute(pendingAttributeName);\n+                }\n+                attributes.put(attribute);\n             }\n             pendingAttributeName = null;\n             hasEmptyAttributeValue = false;\n@@ -121,6 +123,7 @@ abstract class Token {\n             pendingAttributeValueS = null;\n         }\n \n+\n         final void finaliseTag() {\n             // finalises for emit\n             if (pendingAttributeName != null) {"}
{"project": "Jsoup", "bug_id": "61", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "62", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "64", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "66", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "68", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "70", "eval": "PASS", "attempt": 1, "mode": "SF", "patch": "\nstatic boolean preserveWhitespace(Node node) {\n    // looks only at this element and five levels up, to prevent recursion & needless stack searches\n    if (node instanceof Element) {\n        Element el = (Element) node;\n        if (el.tag.preserveWhitespace())\n            return true;\n        else {\n            Node parent = el.parent();\n            for (int i = 0; i < 5 && parent != null; i++) {\n                if (parent instanceof Element && ((Element) parent).tag.preserveWhitespace()) {\n                    return true;\n                }\n                parent = parent.parent();\n            }\n        }\n    }\n    return false;\n}\n", "diff": "diff --git a/src/main/java/org/jsoup/nodes/Element.java b/src/main/java/org/jsoup/nodes/Element.java\nindex faca4c8..4134a3d 100644\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n@@ -1084,17 +1084,26 @@ public class Element extends Node {\n             accum.append(\" \");\n     }\n \n-    static boolean preserveWhitespace(Node node) {\n-        // looks only at this element and five levels up, to prevent recursion & needless stack searches\n-        if (node != null && node instanceof Element) {\n-            Element el = (Element) node;\n-                if (el.tag.preserveWhitespace())\n+\n+static boolean preserveWhitespace(Node node) {\n+    // looks only at this element and five levels up, to prevent recursion & needless stack searches\n+    if (node instanceof Element) {\n+        Element el = (Element) node;\n+        if (el.tag.preserveWhitespace())\n+            return true;\n+        else {\n+            Node parent = el.parent();\n+            for (int i = 0; i < 5 && parent != null; i++) {\n+                if (parent instanceof Element && ((Element) parent).tag.preserveWhitespace()) {\n                     return true;\n-                else\n-                    return el.parent() != null && el.parent().tag.preserveWhitespace();\n+                }\n+                parent = parent.parent();\n+            }\n         }\n-        return false;\n     }\n+    return false;\n+}\n+\n \n     /**\n      * Set the text of this element. Any existing contents (text or elements) will be cleared"}
{"project": "Jsoup", "bug_id": "72", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "75", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "76", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "77", "eval": "PASS", "attempt": 16, "mode": "SL", "patch": "        String elName = endTag.name().toLowerCase();", "diff": "diff --git a/src/main/java/org/jsoup/parser/XmlTreeBuilder.java b/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\nindex 65d3045..3c4e96c 100644\n--- a/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\n@@ -114,7 +114,7 @@ public class XmlTreeBuilder extends TreeBuilder {\n      * @param endTag tag to close\n      */\n     private void popStackToClose(Token.EndTag endTag) {\n-        String elName = endTag.name();\n+        String elName = endTag.name().toLowerCase();\n         Element firstFound = null;\n \n         for (int pos = stack.size() -1; pos >= 0; pos--) {"}
{"project": "Jsoup", "bug_id": "80", "eval": "PASS", "attempt": 8, "mode": "SF", "patch": "\nvoid insert(Token.Comment commentToken) {\n    Comment comment = new Comment(commentToken.getData());\n    Node insert = comment;\n    if (commentToken.bogus) {\n        String data = comment.getData();\n        if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n            Document doc;\n            try {\n                doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri, Parser.xmlParser());\n                Element el = doc.child(0);\n                insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith(\"!\"));\n                insert.attributes().addAll(el.attributes());\n            } catch (IndexOutOfBoundsException e) {\n                // Handle the exception appropriately\n            }\n        }\n    }\n    insertNode(insert);\n}\n", "diff": "diff --git a/src/main/java/org/jsoup/parser/XmlTreeBuilder.java b/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\nindex 75374e4..f0578b5 100644\n--- a/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\n@@ -80,21 +80,27 @@ public class XmlTreeBuilder extends TreeBuilder {\n         return el;\n     }\n \n-    void insert(Token.Comment commentToken) {\n-        Comment comment = new Comment(commentToken.getData());\n-        Node insert = comment;\n-        if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n-            // so we do a bit of a hack and parse the data as an element to pull the attributes out\n-            String data = comment.getData();\n-            if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n-                Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri, Parser.xmlParser());\n-                    Element el = doc.child(0);\n-                    insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith(\"!\"));\n-                    insert.attributes().addAll(el.attributes());\n+\n+void insert(Token.Comment commentToken) {\n+    Comment comment = new Comment(commentToken.getData());\n+    Node insert = comment;\n+    if (commentToken.bogus) {\n+        String data = comment.getData();\n+        if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n+            Document doc;\n+            try {\n+                doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri, Parser.xmlParser());\n+                Element el = doc.child(0);\n+                insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith(\"!\"));\n+                insert.attributes().addAll(el.attributes());\n+            } catch (IndexOutOfBoundsException e) {\n+                // Handle the exception appropriately\n             }\n         }\n-        insertNode(insert);\n     }\n+    insertNode(insert);\n+}\n+\n \n     void insert(Token.Character token) {\n         final String data = token.getData();"}
{"project": "Jsoup", "bug_id": "82", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "84", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "85", "eval": "PASS", "attempt": 5, "mode": "SF", "patch": "\npublic Attribute(String key, String val, Attributes parent) {\n    Validate.notNull(key);\n    this.key = key.trim();\n    if(key.trim().isEmpty()){\n        throw new IllegalArgumentException(\"Key cannot be empty\");\n    }\n    this.val = val;\n    this.parent = parent;\n}\n", "diff": "diff --git a/src/main/java/org/jsoup/nodes/Attribute.java b/src/main/java/org/jsoup/nodes/Attribute.java\nindex 612fdeb..67c7bdf 100644\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n@@ -39,13 +39,17 @@ public class Attribute implements Map.Entry<String, String>, Cloneable  {\n      * @param val attribute value\n      * @param parent the containing Attributes (this Attribute is not automatically added to said Attributes)\n      * @see #createFromEncoded*/\n-    public Attribute(String key, String val, Attributes parent) {\n-        Validate.notNull(key);\n-        this.key = key.trim();\n-        Validate.notEmpty(key); // trimming could potentially make empty, so validate here\n-        this.val = val;\n-        this.parent = parent;\n+\n+public Attribute(String key, String val, Attributes parent) {\n+    Validate.notNull(key);\n+    this.key = key.trim();\n+    if(key.trim().isEmpty()){\n+        throw new IllegalArgumentException(\"Key cannot be empty\");\n     }\n+    this.val = val;\n+    this.parent = parent;\n+}\n+\n \n     /**\n      Get the attribute key."}
{"project": "Jsoup", "bug_id": "86", "eval": "PASS", "attempt": 3, "mode": "SL", "patch": "        if (!doc.children().isEmpty()) {", "diff": "diff --git a/src/main/java/org/jsoup/nodes/Comment.java b/src/main/java/org/jsoup/nodes/Comment.java\nindex d0669fe..4107be3 100644\n--- a/src/main/java/org/jsoup/nodes/Comment.java\n+++ b/src/main/java/org/jsoup/nodes/Comment.java\n@@ -75,7 +75,7 @@ public class Comment extends LeafNode {\n         String data = getData();\n         Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser());\n         XmlDeclaration decl = null;\n-        if (doc.childNodeSize() > 0) {\n+        if (!doc.children().isEmpty()) {\n             Element el = doc.child(0);\n             decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\"));\n             decl.attributes().addAll(el.attributes());"}
{"project": "Jsoup", "bug_id": "88", "eval": "PASS", "attempt": 20, "mode": "SL", "patch": "        return val == null ? \"\" : val;", "diff": "diff --git a/src/main/java/org/jsoup/nodes/Attribute.java b/src/main/java/org/jsoup/nodes/Attribute.java\nindex e321b6a..fb305bb 100644\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n@@ -77,7 +77,7 @@ public class Attribute implements Map.Entry<String, String>, Cloneable  {\n      @return the attribute value\n      */\n     public String getValue() {\n-        return val;\n+        return val == null ? \"\" : val;\n     }\n \n     /**"}
{"project": "Jsoup", "bug_id": "89", "eval": "PASS", "attempt": 11, "mode": "SF", "patch": "\n    public String setValue(String val) {\n        String oldVal = this.val;\n        if (parent != null) {\n            int i = parent.indexOfKey(this.key);\n            if (i != Attributes.NotFound)\n                parent.vals[i] = val;\n        }\n        this.val = val;\n        return oldVal;\n    }\n", "diff": "diff --git a/src/main/java/org/jsoup/nodes/Attribute.java b/src/main/java/org/jsoup/nodes/Attribute.java\nindex 4ff695d..019208e 100644\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n@@ -84,17 +84,19 @@ public class Attribute implements Map.Entry<String, String>, Cloneable  {\n      Set the attribute value.\n      @param val the new attribute value; must not be null\n      */\n+\n     public String setValue(String val) {\n-        String oldVal = parent.get(this.key);\n+        String oldVal = this.val;\n         if (parent != null) {\n             int i = parent.indexOfKey(this.key);\n             if (i != Attributes.NotFound)\n                 parent.vals[i] = val;\n         }\n         this.val = val;\n-        return Attributes.checkNotNull(oldVal);\n+        return oldVal;\n     }\n \n+\n     /**\n      Get the HTML representation of this attribute; e.g. {@code href=\"index.html\"}.\n      @return HTML"}
{"project": "Jsoup", "bug_id": "90", "eval": "PASS", "attempt": 1, "mode": "SH", "patch": "\n\n                if ((o & 0xF8) == 0xF0) { // 4 byte sequence\n                    end = i + 4;\n                } else {\n                    return false;\n                }\n\n                while (i + 1 < end) {\n                    i++;\n                    o = input[i];\n                    if ((o & 0xC0) != 0x80) {\n                        return false;\n                    }\n                }\n\n", "diff": "diff --git a/src/main/java/org/jsoup/helper/HttpConnection.java b/src/main/java/org/jsoup/helper/HttpConnection.java\nindex a941e48..0e5c1a9 100644\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n@@ -422,6 +422,23 @@ public class HttpConnection implements Connection {\n                 }\n \n \n+\n+                if ((o & 0xF8) == 0xF0) { // 4 byte sequence\n+                    end = i + 4;\n+                } else {\n+                    return false;\n+                }\n+\n+                while (i + 1 < end) {\n+                    i++;\n+                    o = input[i];\n+                    if ((o & 0xC0) != 0x80) {\n+                        return false;\n+                    }\n+                }\n+\n+\n+\n                 while (i < end) {\n                     i++;\n                     o = input[i];"}
{"project": "Jsoup", "bug_id": "93", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JxPath", "bug_id": "5", "eval": "PASS", "attempt": 1, "mode": "SH", "patch": "\nint r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n        if (p1.parent == null || p2.parent == null) {\n            if(p1.parent == null && p2.parent != null) {\n                return 1;\n            }\n            if(p1.parent != null && p2.parent == null) {\n                return -1;\n            }\n            return 0;\n        }\n        if (r != 0) {\n            return r;\n        }\n        return p1.parent.compareChildNodePointers(p1, p2);\n", "diff": "diff --git a/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java b/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\nindex 6ff8d5f..47601f7 100644\n--- a/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n@@ -662,9 +662,22 @@ public abstract class NodePointer implements Pointer {\n         }\n \n         if (depth1 == 1) {\n-            throw new JXPathException(\n-                    \"Cannot compare pointers that do not belong to the same tree: '\"\n-                            + p1 + \"' and '\" + p2 + \"'\");\n+\n+int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n+        if (p1.parent == null || p2.parent == null) {\n+            if(p1.parent == null && p2.parent != null) {\n+                return 1;\n+            }\n+            if(p1.parent != null && p2.parent == null) {\n+                return -1;\n+            }\n+            return 0;\n+        }\n+        if (r != 0) {\n+            return r;\n+        }\n+        return p1.parent.compareChildNodePointers(p1, p2);\n+\n         }\n         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n         if (r != 0) {\n@@ -703,4 +716,4 @@ public abstract class NodePointer implements Pointer {\n             printDeep(pointer.getImmediateParentPointer(), indent + \"  \");\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}
{"project": "JxPath", "bug_id": "6", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JxPath", "bug_id": "8", "eval": "PASS", "attempt": 2, "mode": "SF", "patch": "\n    private boolean compute(Object left, Object right) {\n        left = reduce(left);\n        right = reduce(right);\n\n        if (left instanceof InitialContext) {\n            ((InitialContext) left).reset();\n        }\n        if (right instanceof InitialContext) {\n            ((InitialContext) right).reset();\n        }\n        if (left instanceof Iterator && right instanceof Iterator) {\n            return findMatch((Iterator) left, (Iterator) right);\n        }\n        if (left instanceof Iterator) {\n            return containsMatch((Iterator) left, right);\n        }\n        if (right instanceof Iterator) {\n            return containsMatch((Iterator) right, left);\n        }\n        double ld = InfoSetUtil.doubleValue(left);\n        double rd = InfoSetUtil.doubleValue(right);\n        if(Double.isNaN(ld) || Double.isNaN(rd)) {\n            return false;\n        }\n        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);\n    }\n", "diff": "diff --git a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java\nindex c6e0041..739d844 100644\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java\n@@ -53,6 +53,7 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {\n \n     protected abstract boolean evaluateCompare(int compare);\n \n+\n     private boolean compute(Object left, Object right) {\n         left = reduce(left);\n         right = reduce(right);\n@@ -74,9 +75,13 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {\n         }\n         double ld = InfoSetUtil.doubleValue(left);\n         double rd = InfoSetUtil.doubleValue(right);\n+        if(Double.isNaN(ld) || Double.isNaN(rd)) {\n+            return false;\n+        }\n         return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);\n     }\n \n+\n     private Object reduce(Object o) {\n         if (o instanceof SelfContext) {\n             o = ((EvalContext) o).getSingleNodePointer();"}
{"project": "JxPath", "bug_id": "10", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JxPath", "bug_id": "12", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JxPath", "bug_id": "21", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JxPath", "bug_id": "22", "eval": "PASS", "attempt": 3, "mode": "SF", "patch": "\npublic static String getNamespaceURI(Node node) {\n    if (node instanceof Document) {\n        node = ((Document) node).getDocumentElement();\n    }\n\n    Element element = (Element) node;\n\n    String uri = element.getNamespaceURI();\n    if (uri == null) {\n        String prefix = getPrefix(node);\n        String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;\n\n        Node aNode = node;\n        while (aNode != null) {\n            if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n                Attr attr = ((Element) aNode).getAttributeNodeNS(null, qname);\n                if (attr != null) {\n                    return attr.getValue();\n                }\n            }\n            aNode = aNode.getParentNode();\n        }\n        return null;\n    }\n    return uri;\n}\n", "diff": "diff --git a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\nindex f8e3b1a..591b248 100644\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n@@ -669,32 +669,34 @@ public class DOMNodePointer extends NodePointer {\n      * @param node Node to check\n      * @return String ns uri\n      */\n-    public static String getNamespaceURI(Node node) {\n-        if (node instanceof Document) {\n-            node = ((Document) node).getDocumentElement();\n-        }\n \n-        Element element = (Element) node;\n+public static String getNamespaceURI(Node node) {\n+    if (node instanceof Document) {\n+        node = ((Document) node).getDocumentElement();\n+    }\n \n-        String uri = element.getNamespaceURI();\n-        if (uri == null) {\n-            String prefix = getPrefix(node);\n-            String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;\n-    \n-            Node aNode = node;\n-            while (aNode != null) {\n-                if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n-                    Attr attr = ((Element) aNode).getAttributeNode(qname);\n-                    if (attr != null) {\n-                        return attr.getValue();\n-                    }\n+    Element element = (Element) node;\n+\n+    String uri = element.getNamespaceURI();\n+    if (uri == null) {\n+        String prefix = getPrefix(node);\n+        String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;\n+\n+        Node aNode = node;\n+        while (aNode != null) {\n+            if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n+                Attr attr = ((Element) aNode).getAttributeNodeNS(null, qname);\n+                if (attr != null) {\n+                    return attr.getValue();\n                 }\n-                aNode = aNode.getParentNode();\n             }\n-            return null;\n+            aNode = aNode.getParentNode();\n         }\n-        return uri;\n+        return null;\n     }\n+    return uri;\n+}\n+\n \n     public Object getValue() {\n         if (node.getNodeType() == Node.COMMENT_NODE) {"}
{"project": "Lang", "bug_id": "1", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "3", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "5", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "6", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "9", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "10", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "11", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "12", "eval": "PASS", "attempt": 11, "mode": "SF", "patch": "\npublic static String random(int count, int start, int end, boolean letters, boolean numbers,\n                            char[] chars, Random random) {\n    if (count == 0) {\n        return \"\";\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n\n    if (start == 0 && end == 0) {\n        if (!letters && !numbers) {\n            end = Integer.MAX_VALUE;\n        } else {\n            end = 'z' + 1;\n            start = ' ';                \n        }\n    }\n\n    char[] buffer = new char[count];\n    int gap = end - start;\n\n    while (count-- != 0) {\n        char ch;\n        if (chars == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            ch = chars[random.nextInt(chars.length)];\n        }\n        if (letters && Character.isLetter(ch)\n                || numbers && Character.isDigit(ch)\n                || !letters && !numbers) {\n            if(ch >= 56320 && ch <= 57343) {\n                if(count == 0) {\n                    count++;\n                } else {\n                    // low surrogate, insert high surrogate after putting it in\n                    buffer[count] = ch;\n                    count--;\n                    buffer[count] = (char) (55296 + random.nextInt(128));\n                }\n            } else if(ch >= 55296 && ch <= 56191) {\n                if(count == 0) {\n                    count++;\n                } else {\n                    // high surrogate, insert low surrogate before putting it in\n                    buffer[count] = (char) (56320 + random.nextInt(128));\n                    count--;\n                    buffer[count] = ch;\n                }\n            } else if(ch >= 56192 && ch <= 56319) {\n                // private high surrogate, no effing clue, so skip it\n                count++;\n            } else {\n                buffer[count] = ch;\n            }\n        } else {\n            count++;\n        }\n    }\n    return new String(buffer);\n}\n", "diff": "diff --git a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\nindex b200223d..763a129c 100644\n--- a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n@@ -220,66 +220,68 @@ public class RandomStringUtils {\n      * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.\n      * @since 2.0\n      */\n-    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n-                                char[] chars, Random random) {\n-        if (count == 0) {\n-            return \"\";\n-        } else if (count < 0) {\n-            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n-        }\n \n-        if (start == 0 && end == 0) {\n-                if (!letters && !numbers) {\n-                    end = Integer.MAX_VALUE;\n-                } else {\n-                    end = 'z' + 1;\n-                    start = ' ';                \n-                }\n+public static String random(int count, int start, int end, boolean letters, boolean numbers,\n+                            char[] chars, Random random) {\n+    if (count == 0) {\n+        return \"\";\n+    } else if (count < 0) {\n+        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n+    }\n+\n+    if (start == 0 && end == 0) {\n+        if (!letters && !numbers) {\n+            end = Integer.MAX_VALUE;\n+        } else {\n+            end = 'z' + 1;\n+            start = ' ';                \n         }\n+    }\n \n-        char[] buffer = new char[count];\n-        int gap = end - start;\n+    char[] buffer = new char[count];\n+    int gap = end - start;\n \n-        while (count-- != 0) {\n-            char ch;\n-            if (chars == null) {\n-                ch = (char) (random.nextInt(gap) + start);\n-            } else {\n-                ch = chars[random.nextInt(gap) + start];\n-            }\n-            if (letters && Character.isLetter(ch)\n-                    || numbers && Character.isDigit(ch)\n-                    || !letters && !numbers) {\n-                if(ch >= 56320 && ch <= 57343) {\n-                    if(count == 0) {\n-                        count++;\n-                    } else {\n-                        // low surrogate, insert high surrogate after putting it in\n-                        buffer[count] = ch;\n-                        count--;\n-                        buffer[count] = (char) (55296 + random.nextInt(128));\n-                    }\n-                } else if(ch >= 55296 && ch <= 56191) {\n-                    if(count == 0) {\n-                        count++;\n-                    } else {\n-                        // high surrogate, insert low surrogate before putting it in\n-                        buffer[count] = (char) (56320 + random.nextInt(128));\n-                        count--;\n-                        buffer[count] = ch;\n-                    }\n-                } else if(ch >= 56192 && ch <= 56319) {\n-                    // private high surrogate, no effing clue, so skip it\n+    while (count-- != 0) {\n+        char ch;\n+        if (chars == null) {\n+            ch = (char) (random.nextInt(gap) + start);\n+        } else {\n+            ch = chars[random.nextInt(chars.length)];\n+        }\n+        if (letters && Character.isLetter(ch)\n+                || numbers && Character.isDigit(ch)\n+                || !letters && !numbers) {\n+            if(ch >= 56320 && ch <= 57343) {\n+                if(count == 0) {\n                     count++;\n                 } else {\n+                    // low surrogate, insert high surrogate after putting it in\n                     buffer[count] = ch;\n+                    count--;\n+                    buffer[count] = (char) (55296 + random.nextInt(128));\n                 }\n-            } else {\n+            } else if(ch >= 55296 && ch <= 56191) {\n+                if(count == 0) {\n+                    count++;\n+                } else {\n+                    // high surrogate, insert low surrogate before putting it in\n+                    buffer[count] = (char) (56320 + random.nextInt(128));\n+                    count--;\n+                    buffer[count] = ch;\n+                }\n+            } else if(ch >= 56192 && ch <= 56319) {\n+                // private high surrogate, no effing clue, so skip it\n                 count++;\n+            } else {\n+                buffer[count] = ch;\n             }\n+        } else {\n+            count++;\n         }\n-        return new String(buffer);\n     }\n+    return new String(buffer);\n+}\n+\n \n     /**\n      * <p>Creates a random string whose length is the number of characters"}
{"project": "Lang", "bug_id": "14", "eval": "PASS", "attempt": 1, "mode": "SF", "patch": "\npublic static boolean equals(CharSequence cs1, CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1.length() != cs2.length()) {\n        return false;\n    }\n    for (int i = 0; i < cs1.length(); i++) {\n        if (cs1.charAt(i) != cs2.charAt(i)) {\n            return false;\n        }\n    }\n    return true;\n}\n", "diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex 535a3f24..142f0670 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -778,15 +778,25 @@ public class StringUtils {\n      * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}\n      * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)\n      */\n-    public static boolean equals(CharSequence cs1, CharSequence cs2) {\n-        if (cs1 == cs2) {\n-            return true;\n-        }\n-        if (cs1 == null || cs2 == null) {\n+\n+public static boolean equals(CharSequence cs1, CharSequence cs2) {\n+    if (cs1 == cs2) {\n+        return true;\n+    }\n+    if (cs1 == null || cs2 == null) {\n+        return false;\n+    }\n+    if (cs1.length() != cs2.length()) {\n+        return false;\n+    }\n+    for (int i = 0; i < cs1.length(); i++) {\n+        if (cs1.charAt(i) != cs2.charAt(i)) {\n             return false;\n         }\n-            return cs1.equals(cs2);\n     }\n+    return true;\n+}\n+\n \n     /**\n      * <p>Compares two CharSequences, returning {@code true} if they represent"}
{"project": "Lang", "bug_id": "16", "eval": "PASS", "attempt": 8, "mode": "SL", "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {", "diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex 882358f2..abe307bb 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -455,7 +455,7 @@ public class NumberUtils {\n             // a wrong value.\n             return null;\n         }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             return createInteger(str);\n         }   \n         char lastChar = str.charAt(str.length() - 1);"}
{"project": "Lang", "bug_id": "17", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "18", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "19", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "21", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": "                cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&", "diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/DateUtils.java b/src/main/java/org/apache/commons/lang3/time/DateUtils.java\nindex 9a24c00f..52a44363 100644\n--- a/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n@@ -262,7 +262,7 @@ public class DateUtils {\n         return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n                 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n                 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n-                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n+                cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&\n                 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n                 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&"}
{"project": "Lang", "bug_id": "22", "eval": "PASS", "attempt": 1, "mode": "SF", "patch": "\n    private static int greatestCommonDivisor(int a, int b) {\n        a = Math.abs(a);\n        b = Math.abs(b);\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n", "diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/Fraction.java b/src/main/java/org/apache/commons/lang3/math/Fraction.java\nindex b36a156a..7d876202 100644\n--- a/src/main/java/org/apache/commons/lang3/math/Fraction.java\n+++ b/src/main/java/org/apache/commons/lang3/math/Fraction.java\n@@ -578,51 +578,19 @@ public final class Fraction extends Number implements Comparable<Fraction> {\n      * @param v  a non-zero number\n      * @return the greatest common divisor, never zero\n      */\n-    private static int greatestCommonDivisor(int u, int v) {\n-        // From Commons Math:\n-        //if either operand is abs 1, return 1:\n-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+\n+    private static int greatestCommonDivisor(int a, int b) {\n+        a = Math.abs(a);\n+        b = Math.abs(b);\n+        while (b != 0) {\n+            int temp = b;\n+            b = a % b;\n+            a = temp;\n         }\n-        // keep u and v negative, as negative integers range down to\n-        // -2^31, while positive numbers can only be as large as 2^31-1\n-        // (i.e. we can't necessarily negate a negative number without\n-        // overflow)\n-        if (u>0) { u=-u; } // make u negative\n-        if (v>0) { v=-v; } // make v negative\n-        // B1. [Find power of 2]\n-        int k=0;\n-        while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...\n-            u/=2; v/=2; k++; // cast out twos.\n-        }\n-        if (k==31) {\n-            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n-        }\n-        // B2. Initialize: u and v have been divided by 2^k and at least\n-        //     one is odd.\n-        int t = ((u&1)==1) ? v : -(u/2)/*B3*/;\n-        // t negative: u was odd, v may be even (t replaces v)\n-        // t positive: u was even, v is odd (t replaces u)\n-        do {\n-            /* assert u<0 && v<0; */\n-            // B4/B3: cast out twos from t.\n-            while ((t&1)==0) { // while t is even..\n-                t/=2; // cast out twos\n-            }\n-            // B5 [reset max(u,v)]\n-            if (t>0) {\n-                u = -t;\n-            } else {\n-                v = t;\n-            }\n-            // B6/B3. at this point both u and v should be odd.\n-            t = (v - u)/2;\n-            // |u| larger: t positive (replace u)\n-            // |v| larger: t negative (replace v)\n-        } while (t!=0);\n-        return -u*(1<<k); // gcd is u*2^k\n+        return a;\n     }\n \n+\n     // Arithmetic\n     //-------------------------------------------------------------------\n "}
{"project": "Lang", "bug_id": "24", "eval": "PASS", "attempt": 17, "mode": "SL", "patch": "                return foundDigit && !hasExp && !hasDecPoint;", "diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex 4a1d8459..d9b3c6de 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -1410,7 +1410,7 @@ public class NumberUtils {\n             if (chars[i] == 'l'\n                 || chars[i] == 'L') {\n                 // not allowing L with an exponent or decimal point\n-                return foundDigit && !hasExp;\n+                return foundDigit && !hasExp && !hasDecPoint;\n             }\n             // last character is illegal\n             return false;"}
{"project": "Lang", "bug_id": "26", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "27", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "28", "eval": "PASS", "attempt": 19, "mode": "SF", "patch": "\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        // TODO: Protect from ArrayIndexOutOfBounds\n        if(index + 2 < input.length() && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n\n            int end = start;\n            while(end < input.length() && input.charAt(end) != ';') {\n                end++;\n            }\n\n            if (end == input.length() || input.charAt(end) != ';') {\n                // ';' not found\n                return 0;\n            }\n\n            int entityValue;\n            try {\n                if(isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch(NumberFormatException nfe) {\n                return 0;\n            }\n\n            char[] entityChar = Character.toChars(entityValue);\n            for (char c : entityChar) {\n                out.write(c);\n            }\n\n            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n        }\n        return 0;\n    }\n", "diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex c3cb8695..05aa2157 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -32,9 +32,10 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n+\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         // TODO: Protect from ArrayIndexOutOfBounds\n-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n+        if(index + 2 < input.length() && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n             int start = index + 2;\n             boolean isHex = false;\n \n@@ -45,10 +46,15 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n             }\n \n             int end = start;\n-            while(input.charAt(end) != ';') {\n+            while(end < input.length() && input.charAt(end) != ';') {\n                 end++;\n             }\n \n+            if (end == input.length() || input.charAt(end) != ';') {\n+                // ';' not found\n+                return 0;\n+            }\n+\n             int entityValue;\n             try {\n                 if(isHex) {\n@@ -60,9 +66,14 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 return 0;\n             }\n \n-                out.write(entityValue);\n+            char[] entityChar = Character.toChars(entityValue);\n+            for (char c : entityChar) {\n+                out.write(c);\n+            }\n+\n             return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n         }\n         return 0;\n     }\n+\n }"}
{"project": "Lang", "bug_id": "31", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "33", "eval": "PASS", "attempt": 9, "mode": "SL", "patch": "            classes[i] = (array[i] == null) ? null : array[i].getClass();", "diff": "diff --git a/src/main/java/org/apache/commons/lang3/ClassUtils.java b/src/main/java/org/apache/commons/lang3/ClassUtils.java\nindex 615e4a9a..d0f4af10 100644\n--- a/src/main/java/org/apache/commons/lang3/ClassUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ClassUtils.java\n@@ -907,7 +907,7 @@ public class ClassUtils {\n         }\n         Class<?>[] classes = new Class[array.length];\n         for (int i = 0; i < array.length; i++) {\n-            classes[i] = array[i].getClass();\n+            classes[i] = (array[i] == null) ? null : array[i].getClass();\n         }\n         return classes;\n     }"}
{"project": "Lang", "bug_id": "37", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "38", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "39", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "40", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "42", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "43", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "44", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "45", "eval": "PASS", "attempt": 2, "mode": "SH", "patch": "\n        lower = Math.min(lower, str.length());\n", "diff": "diff --git a/src/java/org/apache/commons/lang/WordUtils.java b/src/java/org/apache/commons/lang/WordUtils.java\nindex 42bd883e..288d23fb 100644\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n@@ -613,6 +613,9 @@ public class WordUtils {\n \n         // if the lower value is greater than the length of the string,\n         // set to the length of the string\n+\n+        lower = Math.min(lower, str.length());\n+\n         // if the upper value is -1 (i.e. no limit) or is greater\n         // than the length of the string, set to the length of the string\n         if (upper == -1 || upper > str.length()) {"}
{"project": "Lang", "bug_id": "48", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "49", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "51", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": "                return str.charAt(2) == 'e' || str.charAt(2) == 'E';", "diff": "diff --git a/src/java/org/apache/commons/lang/BooleanUtils.java b/src/java/org/apache/commons/lang/BooleanUtils.java\nindex 3fda4ecc..9c4503f0 100644\n--- a/src/java/org/apache/commons/lang/BooleanUtils.java\n+++ b/src/java/org/apache/commons/lang/BooleanUtils.java\n@@ -679,6 +679,7 @@ public class BooleanUtils {\n                         (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                         (str.charAt(2) == 'S' || str.charAt(2) == 's');\n                 }\n+                return str.charAt(2) == 'e' || str.charAt(2) == 'E';\n             }\n             case 4: {\n                 char ch = str.charAt(0);"}
{"project": "Lang", "bug_id": "52", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "53", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "54", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "55", "eval": "PASS", "attempt": 1, "mode": "SF", "patch": "\npublic void stop() {\n    if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {\n        throw new IllegalStateException(\"Stopwatch is not running. \");\n    }\n    if(this.runningState == STATE_RUNNING) {\n        stopTime = System.currentTimeMillis();\n    }\n    this.runningState = STATE_STOPPED;\n}\n", "diff": "diff --git a/src/java/org/apache/commons/lang/time/StopWatch.java b/src/java/org/apache/commons/lang/time/StopWatch.java\nindex 8f394217..0302ca70 100644\n--- a/src/java/org/apache/commons/lang/time/StopWatch.java\n+++ b/src/java/org/apache/commons/lang/time/StopWatch.java\n@@ -111,13 +111,17 @@ public class StopWatch {\n      *\n      * @throws IllegalStateException if the StopWatch is not running.\n      */\n-    public void stop() {\n-        if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {\n-            throw new IllegalStateException(\"Stopwatch is not running. \");\n-        }\n-            stopTime = System.currentTimeMillis();\n-        this.runningState = STATE_STOPPED;\n+\n+public void stop() {\n+    if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {\n+        throw new IllegalStateException(\"Stopwatch is not running. \");\n     }\n+    if(this.runningState == STATE_RUNNING) {\n+        stopTime = System.currentTimeMillis();\n+    }\n+    this.runningState = STATE_STOPPED;\n+}\n+\n \n     /**\n      * <p>Resets the stopwatch. Stops it if need be. </p>"}
{"project": "Lang", "bug_id": "57", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": "        return cAvailableLocaleSet != null && cAvailableLocaleSet.contains(locale);", "diff": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex ceb886e8..86b31d4b 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -220,7 +220,7 @@ public class LocaleUtils {\n      * @return true if the locale is a known locale\n      */\n     public static boolean isAvailableLocale(Locale locale) {\n-        return cAvailableLocaleSet.contains(locale);\n+        return cAvailableLocaleSet != null && cAvailableLocaleSet.contains(locale);\n     }\n \n     //-----------------------------------------------------------------------"}
{"project": "Lang", "bug_id": "58", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "59", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "61", "eval": "PASS", "attempt": 4, "mode": "SL", "patch": "        int len = size - strLen + 1;", "diff": "diff --git a/src/java/org/apache/commons/lang/text/StrBuilder.java b/src/java/org/apache/commons/lang/text/StrBuilder.java\nindex 0e889892..c7cbfb3e 100644\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n@@ -1773,7 +1773,7 @@ public class StrBuilder implements Cloneable {\n             return -1;\n         }\n         char[] thisBuf = buffer;\n-        int len = thisBuf.length - strLen;\n+        int len = size - strLen + 1;\n         outer:\n         for (int i = startIndex; i < len; i++) {\n             for (int j = 0; j < strLen; j++) {"}
{"project": "Lang", "bug_id": "65", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "2", "eval": "PASS", "attempt": 2, "mode": "SL", "patch": "        return (double) getSampleSize() * getNumberOfSuccesses() / getPopulationSize();", "diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\nindex 27691272f..614e24044 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\n@@ -265,7 +265,7 @@ public class HypergeometricDistribution extends AbstractIntegerDistribution {\n      * size {@code n}, the mean is {@code n * m / N}.\n      */\n     public double getNumericalMean() {\n-        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n+        return (double) getSampleSize() * getNumberOfSuccesses() / getPopulationSize();\n     }\n \n     /**"}
{"project": "Math", "bug_id": "3", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "5", "eval": "PASS", "attempt": 8, "mode": "SL", "patch": "        return new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);", "diff": "diff --git a/src/main/java/org/apache/commons/math3/complex/Complex.java b/src/main/java/org/apache/commons/math3/complex/Complex.java\nindex 22b23f24e..e32e1a309 100644\n--- a/src/main/java/org/apache/commons/math3/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math3/complex/Complex.java\n@@ -302,7 +302,7 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n         }\n \n         if (real == 0.0 && imaginary == 0.0) {\n-            return NaN;\n+        return new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n         }\n \n         if (isInfinite) {"}
{"project": "Math", "bug_id": "7", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "9", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "10", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "11", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "12", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "13", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "15", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "17", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "19", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "20", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "21", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "23", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "24", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "25", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "26", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "27", "eval": "PASS", "attempt": 7, "mode": "SL", "patch": "        return divide(1).doubleValue() * 100;", "diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f84218ebd..1f7db5e90 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -594,7 +594,7 @@ public class Fraction\n      * @return the fraction percentage as a <tt>double</tt>.\n      */\n     public double percentageValue() {\n-        return multiply(100).doubleValue();\n+        return divide(1).doubleValue() * 100;\n     }\n \n     /**"}
{"project": "Math", "bug_id": "28", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "30", "eval": "PASS", "attempt": 10, "mode": "SL", "patch": "        final double n1n2prod = n1 * n2;", "diff": "diff --git a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\nindex ce694ce8f..a16173723 100644\n--- a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n+++ b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n@@ -170,7 +170,7 @@ public class MannWhitneyUTest {\n                                              final int n2)\n         throws ConvergenceException, MaxCountExceededException {\n \n-        final int n1n2prod = n1 * n2;\n+        final double n1n2prod = n1 * n2;\n \n         // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n         final double EU = n1n2prod / 2.0;"}
{"project": "Math", "bug_id": "31", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "32", "eval": "PASS", "attempt": 15, "mode": "SL", "patch": "            if (tree.getAttribute() instanceof Boolean) {", "diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\nindex c6e7cf18c..1c891f485 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\n@@ -133,7 +133,7 @@ public class PolygonsSet extends AbstractRegion<Euclidean2D, Euclidean1D> {\n \n         if (v.length == 0) {\n             final BSPTree<Euclidean2D> tree = getTree(false);\n-            if ((Boolean) tree.getAttribute()) {\n+            if (tree.getAttribute() instanceof Boolean) {\n                 // the instance covers the whole space\n                 setSize(Double.POSITIVE_INFINITY);\n                 setBarycenter(Vector2D.NaN);"}
{"project": "Math", "bug_id": "33", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "34", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "38", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "39", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "40", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "41", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": "                for (int i = begin; i < begin + length; i++) {", "diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\nindex e5518e31a..1de139f3e 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -517,7 +517,7 @@ public class Variance extends AbstractStorelessUnivariateStatistic implements Se\n                 }\n \n                 double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n+                for (int i = begin; i < begin + length; i++) {\n                     sumWts += weights[i];\n                 }\n "}
{"project": "Math", "bug_id": "42", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "43", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "45", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "48", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "50", "eval": "PASS", "attempt": 4, "mode": "SH", "patch": "\n                    if (x == x1) {\n                        x1 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                        f1 = computeObjectiveValue(x1);\n                    }\n", "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e47d98204..952b9920c 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -184,10 +184,12 @@ public abstract class BaseSecantSolver\n                     break;\n                 case REGULA_FALSI:\n                     // Nothing.\n+\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                        x1 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        f1 = computeObjectiveValue(x1);\n                     }\n+\n                     break;\n                 default:\n                     // Should never happen."}
{"project": "Math", "bug_id": "51", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "52", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "53", "eval": "PASS", "attempt": 14, "mode": "SH", "patch": "\n        MathUtils.checkNotNull(rhs);\n        if (this.isNaN() || rhs.isNaN()) {\n            return new Complex(Double.NaN, Double.NaN);\n        }\n", "diff": "diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java\nindex e0a8e97e9..a3aab8968 100644\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -150,6 +150,12 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n     public Complex add(Complex rhs)\n         throws NullArgumentException {\n         MathUtils.checkNotNull(rhs);\n+\n+        MathUtils.checkNotNull(rhs);\n+        if (this.isNaN() || rhs.isNaN()) {\n+            return new Complex(Double.NaN, Double.NaN);\n+        }\n+\n         return createComplex(real + rhs.getReal(),\n             imaginary + rhs.getImaginary());\n     }"}
{"project": "Math", "bug_id": "54", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "55", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "56", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "57", "eval": "PASS", "attempt": 5, "mode": "SL", "patch": "            double sum = 0;", "diff": "diff --git a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\nindex b73ac9d3e..e09bbc357 100644\n--- a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n+++ b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n@@ -172,7 +172,7 @@ public class KMeansPlusPlusClusterer<T extends Clusterable<T>> {\n         while (resultSet.size() < k) {\n             // For each data point x, compute D(x), the distance between x and\n             // the nearest center that has already been chosen.\n-            int sum = 0;\n+            double sum = 0;\n             for (int i = 0; i < pointSet.size(); i++) {\n                 final T p = pointSet.get(i);\n                 final Cluster<T> nearest = getNearestCluster(resultSet, p);"}
{"project": "Math", "bug_id": "58", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "59", "eval": "PASS", "attempt": 13, "mode": "SL", "patch": "        return (a > b) ? a : (Float.isNaN(a + b) ? Float.NaN : b);", "diff": "diff --git a/src/main/java/org/apache/commons/math/util/FastMath.java b/src/main/java/org/apache/commons/math/util/FastMath.java\nindex 8cba4d484..0f1272a25 100644\n--- a/src/main/java/org/apache/commons/math/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math/util/FastMath.java\n@@ -3479,7 +3479,7 @@ public class FastMath {\n      * @return b if a is lesser or equal to b, a otherwise\n      */\n     public static float max(final float a, final float b) {\n-        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);\n+        return (a > b) ? a : (Float.isNaN(a + b) ? Float.NaN : b);\n     }\n \n     /** Compute the maximum of two values"}
{"project": "Math", "bug_id": "60", "eval": "PASS", "attempt": 11, "mode": "SF", "patch": "\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n        return 0;\n    } else if (x > (mean + 20 * standardDeviation)) {\n        return 1;\n    } else {\n        try {\n            return 0.5 * (1.0 + Erf.erf((dev) /\n                    (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            throw ex;\n        }\n    }\n}\n", "diff": "diff --git a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 0e124d852..e15d421b0 100644\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -121,21 +121,23 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * @return CDF evaluated at {@code x}.\n      * @throws MathException if the algorithm fails to converge\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-        final double dev = x - mean;\n+\n+public double cumulativeProbability(double x) throws MathException {\n+    final double dev = x - mean;\n+    if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n+        return 0;\n+    } else if (x > (mean + 20 * standardDeviation)) {\n+        return 1;\n+    } else {\n         try {\n-        return 0.5 * (1.0 + Erf.erf((dev) /\n+            return 0.5 * (1.0 + Erf.erf((dev) /\n                     (standardDeviation * FastMath.sqrt(2.0))));\n         } catch (MaxIterationsExceededException ex) {\n-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n-                return 0;\n-            } else if (x > (mean + 20 * standardDeviation)) {\n-                return 1;\n-            } else {\n-                throw ex;\n-            }\n+            throw ex;\n         }\n     }\n+}\n+\n \n     /**\n      * Return the absolute accuracy setting of the solver used to estimate"}
{"project": "Math", "bug_id": "63", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "64", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "69", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "70", "eval": "PASS", "attempt": 4, "mode": "SL", "patch": "        return solve(f, min, max);", "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..180caefbc 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,7 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+        return solve(f, min, max);\n     }\n \n     /** {@inheritDoc} */"}
{"project": "Math", "bug_id": "72", "eval": "PASS", "attempt": 8, "mode": "SF", "patch": "\npublic double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    // return the initial guess if it is good enough\n    double yInitial = f.value(initial);\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    // return the min endpoint if it is good enough\n    double yMin = f.value(min);\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    }\n\n    // reduce interval if min and initial bracket the root\n    if (yInitial * yMin < 0) {\n        return solve(f, min, yMin, initial, yInitial, min, yMin);\n    }\n\n    // return the max endpoint if it is good enough\n    double yMax = f.value(max);\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    }\n\n    // reduce interval if initial and max bracket the root\n    if (yInitial * yMax < 0) {\n        return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n    }\n\n    if (yMin * yMax > 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n    }\n\n    // full Brent algorithm starting with provided initial guess\n    return solve(f, min, yMin, max, yMax, initial, yInitial);\n}\n", "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex e0cb42714..633cd322d 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,54 +95,55 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n-                        final double min, final double max, final double initial)\n-        throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+public double solve(final UnivariateRealFunction f,\n+                    final double min, final double max, final double initial)\n+    throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        // return the initial guess if it is good enough\n-        double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+    clearResult();\n+    verifySequence(min, initial, max);\n \n-        // return the first endpoint if it is good enough\n-        double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n+    // return the initial guess if it is good enough\n+    double yInitial = f.value(initial);\n+    if (Math.abs(yInitial) <= functionValueAccuracy) {\n+        setResult(initial, 0);\n+        return result;\n+    }\n \n-        // return the second endpoint if it is good enough\n-        double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+    // return the min endpoint if it is good enough\n+    double yMin = f.value(min);\n+    if (Math.abs(yMin) <= functionValueAccuracy) {\n+        setResult(min, 0);\n+        return result;\n+    }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+    // reduce interval if min and initial bracket the root\n+    if (yInitial * yMin < 0) {\n+        return solve(f, min, yMin, initial, yInitial, min, yMin);\n+    }\n \n-        if (yMin * yMax > 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n-        }\n+    // return the max endpoint if it is good enough\n+    double yMax = f.value(max);\n+    if (Math.abs(yMax) <= functionValueAccuracy) {\n+        setResult(max, 0);\n+        return result;\n+    }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+    // reduce interval if initial and max bracket the root\n+    if (yInitial * yMax < 0) {\n+        return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n+    }\n \n+    if (yMin * yMax > 0) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+              NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n     }\n \n+    // full Brent algorithm starting with provided initial guess\n+    return solve(f, min, yMin, max, yMax, initial, yInitial);\n+}\n+\n+\n     /**\n      * Find a zero in the given interval.\n      * <p>"}
{"project": "Math", "bug_id": "73", "eval": "PASS", "attempt": 1, "mode": "SH", "patch": "\n        // The given endpoints do not bracket the root\n        if (yInitial * yMin >= 0 && yInitial * yMax >= 0) {\n            throw new IllegalArgumentException(\"Endpoints do not bracket the root\");\n        }\n", "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..4bd294f21 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -134,6 +134,12 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n         }\n \n \n+        // The given endpoints do not bracket the root\n+        if (yInitial * yMin >= 0 && yInitial * yMax >= 0) {\n+            throw new IllegalArgumentException(\"Endpoints do not bracket the root\");\n+        }\n+\n+\n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n "}
{"project": "Math", "bug_id": "74", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "75", "eval": "PASS", "attempt": 15, "mode": "SL", "patch": "        return getPct((Comparable<?>) v);", "diff": "diff --git a/src/main/java/org/apache/commons/math/stat/Frequency.java b/src/main/java/org/apache/commons/math/stat/Frequency.java\nindex c45d72883..68c8bf2de 100644\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n@@ -300,7 +300,7 @@ public class Frequency implements Serializable {\n      */\n     @Deprecated\n     public double getPct(Object v) {\n-        return getCumPct((Comparable<?>) v);\n+        return getPct((Comparable<?>) v);\n     }\n \n     /**"}
{"project": "Math", "bug_id": "78", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "79", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "80", "eval": "PASS", "attempt": 4, "mode": "SL", "patch": "            int j = 4 * (n - 1);", "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\nindex 3fc328d8b..9d1b797be 100644\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1132,7 +1132,7 @@ public class EigenDecompositionImpl implements EigenDecomposition {\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n-            int j = 4 * n - 1;\n+            int j = 4 * (n - 1);\n             for (int i = 0; i < j; i += 4) {\n                 for (int k = 0; k < 4; k += step) {\n                     final double tmp = work[i + k];"}
{"project": "Math", "bug_id": "82", "eval": "PASS", "attempt": 8, "mode": "SL", "patch": "            if (entry >= 0) {", "diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\nindex 8309d7b40..5436f78c5 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n@@ -79,7 +79,7 @@ public class SimplexSolver extends AbstractLinearOptimizer {\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n             final double entry = tableau.getEntry(i, col);\n-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n+            if (entry >= 0) {\n                 final double ratio = rhs / entry;\n                 if (ratio < minRatio) {\n                     minRatio = ratio;"}
{"project": "Math", "bug_id": "84", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "85", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": "        if (fa * fb > 0.0 ) {", "diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..e6398f6ab 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -195,7 +195,7 @@ public class UnivariateRealSolverUtils {\n         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n                 ((a > lowerBound) || (b < upperBound)));\n    \n-        if (fa * fb >= 0.0 ) {\n+        if (fa * fb > 0.0 ) {\n             throw new ConvergenceException(\n                       \"number of iterations={0}, maximum iterations={1}, \" +\n                       \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +"}
{"project": "Math", "bug_id": "86", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "87", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "88", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "89", "eval": "PASS", "attempt": 2, "mode": "SF", "patch": "\n    public void addValue(Object v) {\n        if (v instanceof Comparable) {\n            addValue((Comparable<?>) v);\n        } else {\n            throw new IllegalArgumentException(\"Not a comparable value\");\n        }\n    }\n", "diff": "diff --git a/src/java/org/apache/commons/math/stat/Frequency.java b/src/java/org/apache/commons/math/stat/Frequency.java\nindex c8deca31a..cc8bede69 100644\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n@@ -106,9 +106,15 @@ public class Frequency implements Serializable {\n      * @deprecated use {@link #addValue(Comparable)} instead\n      */\n     @Deprecated\n+\n     public void addValue(Object v) {\n-            addValue((Comparable<?>) v);            \n+        if (v instanceof Comparable) {\n+            addValue((Comparable<?>) v);\n+        } else {\n+            throw new IllegalArgumentException(\"Not a comparable value\");\n+        }\n     }\n+\n     \n     /**\n      * Adds 1 to the frequency count for v."}
{"project": "Math", "bug_id": "91", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "94", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": "        if (u == 0 || v == 0) {", "diff": "diff --git a/src/java/org/apache/commons/math/util/MathUtils.java b/src/java/org/apache/commons/math/util/MathUtils.java\nindex c5342aeb3..841714262 100644\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n@@ -409,7 +409,7 @@ public final class MathUtils {\n      * @since 1.1\n      */\n     public static int gcd(int u, int v) {\n-        if (u * v == 0) {\n+        if (u == 0 || v == 0) {\n             return (Math.abs(u) + Math.abs(v));\n         }\n         // keep u and v negative, as negative integers range down to"}
{"project": "Math", "bug_id": "95", "eval": "PASS", "attempt": 18, "mode": "SF", "patch": "\n    protected double getInitialDomain(double p) {\n        double ret;\n        double d = getDenominatorDegreesOfFreedom();\n            // use mean\n            if (d > 2.0) {\n                ret = d / (d - 2.0);\n            } else {\n                ret = 0.0;\n            }\n        return ret;\n    }\n", "diff": "diff --git a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\nindex e19e97aef..97209eb79 100644\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n@@ -140,13 +140,19 @@ public class FDistributionImpl\n      * @param p the desired probability for the critical value\n      * @return initial domain value\n      */\n+\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n-            ret = d / (d - 2.0);\n+            if (d > 2.0) {\n+                ret = d / (d - 2.0);\n+            } else {\n+                ret = 0.0;\n+            }\n         return ret;\n     }\n+\n     \n     /**\n      * Modify the numerator degrees of freedom."}
{"project": "Math", "bug_id": "96", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": "                    ret = (this.real == rhs.real) && (this.imaginary == rhs.imaginary); ", "diff": "diff --git a/src/java/org/apache/commons/math/complex/Complex.java b/src/java/org/apache/commons/math/complex/Complex.java\nindex 3571567f8..6085a7446 100644\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n@@ -255,7 +255,7 @@ public class Complex implements Serializable  {\n                 if (rhs.isNaN()) {\n                     ret = this.isNaN();\n                 } else {\n-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n+                    ret = (this.real == rhs.real) && (this.imaginary == rhs.imaginary); \n                 }\n             } catch (ClassCastException ex) {\n                 // ignore exception"}
{"project": "Math", "bug_id": "97", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "101", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "102", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "103", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "104", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "105", "eval": "PASS", "attempt": 10, "mode": "SL", "patch": "    return Math.max(0, sumYY - sumXY * sumXY / sumXX);", "diff": "diff --git a/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\nindex dcf512b72..8907e251a 100644\n--- a/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n@@ -261,7 +261,7 @@ public class SimpleRegression implements Serializable {\n      * @return sum of squared errors associated with the regression model\n      */\n     public double getSumSquaredErrors() {\n-        return sumYY - sumXY * sumXY / sumXX;\n+    return Math.max(0, sumYY - sumXY * sumXY / sumXX);\n     }\n \n     /**"}
{"project": "Math", "bug_id": "106", "eval": "PASS", "attempt": 12, "mode": "SF", "patch": "\npublic Fraction parse(String source, ParsePosition pos) {\n    // try to parse improper fraction\n    Fraction ret = super.parse(source, pos);\n    if (ret != null) {\n        return ret;\n    }\n    \n    int initialIndex = pos.getIndex();\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse whole\n    Number whole = getWholeFormat().parse(source, pos);\n    if (whole == null) {\n        // invalid integer number\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n    \n    // parse numerator\n    Number num = getNumeratorFormat().parse(source, pos);\n    if (num == null) {\n        // invalid integer number\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    // parse '/'\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    switch (c) {\n    case 0 :\n        // no '/'\n        return new Fraction(num.intValue(), 1);\n    case '/' :\n        break;\n    default :\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse denominator\n    Number den = getDenominatorFormat().parse(source, pos);\n    if (den == null) {\n        // invalid integer number\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    int w = whole.intValue();\n    int n = num.intValue();\n    int d = den.intValue();\n\n    if (n < 0 || d < 0) {\n        // minus signs should be leading, invalid expression\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n\n    return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n}\n", "diff": "diff --git a/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java b/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\nindex df2713da8..f3ed266b6 100644\n--- a/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\n+++ b/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\n@@ -127,83 +127,78 @@ public class ProperFractionFormat extends FractionFormat {\n      * @param pos input/ouput parsing parameter.\n      * @return the parsed {@link Fraction} object.\n      */\n-    public Fraction parse(String source, ParsePosition pos) {\n-        // try to parse improper fraction\n-        Fraction ret = super.parse(source, pos);\n-        if (ret != null) {\n-            return ret;\n-        }\n-        \n-        int initialIndex = pos.getIndex();\n-\n-        // parse whitespace\n-        parseAndIgnoreWhitespace(source, pos);\n-\n-        // parse whole\n-        Number whole = getWholeFormat().parse(source, pos);\n-        if (whole == null) {\n-            // invalid integer number\n-            // set index back to initial, error index should already be set\n-            // character examined.\n-            pos.setIndex(initialIndex);\n-            return null;\n-        }\n-\n-        // parse whitespace\n-        parseAndIgnoreWhitespace(source, pos);\n-        \n-        // parse numerator\n-        Number num = getNumeratorFormat().parse(source, pos);\n-        if (num == null) {\n-            // invalid integer number\n-            // set index back to initial, error index should already be set\n-            // character examined.\n-            pos.setIndex(initialIndex);\n-            return null;\n-        }\n-        \n-            // minus signs should be leading, invalid expression\n-\n-        // parse '/'\n-        int startIndex = pos.getIndex();\n-        char c = parseNextCharacter(source, pos);\n-        switch (c) {\n-        case 0 :\n-            // no '/'\n-            // return num as a fraction\n-            return new Fraction(num.intValue(), 1);\n-        case '/' :\n-            // found '/', continue parsing denominator\n-            break;\n-        default :\n-            // invalid '/'\n-            // set index back to initial, error index should be the last\n-            // character examined.\n-            pos.setIndex(initialIndex);\n-            pos.setErrorIndex(startIndex);\n-            return null;\n-        }\n-\n-        // parse whitespace\n-        parseAndIgnoreWhitespace(source, pos);\n-\n-        // parse denominator\n-        Number den = getDenominatorFormat().parse(source, pos);\n-        if (den == null) {\n-            // invalid integer number\n-            // set index back to initial, error index should already be set\n-            // character examined.\n-            pos.setIndex(initialIndex);\n-            return null;\n-        }\n-        \n-            // minus signs must be leading, invalid\n-\n-        int w = whole.intValue();\n-        int n = num.intValue();\n-        int d = den.intValue();\n-        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n-    }\n+\n+public Fraction parse(String source, ParsePosition pos) {\n+    // try to parse improper fraction\n+    Fraction ret = super.parse(source, pos);\n+    if (ret != null) {\n+        return ret;\n+    }\n+    \n+    int initialIndex = pos.getIndex();\n+\n+    // parse whitespace\n+    parseAndIgnoreWhitespace(source, pos);\n+\n+    // parse whole\n+    Number whole = getWholeFormat().parse(source, pos);\n+    if (whole == null) {\n+        // invalid integer number\n+        pos.setIndex(initialIndex);\n+        return null;\n+    }\n+\n+    // parse whitespace\n+    parseAndIgnoreWhitespace(source, pos);\n+    \n+    // parse numerator\n+    Number num = getNumeratorFormat().parse(source, pos);\n+    if (num == null) {\n+        // invalid integer number\n+        pos.setIndex(initialIndex);\n+        return null;\n+    }\n+\n+    // parse '/'\n+    int startIndex = pos.getIndex();\n+    char c = parseNextCharacter(source, pos);\n+    switch (c) {\n+    case 0 :\n+        // no '/'\n+        return new Fraction(num.intValue(), 1);\n+    case '/' :\n+        break;\n+    default :\n+        pos.setIndex(initialIndex);\n+        pos.setErrorIndex(startIndex);\n+        return null;\n+    }\n+\n+    // parse whitespace\n+    parseAndIgnoreWhitespace(source, pos);\n+\n+    // parse denominator\n+    Number den = getDenominatorFormat().parse(source, pos);\n+    if (den == null) {\n+        // invalid integer number\n+        pos.setIndex(initialIndex);\n+        return null;\n+    }\n+\n+    int w = whole.intValue();\n+    int n = num.intValue();\n+    int d = den.intValue();\n+\n+    if (n < 0 || d < 0) {\n+        // minus signs should be leading, invalid expression\n+        pos.setIndex(initialIndex);\n+        pos.setErrorIndex(startIndex);\n+        return null;\n+    }\n+\n+    return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n+}\n+\n     \n     /**\n      * Modify the whole format."}
{"project": "Mockito", "bug_id": "1", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Mockito", "bug_id": "5", "eval": "PASS", "attempt": 18, "mode": "SL", "patch": "catch (AssertionError e) {", "diff": "diff --git a/src/org/mockito/internal/verification/VerificationOverTimeImpl.java b/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\nindex c5a66c501..78da92115 100644\n--- a/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n+++ b/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n@@ -88,7 +88,7 @@ public class VerificationOverTimeImpl implements VerificationMode {\n             } catch (MockitoAssertionError e) {\n                 error = handleVerifyException(e);\n             }\n-            catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n+catch (AssertionError e) {\n                 error = handleVerifyException(e);\n             }\n         }"}
{"project": "Mockito", "bug_id": "7", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Mockito", "bug_id": "8", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Mockito", "bug_id": "12", "eval": "PASS", "attempt": 8, "mode": "SF", "patch": "\n    public Class getGenericType(Field field) {        \n        Type generic = field.getGenericType();\n        if (generic != null && generic instanceof ParameterizedType) {\n            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n            if (actual instanceof Class) {\n                return (Class) actual;\n            } else if (actual instanceof ParameterizedType) {\n                return (Class) ((ParameterizedType) actual).getRawType();\n            }\n        }\n        \n        return Object.class;\n    }\n", "diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java\nindex 64bf1540f..cc63ca8e3 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMaster.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java\n@@ -13,14 +13,19 @@ public class GenericMaster {\n      * @param field\n      * @return\n      */\n-    public Class getGenericType(Field field) {        \n-        Type generic = field.getGenericType();\n-        if (generic != null && generic instanceof ParameterizedType) {\n-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n-                return (Class) actual;\n-                //in case of nested generics we don't go deep\n-        }\n-        \n-        return Object.class;\n-    }\n+\n+    public Class getGenericType(Field field) {        \n+        Type generic = field.getGenericType();\n+        if (generic != null && generic instanceof ParameterizedType) {\n+            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n+            if (actual instanceof Class) {\n+                return (Class) actual;\n+            } else if (actual instanceof ParameterizedType) {\n+                return (Class) ((ParameterizedType) actual).getRawType();\n+            }\n+        }\n+        \n+        return Object.class;\n+    }\n+\n }"}
{"project": "Mockito", "bug_id": "13", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Mockito", "bug_id": "18", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Mockito", "bug_id": "20", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Mockito", "bug_id": "22", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Mockito", "bug_id": "24", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Mockito", "bug_id": "26", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": "        primitiveValues.put(double.class, 0.0D);", "diff": "diff --git a/src/org/mockito/internal/util/Primitives.java b/src/org/mockito/internal/util/Primitives.java\nindex b44b8253d..1b8a7aece 100644\n--- a/src/org/mockito/internal/util/Primitives.java\n+++ b/src/org/mockito/internal/util/Primitives.java\n@@ -63,6 +63,6 @@ public class Primitives {\n         primitiveValues.put(int.class, 0);\n         primitiveValues.put(long.class, 0L);\n         primitiveValues.put(float.class, 0F);\n-        primitiveValues.put(double.class, 0);\n+        primitiveValues.put(double.class, 0.0D);\n     }\n-}\n\\ No newline at end of file\n+}"}
{"project": "Mockito", "bug_id": "27", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Mockito", "bug_id": "28", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Mockito", "bug_id": "29", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Mockito", "bug_id": "33", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Mockito", "bug_id": "34", "eval": "PASS", "attempt": 10, "mode": "SL", "patch": "if (k < i.getArguments().length && m instanceof CapturesArguments) { ", "diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex c72b119dd..95d658d19 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -103,10 +103,10 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n     public void captureArgumentsFrom(Invocation i) {\n         int k = 0;\n         for (Matcher m : matchers) {\n-            if (m instanceof CapturesArguments) {\n+if (k < i.getArguments().length && m instanceof CapturesArguments) { \n                 ((CapturesArguments) m).captureFrom(i.getArguments()[k]);\n             }\n             k++;\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}
{"project": "Mockito", "bug_id": "38", "eval": "PASS", "attempt": 4, "mode": "SL", "patch": "        return StringDescription.toString(m).equals(arg == null ? \"\" : arg.toString());", "diff": "diff --git a/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java b/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\nindex 671fbc539..ff6ff2b8a 100644\n--- a/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\n+++ b/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\n@@ -44,7 +44,8 @@ public class ArgumentMatchingTool {\n         }\n     }\n \n+\n     private boolean toStringEquals(Matcher m, Object arg) {\n-        return StringDescription.toString(m).equals(arg.toString());\n+        return StringDescription.toString(m).equals(arg == null ? \"\" : arg.toString());\n     }\n }"}
{"project": "Time", "bug_id": "4", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "5", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "7", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "8", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "14", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "15", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "16", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "17", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "18", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "19", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": "        } else {", "diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..4ba373ba 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,7 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        } else {\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);"}
{"project": "Time", "bug_id": "20", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "22", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "23", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "24", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "25", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "27", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
