{"project": "Chart", "bug_id": "1", "eval": "PASS", "attempt": 6, "mode": "SL", "patch": " if (dataset == null) {", "diff": "diff --git a/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java b/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\nindex 226b25a..2ea96a2 100644\n--- a/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\n+++ b/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\n@@ -1794,7 +1794,7 @@ public abstract class AbstractCategoryItemRenderer extends AbstractRenderer\n         }\n         int index = this.plot.getIndexOf(this);\n         CategoryDataset dataset = this.plot.getDataset(index);\n-        if (dataset != null) {\n+ if (dataset == null) {\n             return result;\n         }\n         int seriesCount = dataset.getRowCount();"}
{"project": "Chart", "bug_id": "3", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Chart", "bug_id": "4", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Chart", "bug_id": "5", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Chart", "bug_id": "6", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Chart", "bug_id": "7", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Chart", "bug_id": "8", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": " this(time, zone, Locale.getDefault());", "diff": "diff --git a/source/org/jfree/data/time/Week.java b/source/org/jfree/data/time/Week.java\nindex 3cc4138..8df5ddc 100644\n--- a/source/org/jfree/data/time/Week.java\n+++ b/source/org/jfree/data/time/Week.java\n@@ -172,7 +172,7 @@ public class Week extends RegularTimePeriod implements Serializable {\n      */\n     public Week(Date time, TimeZone zone) {\n         // defer argument checking...\n-        this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n+ this(time, zone, Locale.getDefault());\n     }\n \n     /**"}
{"project": "Chart", "bug_id": "9", "eval": "PASS", "attempt": 19, "mode": "SL", "patch": " if (endIndex < startIndex) {", "diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 4067e3e..98f06a0 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -941,7 +941,7 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             endIndex = -(endIndex + 1); // this is first item AFTER end period\n             endIndex = endIndex - 1;    // so this is last item BEFORE end\n         }\n-        if (endIndex < 0) {\n+ if (endIndex < startIndex) {\n             emptyRange = true;\n         }\n         if (emptyRange) {"}
{"project": "Chart", "bug_id": "10", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Chart", "bug_id": "11", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": " PathIterator iterator2 = p2.getPathIterator(null);", "diff": "diff --git a/source/org/jfree/chart/util/ShapeUtilities.java b/source/org/jfree/chart/util/ShapeUtilities.java\nindex 31aa6c6..a187458 100644\n--- a/source/org/jfree/chart/util/ShapeUtilities.java\n+++ b/source/org/jfree/chart/util/ShapeUtilities.java\n@@ -272,7 +272,7 @@ public class ShapeUtilities {\n             return false;\n         }\n         PathIterator iterator1 = p1.getPathIterator(null);\n-        PathIterator iterator2 = p1.getPathIterator(null);\n+ PathIterator iterator2 = p2.getPathIterator(null);\n         double[] d1 = new double[6];\n         double[] d2 = new double[6];\n         boolean done = iterator1.isDone() && iterator2.isDone();"}
{"project": "Chart", "bug_id": "12", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Chart", "bug_id": "13", "eval": "PASS", "attempt": 6, "mode": "SL", "patch": " new Range(0.0, constraint.getWidth()),", "diff": "diff --git a/source/org/jfree/chart/block/BorderArrangement.java b/source/org/jfree/chart/block/BorderArrangement.java\nindex 730aeb3..e3215c5 100644\n--- a/source/org/jfree/chart/block/BorderArrangement.java\n+++ b/source/org/jfree/chart/block/BorderArrangement.java\n@@ -452,7 +452,7 @@ public class BorderArrangement implements Arrangement, Serializable {\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth() - w[2]),\n+ new Range(0.0, constraint.getWidth()),\n                     LengthConstraintType.RANGE, h[2], null,\n                     LengthConstraintType.FIXED);\n             Size2D size = this.rightBlock.arrange(g2, c4);"}
{"project": "Chart", "bug_id": "17", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Chart", "bug_id": "20", "eval": "PASS", "attempt": 8, "mode": "SL", "patch": " super(paint, stroke, outlinePaint, outlineStroke, alpha);", "diff": "diff --git a/source/org/jfree/chart/plot/ValueMarker.java b/source/org/jfree/chart/plot/ValueMarker.java\nindex 075683d..e0aef40 100644\n--- a/source/org/jfree/chart/plot/ValueMarker.java\n+++ b/source/org/jfree/chart/plot/ValueMarker.java\n@@ -92,7 +92,7 @@ public class ValueMarker extends Marker {\n      */\n     public ValueMarker(double value, Paint paint, Stroke stroke, \n                        Paint outlinePaint, Stroke outlineStroke, float alpha) {\n-        super(paint, stroke, paint, stroke, alpha);\n+ super(paint, stroke, outlinePaint, outlineStroke, alpha);\n         this.value = value;\n     }\n     "}
{"project": "Chart", "bug_id": "23", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Chart", "bug_id": "24", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Chart", "bug_id": "26", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "2", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "3", "eval": "PASS", "attempt": 2, "mode": "SH", "patch": " return Double.parseDouble(str);\n", "diff": "diff --git a/src/java/org/apache/commons/cli/TypeHandler.java b/src/java/org/apache/commons/cli/TypeHandler.java\nindex addf90b..8127813 100644\n--- a/src/java/org/apache/commons/cli/TypeHandler.java\n+++ b/src/java/org/apache/commons/cli/TypeHandler.java\n@@ -158,7 +158,8 @@ public class TypeHandler {\n     {\n         try\n         {\n-            return org.apache.commons.lang.math.NumberUtils.createNumber(str);\n+ return Double.parseDouble(str);\n+\n         }\n         catch (NumberFormatException nfe)\n         {"}
{"project": "Cli", "bug_id": "4", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "5", "eval": "PASS", "attempt": 12, "mode": "SH", "patch": " if (str == null || str.length() <= 1)\n         return str;\n", "diff": "diff --git a/src/java/org/apache/commons/cli/Util.java b/src/java/org/apache/commons/cli/Util.java\nindex 2d88c30..d0b3aac 100644\n--- a/src/java/org/apache/commons/cli/Util.java\n+++ b/src/java/org/apache/commons/cli/Util.java\n@@ -33,6 +33,9 @@ class Util {\n      */\n     static String stripLeadingHyphens(String str)\n     {\n+ if (str == null || str.length() <= 1)\n+         return str;\n+\n         if (str.startsWith(\"--\"))\n         {\n             return str.substring(2, str.length());\n@@ -64,4 +67,4 @@ class Util {\n         }\n         return str;\n     }\n-}\n\\ No newline at end of file\n+}"}
{"project": "Cli", "bug_id": "8", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": " pos = findWrapPos(text, width, 0);", "diff": "diff --git a/src/java/org/apache/commons/cli/HelpFormatter.java b/src/java/org/apache/commons/cli/HelpFormatter.java\nindex 639b9d5..184006f 100644\n--- a/src/java/org/apache/commons/cli/HelpFormatter.java\n+++ b/src/java/org/apache/commons/cli/HelpFormatter.java\n@@ -809,7 +809,7 @@ public class HelpFormatter {\n         while (true)\n         {\n             text = padding + text.substring(pos).trim();\n-            pos = findWrapPos(text, width, nextLineTabStop);\n+ pos = findWrapPos(text, width, 0);\n \n             if (pos == -1)\n             {"}
{"project": "Cli", "bug_id": "9", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "11", "eval": "PASS", "attempt": 16, "mode": "SL", "patch": " if (option.hasArg() && (option.getArgName().length() > 0))", "diff": "diff --git a/src/java/org/apache/commons/cli/HelpFormatter.java b/src/java/org/apache/commons/cli/HelpFormatter.java\nindex 183cae3..fa7aa61 100644\n--- a/src/java/org/apache/commons/cli/HelpFormatter.java\n+++ b/src/java/org/apache/commons/cli/HelpFormatter.java\n@@ -629,7 +629,7 @@ public class HelpFormatter {\n         }\n \n         // if the Option has a value\n-        if (option.hasArg() && (option.getArgName() != null))\n+ if (option.hasArg() && (option.getArgName().length() > 0))\n         {\n             buff.append(\" <\").append(option.getArgName()).append(\">\");\n         }"}
{"project": "Cli", "bug_id": "12", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "14", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "15", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "17", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "19", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "20", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "24", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "25", "eval": "PASS", "attempt": 9, "mode": "SL", "patch": " nextLineTabStop = Math.min(width, 0) + 1;", "diff": "diff --git a/src/java/org/apache/commons/cli/HelpFormatter.java b/src/java/org/apache/commons/cli/HelpFormatter.java\nindex 028ff5c..2f20041 100644\n--- a/src/java/org/apache/commons/cli/HelpFormatter.java\n+++ b/src/java/org/apache/commons/cli/HelpFormatter.java\n@@ -822,7 +822,7 @@ public class HelpFormatter\n         if (nextLineTabStop >= width)\n         {\n             // stops infinite loop happening\n-            nextLineTabStop = width - 1;\n+ nextLineTabStop = Math.min(width, 0) + 1;\n         }\n \n         // all following lines must be padded with nextLineTabStop space "}
{"project": "Cli", "bug_id": "26", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "27", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "28", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "29", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "32", "eval": "PASS", "attempt": 1, "mode": "SH", "patch": " while ((pos >= text.length()) && ((c = text.charAt(pos)) != ' ')\n            && (c != '\\n') && (c != '\\r'))\n     {\n         --pos;\n     }\n", "diff": "diff --git a/src/main/java/org/apache/commons/cli/HelpFormatter.java b/src/main/java/org/apache/commons/cli/HelpFormatter.java\nindex 6b74e4e..cfcec5c 100644\n--- a/src/main/java/org/apache/commons/cli/HelpFormatter.java\n+++ b/src/main/java/org/apache/commons/cli/HelpFormatter.java\n@@ -934,11 +934,12 @@ public class HelpFormatter\n         \n         // if we didn't find one, simply chop at startPos+width\n         pos = startPos + width;\n-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')\n-               && (c != '\\n') && (c != '\\r'))\n-        {\n-            ++pos;\n-        }        \n+ while ((pos >= text.length()) && ((c = text.charAt(pos)) != ' ')\n+            && (c != '\\n') && (c != '\\r'))\n+     {\n+         --pos;\n+     }\n+\n         return pos == text.length() ? -1 : pos;\n     }\n "}
{"project": "Cli", "bug_id": "35", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "37", "eval": "PASS", "attempt": 6, "mode": "SF", "patch": " private boolean isShortOption(String token)\n     {\n        return token.length() > 1 && token.startsWith(\"-\") && options.hasShortOption(token.substring(1));\n     }\n", "diff": "diff --git a/src/main/java/org/apache/commons/cli/DefaultParser.java b/src/main/java/org/apache/commons/cli/DefaultParser.java\nindex 6aeaebe..8526d45 100644\n--- a/src/main/java/org/apache/commons/cli/DefaultParser.java\n+++ b/src/main/java/org/apache/commons/cli/DefaultParser.java\n@@ -296,13 +296,11 @@ public class DefaultParser implements CommandLineParser\n      * \n      * @param token\n      */\n-    private boolean isShortOption(String token)\n-    {\n-        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n-        return token.startsWith(\"-\") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));\n+ private boolean isShortOption(String token)\n+     {\n+        return token.length() > 1 && token.startsWith(\"-\") && options.hasShortOption(token.substring(1));\n+     }\n \n-        // remove leading \"-\" and \"=value\"\n-    }\n \n     /**\n      * Tells if the token looks like a long option."}
{"project": "Cli", "bug_id": "38", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Cli", "bug_id": "40", "eval": "PASS", "attempt": 2, "mode": "SL", "patch": " throw new ParseException(\"Argument must be of a supported type: 'String', 'Integer', 'Double', 'Float', 'Boolean', 'File', 'Dir', 'URL'.\");", "diff": "diff --git a/src/main/java/org/apache/commons/cli/TypeHandler.java b/src/main/java/org/apache/commons/cli/TypeHandler.java\nindex 6bd84b0..3303c5f 100644\n--- a/src/main/java/org/apache/commons/cli/TypeHandler.java\n+++ b/src/main/java/org/apache/commons/cli/TypeHandler.java\n@@ -100,7 +100,7 @@ public class TypeHandler\n         }\n         else\n         {\n-            return null;\n+ throw new ParseException(\"Argument must be of a supported type: 'String', 'Integer', 'Double', 'Float', 'Boolean', 'File', 'Dir', 'URL'.\");\n         }\n     }\n "}
{"project": "Closure", "bug_id": "1", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "2", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "4", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "5", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "7", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "10", "eval": "PASS", "attempt": 5, "mode": "SL", "patch": " return mayBeStringHelper(n);", "diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..c980043f 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1414,7 +1414,7 @@ public final class NodeUtil {\n \n   static boolean mayBeString(Node n, boolean recurse) {\n     if (recurse) {\n-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n+ return mayBeStringHelper(n);\n     } else {\n       return mayBeStringHelper(n);\n     }"}
{"project": "Closure", "bug_id": "11", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "12", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "13", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "14", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "15", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "18", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": " if (options.dependencyOptions.needsManagement()) {", "diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 8898f77f..609e3f17 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -1285,7 +1285,7 @@ public class Compiler extends AbstractCompiler {\n \n       // Check if the sources need to be re-ordered.\n       boolean staleInputs = false;\n-      if (options.dependencyOptions.needsManagement() && options.closurePass) {\n+ if (options.dependencyOptions.needsManagement()) {\n         for (CompilerInput input : inputs) {\n           // Forward-declare all the provided types, so that they\n           // are not flagged even if they are dropped from the process."}
{"project": "Closure", "bug_id": "19", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "20", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "21", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "22", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "23", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "24", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "25", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "29", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "31", "eval": "PASS", "attempt": 10, "mode": "SL", "patch": " // Built-in classes use Class.toString() to identify static", "diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b76bbb5c..93604aa0 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -1282,7 +1282,7 @@ public class Compiler extends AbstractCompiler {\n \n       // Check if the sources need to be re-ordered.\n       if (options.dependencyOptions.needsManagement() &&\n-          !options.skipAllPasses &&\n+ // Built-in classes use Class.toString() to identify static\n           options.closurePass) {\n         for (CompilerInput input : inputs) {\n           // Forward-declare all the provided types, so that they"}
{"project": "Closure", "bug_id": "32", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "33", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "35", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "36", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "38", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "39", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "40", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "42", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "44", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "48", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "50", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "52", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "53", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "55", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "56", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "57", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "58", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "59", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "61", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "62", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "65", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "66", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "67", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "69", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "70", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "71", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "73", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "77", "eval": "PASS", "attempt": 11, "mode": "SL", "patch": " case '\\0': sb.append(\"\\\\0\"); break;", "diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 8cd3ab9d..57329aa6 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -963,6 +963,7 @@ class CodeGenerator {\n     for (int i = 0; i < s.length(); i++) {\n       char c = s.charAt(i);\n       switch (c) {\n+ case '\\0': sb.append(\"\\\\0\"); break;\n         case '\\n': sb.append(\"\\\\n\"); break;\n         case '\\r': sb.append(\"\\\\r\"); break;\n         case '\\t': sb.append(\"\\\\t\"); break;"}
{"project": "Closure", "bug_id": "78", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "80", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "81", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "82", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "83", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "86", "eval": "PASS", "attempt": 2, "mode": "SL", "patch": " return isSimpleOperator(value) && isImmutableValue(value);", "diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex dd78f900..a09de653 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -2462,7 +2462,7 @@ public final class NodeUtil {\n         // TODO(nicksantos): This needs to be changed so that it\n         // returns true iff we're sure the value was never aliased from inside\n         // the constructor (similar to callHasLocalResult)\n-        return true;\n+ return isSimpleOperator(value) && isImmutableValue(value);\n       case Token.FUNCTION:\n       case Token.REGEXP:\n       case Token.ARRAYLIT:"}
{"project": "Closure", "bug_id": "87", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "88", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "91", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "92", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": " int indexOfDot = namespace.lastIndexOf('.');", "diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex c929a363..52518580 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -786,7 +786,7 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n         } else {\n           // In this case, the name was implicitly provided by two independent\n           // modules. We need to move this code up to a common module.\n-          int indexOfDot = namespace.indexOf('.');\n+ int indexOfDot = namespace.lastIndexOf('.');\n           if (indexOfDot == -1) {\n             // Any old place is fine.\n             compiler.getNodeForCodeInsertion(minimumModule)"}
{"project": "Closure", "bug_id": "94", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "95", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "96", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "97", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "99", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "101", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "102", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "104", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "105", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "107", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "109", "eval": "PASS", "attempt": 5, "mode": "SH", "patch": " return parseTypeExpression(token);\n", "diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..385edccf 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,8 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+ return parseTypeExpression(token);\n+\n   }\n \n   /**"}
{"project": "Closure", "bug_id": "111", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "113", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "114", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "115", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "116", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "117", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "118", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "119", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "120", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "121", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "122", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "123", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "124", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "125", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "126", "eval": "PASS", "attempt": 7, "mode": "SH", "patch": " if (NodeUtil.hasFinally(n)) {\n        Node finallyBlock = n.getFirstChild();\n        tryMinimizeExits(finallyBlock, exitType, labelName);\n      }\n", "diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..b958b906 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,10 +138,11 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n-      if (NodeUtil.hasFinally(n)) {\n-        Node finallyBlock = n.getLastChild();\n+ if (NodeUtil.hasFinally(n)) {\n+        Node finallyBlock = n.getFirstChild();\n         tryMinimizeExits(finallyBlock, exitType, labelName);\n       }\n+\n     }\n \n     // Just a 'label'."}
{"project": "Closure", "bug_id": "128", "eval": "PASS", "attempt": 15, "mode": "SF", "patch": " static boolean isSimpleNumber(String s) {\n        int len = s.length();\n        for (int index = 0; index < len; index++) {\n            char c = s.charAt(index);\n            if (c < '0' || c > '9') {\n                return false;\n            }\n        }\n        if(len > 1 && s.charAt(0) == '0') {\n            return false;\n        }\n        return len > 0;\n    }\n", "diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 2270c172..7ed90749 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -780,16 +780,20 @@ class CodeGenerator {\n     } while (current != n);\n   }\n \n-  static boolean isSimpleNumber(String s) {\n-    int len = s.length();\n-    for (int index = 0; index < len; index++) {\n-      char c = s.charAt(index);\n-      if (c < '0' || c > '9') {\n-        return false;\n-      }\n+ static boolean isSimpleNumber(String s) {\n+        int len = s.length();\n+        for (int index = 0; index < len; index++) {\n+            char c = s.charAt(index);\n+            if (c < '0' || c > '9') {\n+                return false;\n+            }\n+        }\n+        if(len > 1 && s.charAt(0) == '0') {\n+            return false;\n+        }\n+        return len > 0;\n     }\n-    return len > 0 && s.charAt(0) != '0';\n-  }\n+\n \n   static double getSimpleNumber(String s) {\n     if (isSimpleNumber(s)) {"}
{"project": "Closure", "bug_id": "129", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "130", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "131", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "132", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "133", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "140", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "145", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "146", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "150", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "152", "eval": "PASS", "attempt": 14, "mode": "SH", "patch": " assert typeOfThis instanceof ObjectType;\n", "diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..cbc28e98 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,8 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+ assert typeOfThis instanceof ObjectType;\n+\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces ="}
{"project": "Closure", "bug_id": "159", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "160", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "161", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "164", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Closure", "bug_id": "168", "eval": "PASS", "attempt": 4, "mode": "SL", "patch": " if (t.inGlobalScope()) {", "diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex cf87eaaf..3c9e6125 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1993,7 +1993,7 @@ final class TypedScopeCreator implements ScopeCreator {\n         data.get(t.getScopeRoot()).recordNonEmptyReturn();\n       }\n \n-      if (t.getScopeDepth() <= 2) {\n+ if (t.inGlobalScope()) {\n         // The first-order function analyzer looks at two types of variables:\n         //\n         // 1) Local variables that are assigned in inner scopes (\"escaped vars\")"}
{"project": "Closure", "bug_id": "176", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Codec", "bug_id": "2", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Codec", "bug_id": "3", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Codec", "bug_id": "4", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Codec", "bug_id": "5", "eval": "PASS", "attempt": 13, "mode": "SH", "patch": " if (buffer == null || buffer.length - pos < decodeSize) {\n         resizeBuffer();\n     }\n", "diff": "diff --git a/src/java/org/apache/commons/codec/binary/Base64.java b/src/java/org/apache/commons/codec/binary/Base64.java\nindex 2618e5d5..d0106187 100644\n--- a/src/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/java/org/apache/commons/codec/binary/Base64.java\n@@ -583,6 +583,10 @@ public class Base64 implements BinaryEncoder, BinaryDecoder {\n         // EOF (-1) and first time '=' character is encountered in stream.\n         // This approach makes the '=' padding characters completely optional.\n         if (eof && modulus != 0) {\n+ if (buffer == null || buffer.length - pos < decodeSize) {\n+         resizeBuffer();\n+     }\n+\n             \n             x = x << 6;\n             switch (modulus) {"}
{"project": "Codec", "bug_id": "6", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Codec", "bug_id": "7", "eval": "PASS", "attempt": 13, "mode": "SL", "patch": " return StringUtils.newStringUtf8(encodeBase64(binaryData));", "diff": "diff --git a/src/java/org/apache/commons/codec/binary/Base64.java b/src/java/org/apache/commons/codec/binary/Base64.java\nindex 19a69594..b50e9e08 100644\n--- a/src/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/java/org/apache/commons/codec/binary/Base64.java\n@@ -667,7 +667,7 @@ public class Base64 implements BinaryEncoder, BinaryDecoder {\n      * @since 1.4\n      */    \n     public static String encodeBase64String(byte[] binaryData) {\n-        return StringUtils.newStringUtf8(encodeBase64(binaryData, true));\n+ return StringUtils.newStringUtf8(encodeBase64(binaryData));\n     }\n     \n     /**"}
{"project": "Codec", "bug_id": "9", "eval": "PASS", "attempt": 19, "mode": "SL", "patch": " long len = binaryData.length;", "diff": "diff --git a/src/java/org/apache/commons/codec/binary/Base64.java b/src/java/org/apache/commons/codec/binary/Base64.java\nindex 2cd0163b..f29746ad 100644\n--- a/src/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/java/org/apache/commons/codec/binary/Base64.java\n@@ -824,7 +824,7 @@ public class Base64 implements BinaryEncoder, BinaryDecoder {\n             return binaryData;\n         }\n \n-        long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n+ long len = binaryData.length;\n         if (len > maxResultSize) {\n             throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                 len +"}
{"project": "Codec", "bug_id": "10", "eval": "PASS", "attempt": 4, "mode": "SL", "patch": " txt = txt.replaceAll(\"mb$\", \"M2\");", "diff": "diff --git a/src/java/org/apache/commons/codec/language/Caverphone.java b/src/java/org/apache/commons/codec/language/Caverphone.java\nindex 5ac7e9ce..7745fe07 100644\n--- a/src/java/org/apache/commons/codec/language/Caverphone.java\n+++ b/src/java/org/apache/commons/codec/language/Caverphone.java\n@@ -73,7 +73,7 @@ public class Caverphone implements StringEncoder {\n         txt = txt.replaceAll(\"^gn\", \"2n\");\n \n         // End \n-        txt = txt.replaceAll(\"^mb\", \"m2\");\n+ txt = txt.replaceAll(\"mb$\", \"M2\");\n \n         // 4. Handle replacements\n         txt = txt.replaceAll(\"cq\", \"2q\");"}
{"project": "Codec", "bug_id": "15", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Codec", "bug_id": "16", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Codec", "bug_id": "17", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Codec", "bug_id": "18", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": " return cs1.toString().equals(cs2.toString());", "diff": "diff --git a/src/main/java/org/apache/commons/codec/binary/StringUtils.java b/src/main/java/org/apache/commons/codec/binary/StringUtils.java\nindex bef55f70..8f4a8584 100644\n--- a/src/main/java/org/apache/commons/codec/binary/StringUtils.java\n+++ b/src/main/java/org/apache/commons/codec/binary/StringUtils.java\n@@ -78,7 +78,7 @@ public class StringUtils {\n         if (cs1 instanceof String && cs2 instanceof String) {\n             return cs1.equals(cs2);\n         }\n-        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n+ return cs1.toString().equals(cs2.toString());\n     }\n \n     /**"}
{"project": "Collections", "bug_id": "25", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "1", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "5", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "7", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "8", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "10", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "11", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "12", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "13", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "14", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "15", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "16", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "17", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "18", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "19", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "21", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "23", "eval": "PASS", "attempt": 8, "mode": "SL", "patch": " dictSize |= ((coder.properties[i + 1] & 0xff) << (i * 8));", "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\nindex 0bc5a1ee..a00683ce 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n@@ -109,7 +109,7 @@ class Coders {\n             byte propsByte = coder.properties[0];\n             long dictSize = coder.properties[1];\n             for (int i = 1; i < 4; i++) {\n-                dictSize |= (coder.properties[i + 1] << (8 * i));\n+ dictSize |= ((coder.properties[i + 1] & 0xff) << (i * 8));\n             }\n             if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {\n                 throw new IOException(\"Dictionary larger than 4GiB maximum size\");"}
{"project": "Compress", "bug_id": "24", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "25", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "26", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "27", "eval": "PASS", "attempt": 1, "mode": "SH", "patch": " for ( ;start < end && trailer != '\\n'; start++) {\n         final byte currentByte = buffer[start];\n         if (currentByte < '0' || currentByte > '7'){\n             throw new IllegalArgumentException(\n                     exceptionMessage(buffer, offset, length, start, currentByte));\n         }\n         result = (result << 3) + (currentByte - '0');\n     }\n", "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\nindex 4cf32d6f..d8b55bc4 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n@@ -130,10 +130,15 @@ public class TarUtils {\n             end--;\n             trailer = buffer[end - 1];\n         }\n-        if (start == end) {\n-            throw new IllegalArgumentException(\n-                    exceptionMessage(buffer, offset, length, start, trailer));\n-        }\n+ for ( ;start < end && trailer != '\\n'; start++) {\n+         final byte currentByte = buffer[start];\n+         if (currentByte < '0' || currentByte > '7'){\n+             throw new IllegalArgumentException(\n+                     exceptionMessage(buffer, offset, length, start, currentByte));\n+         }\n+         result = (result << 3) + (currentByte - '0');\n+     }\n+\n \n         for ( ;start < end; start++) {\n             final byte currentByte = buffer[start];"}
{"project": "Compress", "bug_id": "28", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "30", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "31", "eval": "PASS", "attempt": 1, "mode": "SH", "patch": " if (currentByte < '0' || currentByte > '7') {\n         throw new IllegalArgumentException(\n                 exceptionMessage(buffer, offset, length, start, currentByte));\n     }\n", "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\nindex 40e7871f..bfb57bbf 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n@@ -132,9 +132,11 @@ public class TarUtils {\n \n         for ( ;start < end; start++) {\n             final byte currentByte = buffer[start];\n-            if (currentByte == 0) {\n-                break;\n-            }\n+ if (currentByte < '0' || currentByte > '7') {\n+         throw new IllegalArgumentException(\n+                 exceptionMessage(buffer, offset, length, start, currentByte));\n+     }\n+\n             // CheckStyle:MagicNumber OFF\n             if (currentByte < '0' || currentByte > '7'){\n                 throw new IllegalArgumentException("}
{"project": "Compress", "bug_id": "32", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "35", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "36", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "37", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "38", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "40", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "41", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "44", "eval": "PASS", "attempt": 3, "mode": "SF", "patch": " public ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) throws NullPointerException {\n\n        if(checksum == null || in == null) {\n            throw new NullPointerException();\n        }\n\n        this.checksum = checksum;\n        this.in = in;\n    }\n", "diff": "diff --git a/src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java b/src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java\nindex 10c7d68d..ae41df1a 100644\n--- a/src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java\n@@ -30,14 +30,17 @@ public class ChecksumCalculatingInputStream extends InputStream {\n     private final InputStream in;\n     private final Checksum checksum;\n \n-    public ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) {\n-\n+ public ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) throws NullPointerException {\n \n+        if(checksum == null || in == null) {\n+            throw new NullPointerException();\n+        }\n \n         this.checksum = checksum;\n         this.in = in;\n     }\n \n+\n     /**\n      * Reads a single byte from the stream\n      * @throws IOException if the underlying stream throws or the"}
{"project": "Compress", "bug_id": "45", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Compress", "bug_id": "46", "eval": "PASS", "attempt": 14, "mode": "SH", "patch": " if (l > 2147483647L) {\n", "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java b/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java\nindex f7a74406..ec498fe9 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java\n@@ -526,8 +526,8 @@ private static ZipLong dateToZipLong(final Date d) {\n     }\n \n     private static ZipLong unixTimeToZipLong(long l) {\n-        final long TWO_TO_32 = 0x100000000L;\n-        if (l >= TWO_TO_32) {\n+ if (l > 2147483647L) {\n+\n             throw new IllegalArgumentException(\"X5455 timestamps must fit in a signed 32 bit integer: \" + l);\n         }\n         return new ZipLong(l);"}
{"project": "Csv", "bug_id": "1", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Csv", "bug_id": "2", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Csv", "bug_id": "3", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Csv", "bug_id": "4", "eval": "PASS", "attempt": 4, "mode": "SL", "patch": " return this.headerMap;", "diff": "diff --git a/src/main/java/org/apache/commons/csv/CSVParser.java b/src/main/java/org/apache/commons/csv/CSVParser.java\nindex 9d56f1a..6ca7c68 100644\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n@@ -285,7 +285,7 @@ public final class CSVParser implements Iterable<CSVRecord>, Closeable {\n      * @return a copy of the header map that iterates in column order.\n      */\n     public Map<String, Integer> getHeaderMap() {\n-        return new LinkedHashMap<String, Integer>(this.headerMap);\n+ return this.headerMap;\n     }\n \n     /**"}
{"project": "Csv", "bug_id": "5", "eval": "PASS", "attempt": 18, "mode": "SF", "patch": " public void println() throws IOException {\n           final String recordSeparator = format.getRecordSeparator();\n           if(recordSeparator == null) {\n               out.append('\\n');\n               newRecord = true;\n           } else {\n               out.append(recordSeparator);\n               newRecord = true;\n           }\n     }\n", "diff": "diff --git a/src/main/java/org/apache/commons/csv/CSVPrinter.java b/src/main/java/org/apache/commons/csv/CSVPrinter.java\nindex 3255360..79cdf39 100644\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n@@ -320,11 +320,17 @@ public final class CSVPrinter implements Flushable, Closeable {\n      * @throws IOException\n      *             If an I/O error occurs\n      */\n-    public void println() throws IOException {\n-        final String recordSeparator = format.getRecordSeparator();\n-            out.append(recordSeparator);\n-        newRecord = true;\n-    }\n+ public void println() throws IOException {\n+           final String recordSeparator = format.getRecordSeparator();\n+           if(recordSeparator == null) {\n+               out.append('\\n');\n+               newRecord = true;\n+           } else {\n+               out.append(recordSeparator);\n+               newRecord = true;\n+           }\n+     }\n+\n \n     /**\n      * Prints a single line of delimiter separated values. The values will be quoted if needed. Quotes and newLine"}
{"project": "Csv", "bug_id": "6", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Csv", "bug_id": "9", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Csv", "bug_id": "10", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Csv", "bug_id": "11", "eval": "PASS", "attempt": 4, "mode": "SL", "patch": " final boolean emptyHeader = header == null || header.trim().isEmpty();", "diff": "diff --git a/src/main/java/org/apache/commons/csv/CSVParser.java b/src/main/java/org/apache/commons/csv/CSVParser.java\nindex b6867a4..9eb5c98 100644\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n@@ -381,7 +381,7 @@ public final class CSVParser implements Iterable<CSVRecord>, Closeable {\n                 for (int i = 0; i < headerRecord.length; i++) {\n                     final String header = headerRecord[i];\n                     final boolean containsHeader = hdrMap.containsKey(header);\n-                    final boolean emptyHeader = header.trim().isEmpty();\n+ final boolean emptyHeader = header == null || header.trim().isEmpty();\n                     if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {\n                         throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header +\n                                 \"\\\" in \" + Arrays.toString(headerRecord));"}
{"project": "Csv", "bug_id": "14", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Csv", "bug_id": "15", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Gson", "bug_id": "5", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Gson", "bug_id": "6", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Gson", "bug_id": "10", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Gson", "bug_id": "11", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Gson", "bug_id": "12", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Gson", "bug_id": "13", "eval": "PASS", "attempt": 8, "mode": "SL", "patch": " if (last == NUMBER_CHAR_DIGIT && fitsInLong && value != 0) {", "diff": "diff --git a/gson/src/main/java/com/google/gson/stream/JsonReader.java b/gson/src/main/java/com/google/gson/stream/JsonReader.java\nindex 877742bf..4902377c 100644\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n@@ -728,7 +728,7 @@ public class JsonReader implements Closeable {\n     }\n \n     // We've read a complete number. Decide if it's a PEEKED_LONG or a PEEKED_NUMBER.\n-    if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {\n+ if (last == NUMBER_CHAR_DIGIT && fitsInLong && value != 0) {\n       peekedLong = negative ? value : -value;\n       pos += i;\n       return peeked = PEEKED_LONG;"}
{"project": "Gson", "bug_id": "15", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Gson", "bug_id": "16", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Gson", "bug_id": "17", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Gson", "bug_id": "18", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonCore", "bug_id": "3", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonCore", "bug_id": "4", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonCore", "bug_id": "5", "eval": "PASS", "attempt": 3, "mode": "SL", "patch": " char c = str.charAt(i);", "diff": "diff --git a/src/main/java/com/fasterxml/jackson/core/JsonPointer.java b/src/main/java/com/fasterxml/jackson/core/JsonPointer.java\nindex d353b392..7b879a37 100644\n--- a/src/main/java/com/fasterxml/jackson/core/JsonPointer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonPointer.java\n@@ -190,7 +190,7 @@ public class JsonPointer\n             return -1;\n         }\n         for (int i = 0; i < len; ++i) {\n-            char c = str.charAt(i++);\n+ char c = str.charAt(i);\n             if (c > '9' || c < '0') {\n                 return -1;\n             }"}
{"project": "JacksonCore", "bug_id": "6", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JacksonCore", "bug_id": "7", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JacksonCore", "bug_id": "8", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JacksonCore", "bug_id": "11", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JacksonCore", "bug_id": "15", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonCore", "bug_id": "17", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JacksonCore", "bug_id": "20", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JacksonCore", "bug_id": "21", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonCore", "bug_id": "23", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JacksonCore", "bug_id": "25", "eval": "PASS", "attempt": 6, "mode": "SL", "patch": " if (i < maxCode) {", "diff": "diff --git a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\nindex 2c1f5a23..50ffb48e 100644\n--- a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n@@ -1960,7 +1960,7 @@ public class ReaderBasedJsonParser // final in 2.3, earlier\n             }\n             char c = _inputBuffer[_inputPtr];\n             int i = (int) c;\n-            if (i <= maxCode) {\n+ if (i < maxCode) {\n                 if (codes[i] != 0) {\n                     break;\n                 }"}
{"project": "JacksonCore", "bug_id": "26", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "1", "eval": "PASS", "attempt": 16, "mode": "SL", "patch": " return; ", "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\nindex 45db172b8..5787c7896 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n@@ -589,6 +589,7 @@ public class BeanPropertyWriter\n             } else { // can NOT suppress entries in tabular output\n                 jgen.writeNull();\n             }\n+ return; \n         }\n         // otherwise find serializer to use\n         JsonSerializer<Object> ser = _serializer;"}
{"project": "JacksonDatabind", "bug_id": "5", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "6", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "7", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "8", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "11", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "12", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "16", "eval": "PASS", "attempt": 9, "mode": "SL", "patch": " return previous == null || !previous.equals(ann);", "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap.java b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap.java\nindex f9cc5cb19..828f3d27c 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap.java\n@@ -109,8 +109,6 @@ public final class AnnotationMap implements Annotations\n             _annotations = new HashMap<Class<? extends Annotation>,Annotation>();\n         }\n         Annotation previous = _annotations.put(ann.annotationType(), ann);\n-        return (previous != null) && previous.equals(ann);\n+ return previous == null || !previous.equals(ann);\n     }\n }\n-\n-"}
{"project": "JacksonDatabind", "bug_id": "17", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "19", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "24", "eval": "PASS", "attempt": 10, "mode": "SF", "patch": " public BaseSettings withDateFormat(DateFormat df) {\n        if (_dateFormat == df) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, df, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }\n", "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java b/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java\nindex cd2da6187..4e6fc6294 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java\n@@ -227,16 +227,17 @@ public final class BaseSettings\n                 _timeZone, _defaultBase64);\n     }\n     \n-    public BaseSettings withDateFormat(DateFormat df) {\n+\n+ public BaseSettings withDateFormat(DateFormat df) {\n         if (_dateFormat == df) {\n             return this;\n         }\n-        TimeZone tz = (df == null) ? _timeZone : df.getTimeZone();\n         return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                 _typeResolverBuilder, df, _handlerInstantiator, _locale,\n-                tz, _defaultBase64);\n+                _timeZone, _defaultBase64);\n     }\n \n+\n     public BaseSettings withHandlerInstantiator(HandlerInstantiator hi) {\n         if (_handlerInstantiator == hi) {\n             return this;"}
{"project": "JacksonDatabind", "bug_id": "26", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "27", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": " if (ext.handlePropertyValue(p, ctxt, propName, null)) {", "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\nindex fc7961de5..8b59e8a8f 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n@@ -791,7 +791,7 @@ public class BeanDeserializer\n                 // first: let's check to see if this might be part of value with external type id:\n                 // 11-Sep-2015, tatu: Important; do NOT pass buffer as last arg, but null,\n                 //   since it is not the bean\n-                if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n+ if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n                     ;\n                 } else {\n                     // Last creator property to set?"}
{"project": "JacksonDatabind", "bug_id": "28", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "34", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "35", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "37", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "39", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "42", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "45", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "46", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "47", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "49", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "51", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "54", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "57", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "58", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "62", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "63", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "64", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "67", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "70", "eval": "PASS", "attempt": 6, "mode": "SL", "patch": " found = key.equalsIgnoreCase(prop.getName());", "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\nindex dc791897b..042938e4b 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\n@@ -437,7 +437,7 @@ System.err.println(\"And new propr #\"+slot+\" '\"+key+\"'\");\n             if (!found) {\n                 // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,\n                 //   as only former is lower-case in case-insensitive case\n-                found = key.equals(prop.getName());\n+ found = key.equalsIgnoreCase(prop.getName());\n                 if (found) {\n                     // need to leave a hole here\n                     _propsInOrder[_findFromOrdered(prop)] = null;"}
{"project": "JacksonDatabind", "bug_id": "74", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "76", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "82", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "83", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "85", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "88", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "89", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "91", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "92", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "96", "eval": "PASS", "attempt": 19, "mode": "SL", "patch": " paramName = candidate.paramName(0);", "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\nindex 7057c5427..9f77098cb 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n@@ -732,7 +732,7 @@ nonAnnotatedParamIndex, ctor);\n             // 25-May-2018, tatu: as per [databind#2051], looks like we have to get\n             //    not implicit name, but name with possible strategy-based-rename\n //            paramName = candidate.findImplicitParamName(0);\n-            paramName = candidate.findImplicitParamName(0);\n+ paramName = candidate.paramName(0);\n             useProps = (paramName != null) && paramDef.couldSerialize();\n         }\n         if (useProps) {"}
{"project": "JacksonDatabind", "bug_id": "97", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "99", "eval": "PASS", "attempt": 2, "mode": "SL", "patch": " sb.append('>');", "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java b/src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java\nindex 4add34ee0..e0075f14b 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java\n@@ -166,6 +166,7 @@ public class ReferenceType extends SimpleType\n         sb.append(_class.getName());\n         sb.append('<');\n         sb.append(_referencedType.toCanonical());\n+ sb.append('>');\n         return sb.toString();\n     }\n "}
{"project": "JacksonDatabind", "bug_id": "100", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "101", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "102", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "107", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JacksonDatabind", "bug_id": "112", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonXml", "bug_id": "1", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonXml", "bug_id": "3", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonXml", "bug_id": "4", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JacksonXml", "bug_id": "5", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "1", "eval": "PASS", "attempt": 11, "mode": "SH", "patch": " body().prependChild(new TextNode(\" \", \"\"));\n     body().prependChild(node);\n", "diff": "diff --git a/src/main/java/org/jsoup/nodes/Document.java b/src/main/java/org/jsoup/nodes/Document.java\nindex bc0f650..88c3a9a 100644\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n@@ -122,8 +122,9 @@ public class Document extends Element {\n \n         for (Node node: toMove) {\n             element.removeChild(node);\n-            body().appendChild(new TextNode(\" \", \"\"));\n-            body().appendChild(node);\n+ body().prependChild(new TextNode(\" \", \"\"));\n+     body().prependChild(node);\n+\n         }\n     }\n \n@@ -148,4 +149,3 @@ public class Document extends Element {\n         return \"#document\";\n     }\n }\n-"}
{"project": "Jsoup", "bug_id": "2", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "4", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "5", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "6", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "10", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "13", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "15", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "19", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "20", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "24", "eval": "PASS", "attempt": 18, "mode": "SL", "patch": " t.tagPending.appendTagName(name.toLowerCase());", "diff": "diff --git a/src/main/java/org/jsoup/parser/TokeniserState.java b/src/main/java/org/jsoup/parser/TokeniserState.java\nindex e530264..e00c2f7 100644\n--- a/src/main/java/org/jsoup/parser/TokeniserState.java\n+++ b/src/main/java/org/jsoup/parser/TokeniserState.java\n@@ -555,7 +555,7 @@ enum TokeniserState {\n                 String name = r.consumeLetterSequence();\n                 t.tagPending.appendTagName(name.toLowerCase());\n                 t.dataBuffer.append(name);\n-                r.advance();\n+ t.tagPending.appendTagName(name.toLowerCase());\n                 return;\n             }\n "}
{"project": "Jsoup", "bug_id": "25", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "26", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "27", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "32", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "33", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "34", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "35", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "37", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "38", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "39", "eval": "PASS", "attempt": 16, "mode": "SL", "patch": " doc = parser.parseInput(docData, baseUri);", "diff": "diff --git a/src/main/java/org/jsoup/helper/DataUtil.java b/src/main/java/org/jsoup/helper/DataUtil.java\nindex d43bfe4..31b5835 100644\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n@@ -116,6 +116,7 @@ public class DataUtil {\n             docData = Charset.forName(defaultCharset).decode(byteData).toString();\n             docData = docData.substring(1);\n             charsetName = defaultCharset;\n+ doc = parser.parseInput(docData, baseUri);\n         }\n         if (doc == null) {\n             doc = parser.parseInput(docData, baseUri);"}
{"project": "Jsoup", "bug_id": "40", "eval": "PASS", "attempt": 3, "mode": "SL", "patch": "attr(\"type\", name);", "diff": "diff --git a/src/main/java/org/jsoup/nodes/DocumentType.java b/src/main/java/org/jsoup/nodes/DocumentType.java\nindex 4b4a5e9..357585a 100644\n--- a/src/main/java/org/jsoup/nodes/DocumentType.java\n+++ b/src/main/java/org/jsoup/nodes/DocumentType.java\n@@ -19,7 +19,7 @@ public class DocumentType extends Node {\n     public DocumentType(String name, String publicId, String systemId, String baseUri) {\n         super(baseUri);\n \n-        Validate.notEmpty(name);\n+attr(\"type\", name);\n         attr(\"name\", name);\n         attr(\"publicId\", publicId);\n         attr(\"systemId\", systemId);"}
{"project": "Jsoup", "bug_id": "41", "eval": "PASS", "attempt": 3, "mode": "SL", "patch": " return this != o;", "diff": "diff --git a/src/main/java/org/jsoup/nodes/Element.java b/src/main/java/org/jsoup/nodes/Element.java\nindex cd2e86a..a1e874f 100644\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n@@ -1172,7 +1172,7 @@ public class Element extends Node {\n \n         Element element = (Element) o;\n \n-        return this == o;\n+ return this != o;\n     }\n \n     @Override"}
{"project": "Jsoup", "bug_id": "42", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "43", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "45", "eval": "PASS", "attempt": 2, "mode": "SL", "patch": " } else if ((\"td\".equals(name) || \"th\".equals(name))) {", "diff": "diff --git a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\nindex 4a58fdf..c1f2f8e 100644\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n@@ -391,7 +391,7 @@ public class HtmlTreeBuilder extends TreeBuilder {\n             if (\"select\".equals(name)) {\n                 transition(HtmlTreeBuilderState.InSelect);\n                 break; // frag\n-            } else if ((\"td\".equals(name) || \"td\".equals(name) && !last)) {\n+ } else if ((\"td\".equals(name) || \"th\".equals(name))) {\n                 transition(HtmlTreeBuilderState.InCell);\n                 break;\n             } else if (\"tr\".equals(name)) {"}
{"project": "Jsoup", "bug_id": "46", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "47", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "48", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "49", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "50", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "51", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "53", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "54", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "55", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "57", "eval": "PASS", "attempt": 2, "mode": "SL", "patch": " it.remove();", "diff": "diff --git a/src/main/java/org/jsoup/nodes/Attributes.java b/src/main/java/org/jsoup/nodes/Attributes.java\nindex 49ff25d..be6f30a 100644\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n@@ -122,7 +122,7 @@ public class Attributes implements Iterable<Attribute>, Cloneable {\n         for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) {\n             String attrKey = it.next();\n             if (attrKey.equalsIgnoreCase(key))\n-                attributes.remove(attrKey);\n+ it.remove();\n         }\n     }\n "}
{"project": "Jsoup", "bug_id": "59", "eval": "PASS", "attempt": 15, "mode": "SF", "patch": " final void newAttribute() {\n            if (attributes == null)\n                attributes = new Attributes();\n\n            if (pendingAttributeName != null) {\n                // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n                pendingAttributeName = pendingAttributeName.trim();\n                if (pendingAttributeName.isEmpty()) {\n                    return;    // control code on its own line without any attribute value\n                }\n                Attribute attribute;\n                if (hasPendingAttributeValue)\n                    attribute = new Attribute(pendingAttributeName,\n                        pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS);\n                else if (hasEmptyAttributeValue)\n                    attribute = new Attribute(pendingAttributeName, \"\");\n                else\n                    attribute = new BooleanAttribute(pendingAttributeName);\n                attributes.put(attribute);\n            }\n            pendingAttributeName = null;\n            hasEmptyAttributeValue = false;\n            hasPendingAttributeValue = false;\n            reset(pendingAttributeValue);\n            pendingAttributeValueS = null;\n        }\n", "diff": "diff --git a/src/main/java/org/jsoup/parser/Token.java b/src/main/java/org/jsoup/parser/Token.java\nindex 7dcfa2b..cb4d763 100644\n--- a/src/main/java/org/jsoup/parser/Token.java\n+++ b/src/main/java/org/jsoup/parser/Token.java\n@@ -97,22 +97,25 @@ abstract class Token {\n             return this;\n         }\n \n-        final void newAttribute() {\n+ final void newAttribute() {\n             if (attributes == null)\n                 attributes = new Attributes();\n \n             if (pendingAttributeName != null) {\n                 // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n                 pendingAttributeName = pendingAttributeName.trim();\n-                    Attribute attribute;\n-                    if (hasPendingAttributeValue)\n-                        attribute = new Attribute(pendingAttributeName,\n-                            pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS);\n-                    else if (hasEmptyAttributeValue)\n-                        attribute = new Attribute(pendingAttributeName, \"\");\n-                    else\n-                        attribute = new BooleanAttribute(pendingAttributeName);\n-                    attributes.put(attribute);\n+                if (pendingAttributeName.isEmpty()) {\n+                    return;    // control code on its own line without any attribute value\n+                }\n+                Attribute attribute;\n+                if (hasPendingAttributeValue)\n+                    attribute = new Attribute(pendingAttributeName,\n+                        pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS);\n+                else if (hasEmptyAttributeValue)\n+                    attribute = new Attribute(pendingAttributeName, \"\");\n+                else\n+                    attribute = new BooleanAttribute(pendingAttributeName);\n+                attributes.put(attribute);\n             }\n             pendingAttributeName = null;\n             hasEmptyAttributeValue = false;\n@@ -121,6 +124,7 @@ abstract class Token {\n             pendingAttributeValueS = null;\n         }\n \n+\n         final void finaliseTag() {\n             // finalises for emit\n             if (pendingAttributeName != null) {"}
{"project": "Jsoup", "bug_id": "61", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "62", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "64", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "66", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "68", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "70", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "72", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "75", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "76", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "77", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "80", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "82", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "84", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "85", "eval": "PASS", "attempt": 6, "mode": "SF", "patch": " public Attribute(String key, String val, Attributes parent) {\n        Validate.notNull(key);\n        Validate.notEmpty(key.trim());  // trimming could potentially make empty, so validate here\n        this.key = key.trim();\n        this.val = val;\n        this.parent = parent;\n    }\n", "diff": "diff --git a/src/main/java/org/jsoup/nodes/Attribute.java b/src/main/java/org/jsoup/nodes/Attribute.java\nindex 612fdeb..34e913f 100644\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n@@ -39,14 +39,15 @@ public class Attribute implements Map.Entry<String, String>, Cloneable  {\n      * @param val attribute value\n      * @param parent the containing Attributes (this Attribute is not automatically added to said Attributes)\n      * @see #createFromEncoded*/\n-    public Attribute(String key, String val, Attributes parent) {\n+ public Attribute(String key, String val, Attributes parent) {\n         Validate.notNull(key);\n+        Validate.notEmpty(key.trim());  // trimming could potentially make empty, so validate here\n         this.key = key.trim();\n-        Validate.notEmpty(key); // trimming could potentially make empty, so validate here\n         this.val = val;\n         this.parent = parent;\n     }\n \n+\n     /**\n      Get the attribute key.\n      @return the attribute key"}
{"project": "Jsoup", "bug_id": "86", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "88", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "89", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Jsoup", "bug_id": "90", "eval": "PASS", "attempt": 7, "mode": "SH", "patch": " if ((o & 0x4F) == 0x4F) {\n         end = i + 1;\n     } else if ((o & 0x7E) == 0x7E) {\n         end = i + 2;\n     } else if ((o & 0xF8) == 0xF8) {\n         end = i + 3;\n     } else {\n         return false;\n     }\n", "diff": "diff --git a/src/main/java/org/jsoup/helper/HttpConnection.java b/src/main/java/org/jsoup/helper/HttpConnection.java\nindex a941e48..e91bbad 100644\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n@@ -421,6 +421,16 @@ public class HttpConnection implements Connection {\n                     return false;\n                 }\n \n+ if ((o & 0x4F) == 0x4F) {\n+         end = i + 1;\n+     } else if ((o & 0x7E) == 0x7E) {\n+         end = i + 2;\n+     } else if ((o & 0xF8) == 0xF8) {\n+         end = i + 3;\n+     } else {\n+         return false;\n+     }\n+\n \n                 while (i < end) {\n                     i++;"}
{"project": "Jsoup", "bug_id": "93", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JxPath", "bug_id": "5", "eval": "PASS", "attempt": 14, "mode": "SH", "patch": " return p1.equals(p2) ? 0 : -1;\n", "diff": "diff --git a/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java b/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\nindex 6ff8d5f..e0b6f87 100644\n--- a/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n@@ -662,9 +662,8 @@ public abstract class NodePointer implements Pointer {\n         }\n \n         if (depth1 == 1) {\n-            throw new JXPathException(\n-                    \"Cannot compare pointers that do not belong to the same tree: '\"\n-                            + p1 + \"' and '\" + p2 + \"'\");\n+ return p1.equals(p2) ? 0 : -1;\n+\n         }\n         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n         if (r != 0) {\n@@ -703,4 +702,4 @@ public abstract class NodePointer implements Pointer {\n             printDeep(pointer.getImmediateParentPointer(), indent + \"  \");\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}
{"project": "JxPath", "bug_id": "6", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JxPath", "bug_id": "8", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "JxPath", "bug_id": "10", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "JxPath", "bug_id": "12", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JxPath", "bug_id": "21", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "JxPath", "bug_id": "22", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "1", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "3", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "5", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "6", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "9", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "10", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "11", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "12", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "14", "eval": "PASS", "attempt": 4, "mode": "SF", "patch": " public static boolean equals(CharSequence cs1, CharSequence cs2) {\n         if (cs1 == cs2) {\n             return true;\n         }\n         if (cs1 == null || cs2 == null) {\n             return false;\n         }\n           return cs1.toString().equals(cs2.toString());\n     }\n", "diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex 535a3f24..3be4ec16 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -778,15 +778,16 @@ public class StringUtils {\n      * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}\n      * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)\n      */\n-    public static boolean equals(CharSequence cs1, CharSequence cs2) {\n-        if (cs1 == cs2) {\n-            return true;\n-        }\n-        if (cs1 == null || cs2 == null) {\n-            return false;\n-        }\n-            return cs1.equals(cs2);\n-    }\n+ public static boolean equals(CharSequence cs1, CharSequence cs2) {\n+         if (cs1 == cs2) {\n+             return true;\n+         }\n+         if (cs1 == null || cs2 == null) {\n+             return false;\n+         }\n+           return cs1.toString().equals(cs2.toString());\n+     }\n+\n \n     /**\n      * <p>Compares two CharSequences, returning {@code true} if they represent"}
{"project": "Lang", "bug_id": "16", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "17", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "18", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "19", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "21", "eval": "PASS", "attempt": 3, "mode": "SL", "patch": " cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&", "diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/DateUtils.java b/src/main/java/org/apache/commons/lang3/time/DateUtils.java\nindex 9a24c00f..fc843f65 100644\n--- a/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n@@ -262,7 +262,7 @@ public class DateUtils {\n         return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n                 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n                 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n-                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n+ cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&\n                 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n                 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&"}
{"project": "Lang", "bug_id": "22", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "24", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "26", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "27", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "28", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "31", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "33", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "37", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "38", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "39", "eval": "PASS", "attempt": 3, "mode": "SH", "patch": " if (searchList[i] == null || \n        searchList[i].length() == 0 || replacementList[i] == null) \n    {\n        continue;\n    }\n", "diff": "diff --git a/src/java/org/apache/commons/lang3/StringUtils.java b/src/java/org/apache/commons/lang3/StringUtils.java\nindex 14563aa6..0dc03bdb 100644\n--- a/src/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/java/org/apache/commons/lang3/StringUtils.java\n@@ -3673,6 +3673,12 @@ public class StringUtils {\n \n         // count the replacement text elements that are larger than their corresponding text being replaced\n         for (int i = 0; i < searchList.length; i++) {\n+ if (searchList[i] == null || \n+        searchList[i].length() == 0 || replacementList[i] == null) \n+    {\n+        continue;\n+    }\n+\n             int greater = replacementList[i].length() - searchList[i].length();\n             if (greater > 0) {\n                 increase += 3 * greater; // assume 3 matches"}
{"project": "Lang", "bug_id": "40", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "42", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "43", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "44", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "45", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "48", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "49", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "51", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "52", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "53", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "54", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "55", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "57", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "58", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "59", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "61", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Lang", "bug_id": "65", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "2", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "3", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "5", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": " return new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);", "diff": "diff --git a/src/main/java/org/apache/commons/math3/complex/Complex.java b/src/main/java/org/apache/commons/math3/complex/Complex.java\nindex 22b23f24e..f7e522487 100644\n--- a/src/main/java/org/apache/commons/math3/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math3/complex/Complex.java\n@@ -302,7 +302,7 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n         }\n \n         if (real == 0.0 && imaginary == 0.0) {\n-            return NaN;\n+ return new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n         }\n \n         if (isInfinite) {"}
{"project": "Math", "bug_id": "7", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "9", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "10", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "11", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "12", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "13", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "15", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "17", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "19", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "20", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "21", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "23", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "24", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "25", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "26", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "27", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "28", "eval": "PASS", "attempt": 13, "mode": "SF", "patch": " private Integer getPivotRow(SimplexTableau tableau, final int col) {\n         // create a list of all the rows that tie for the lowest score in the minimum ratio test\n         List<Integer> minRatioPositions = new ArrayList<Integer>();\n         double minRatio = Double.MAX_VALUE;\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n             final double entry = tableau.getEntry(i, col);\n\n             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                 final double ratio = rhs / entry;\n                 // check if the entry is strictly equal to the current min ratio\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n                     minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n                     minRatioPositions.add(i);\n                 }\n             }\n         }\n\n         if (minRatioPositions.size() == 0) {\n             return null;\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n\n             // 1. check if there's an artificial variable that can be forced out of the basis\n             for (Integer row : minRatioPositions) {\n                 for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                     int column = i + tableau.getArtificialVariableOffset();\n                     final double entry = tableau.getEntry(row, column);\n                     if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                         return row;\n                     }\n                 }\n             }\n\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n             // see http://www.stanford.edu/class/msande310/blandrule.pdf\n             // see http://en.wikipedia.org/wiki/Bland%27s_rule\n\n         }\n         return minRatioPositions.get(0);\n     }\n", "diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\nindex a84438d9b..185b0c56d 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n@@ -87,71 +87,55 @@ public class SimplexSolver extends AbstractLinearOptimizer {\n      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n      * @return row with the minimum ratio\n      */\n-    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n-        // create a list of all the rows that tie for the lowest score in the minimum ratio test\n-        List<Integer> minRatioPositions = new ArrayList<Integer>();\n-        double minRatio = Double.MAX_VALUE;\n-        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n-            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n-            final double entry = tableau.getEntry(i, col);\n-\n-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n-                final double ratio = rhs / entry;\n-                // check if the entry is strictly equal to the current min ratio\n-                // do not use a ulp/epsilon check\n-                final int cmp = Double.compare(ratio, minRatio);\n-                if (cmp == 0) {\n-                    minRatioPositions.add(i);\n-                } else if (cmp < 0) {\n-                    minRatio = ratio;\n-                    minRatioPositions = new ArrayList<Integer>();\n-                    minRatioPositions.add(i);\n-                }\n-            }\n-        }\n+ private Integer getPivotRow(SimplexTableau tableau, final int col) {\n+         // create a list of all the rows that tie for the lowest score in the minimum ratio test\n+         List<Integer> minRatioPositions = new ArrayList<Integer>();\n+         double minRatio = Double.MAX_VALUE;\n+         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n+             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n+             final double entry = tableau.getEntry(i, col);\n+\n+             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+                 final double ratio = rhs / entry;\n+                 // check if the entry is strictly equal to the current min ratio\n+                 // do not use a ulp/epsilon check\n+                 final int cmp = Double.compare(ratio, minRatio);\n+                 if (cmp == 0) {\n+                     minRatioPositions.add(i);\n+                 } else if (cmp < 0) {\n+                     minRatio = ratio;\n+                     minRatioPositions = new ArrayList<Integer>();\n+                     minRatioPositions.add(i);\n+                 }\n+             }\n+         }\n+\n+         if (minRatioPositions.size() == 0) {\n+             return null;\n+         } else if (minRatioPositions.size() > 1) {\n+             // there's a degeneracy as indicated by a tie in the minimum ratio test\n+\n+             // 1. check if there's an artificial variable that can be forced out of the basis\n+             for (Integer row : minRatioPositions) {\n+                 for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n+                     int column = i + tableau.getArtificialVariableOffset();\n+                     final double entry = tableau.getEntry(row, column);\n+                     if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n+                         return row;\n+                     }\n+                 }\n+             }\n+\n+             // 2. apply Bland's rule to prevent cycling:\n+             //    take the row for which the corresponding basic variable has the smallest index\n+             //\n+             // see http://www.stanford.edu/class/msande310/blandrule.pdf\n+             // see http://en.wikipedia.org/wiki/Bland%27s_rule\n+\n+         }\n+         return minRatioPositions.get(0);\n+     }\n \n-        if (minRatioPositions.size() == 0) {\n-            return null;\n-        } else if (minRatioPositions.size() > 1) {\n-            // there's a degeneracy as indicated by a tie in the minimum ratio test\n-\n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n-            // 2. apply Bland's rule to prevent cycling:\n-            //    take the row for which the corresponding basic variable has the smallest index\n-            //\n-            // see http://www.stanford.edu/class/msande310/blandrule.pdf\n-            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n-            //\n-            // Additional heuristic: if we did not get a solution after half of maxIterations\n-            //                       revert to the simple case of just returning the top-most row\n-            // This heuristic is based on empirical data gathered while investigating MATH-828.\n-                Integer minRow = null;\n-                int minIndex = tableau.getWidth();\n-                for (Integer row : minRatioPositions) {\n-                    int i = tableau.getNumObjectiveFunctions();\n-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n-                }\n-                return minRow;\n-        }\n-        return minRatioPositions.get(0);\n-    }\n \n     /**\n      * Runs one iteration of the Simplex method on the given model."}
{"project": "Math", "bug_id": "30", "eval": "PASS", "attempt": 2, "mode": "SL", "patch": " final double n1n2prod = n1 * n2;", "diff": "diff --git a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\nindex ce694ce8f..fc42c17bb 100644\n--- a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n+++ b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n@@ -170,7 +170,7 @@ public class MannWhitneyUTest {\n                                              final int n2)\n         throws ConvergenceException, MaxCountExceededException {\n \n-        final int n1n2prod = n1 * n2;\n+ final double n1n2prod = n1 * n2;\n \n         // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n         final double EU = n1n2prod / 2.0;"}
{"project": "Math", "bug_id": "31", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "32", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": " if (Boolean.parseBoolean(tree.getAttribute().toString())) {", "diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\nindex c6e7cf18c..719cae667 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\n@@ -133,7 +133,7 @@ public class PolygonsSet extends AbstractRegion<Euclidean2D, Euclidean1D> {\n \n         if (v.length == 0) {\n             final BSPTree<Euclidean2D> tree = getTree(false);\n-            if ((Boolean) tree.getAttribute()) {\n+ if (Boolean.parseBoolean(tree.getAttribute().toString())) {\n                 // the instance covers the whole space\n                 setSize(Double.POSITIVE_INFINITY);\n                 setBarycenter(Vector2D.NaN);"}
{"project": "Math", "bug_id": "33", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "34", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "38", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "39", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "40", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "41", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "42", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "43", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "45", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "48", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "50", "eval": "PASS", "attempt": 4, "mode": "SH", "patch": " // If the current interval is within the given accuracies, we\n     // are satisfied with the current approximation.\n     if (x1 == x0) {\n         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),\n                         atol));\n         f0 = computeObjectiveValue(x0);\n     }\n", "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e47d98204..18fbda577 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -184,10 +184,14 @@ public abstract class BaseSecantSolver\n                     break;\n                 case REGULA_FALSI:\n                     // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+ // If the current interval is within the given accuracies, we\n+     // are satisfied with the current approximation.\n+     if (x1 == x0) {\n+         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),\n+                         atol));\n+         f0 = computeObjectiveValue(x0);\n+     }\n+\n                     break;\n                 default:\n                     // Should never happen."}
{"project": "Math", "bug_id": "51", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "52", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "53", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "54", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "55", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "56", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "57", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "58", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "59", "eval": "PASS", "attempt": 10, "mode": "SL", "patch": " return Math.max(a,b);", "diff": "diff --git a/src/main/java/org/apache/commons/math/util/FastMath.java b/src/main/java/org/apache/commons/math/util/FastMath.java\nindex 8cba4d484..9aa39cd79 100644\n--- a/src/main/java/org/apache/commons/math/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math/util/FastMath.java\n@@ -3479,7 +3479,7 @@ public class FastMath {\n      * @return b if a is lesser or equal to b, a otherwise\n      */\n     public static float max(final float a, final float b) {\n-        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);\n+ return Math.max(a,b);\n     }\n \n     /** Compute the maximum of two values"}
{"project": "Math", "bug_id": "60", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "63", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "64", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "69", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "70", "eval": "PASS", "attempt": 2, "mode": "SL", "patch": " return solve(f, min, max);", "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..510c21a5c 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,7 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+ return solve(f, min, max);\n     }\n \n     /** {@inheritDoc} */"}
{"project": "Math", "bug_id": "72", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "73", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "74", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "75", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "78", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "79", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "80", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": " int j = 4 * (n - 1);", "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\nindex 3fc328d8b..141450320 100644\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1132,7 +1132,7 @@ public class EigenDecompositionImpl implements EigenDecomposition {\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n-            int j = 4 * n - 1;\n+ int j = 4 * (n - 1);\n             for (int i = 0; i < j; i += 4) {\n                 for (int k = 0; k < 4; k += step) {\n                     final double tmp = work[i + k];"}
{"project": "Math", "bug_id": "82", "eval": "PASS", "attempt": 8, "mode": "SL", "patch": " if (entry > 0) {", "diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\nindex 8309d7b40..9704f0ef2 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n@@ -79,7 +79,7 @@ public class SimplexSolver extends AbstractLinearOptimizer {\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n             final double entry = tableau.getEntry(i, col);\n-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n+ if (entry > 0) {\n                 final double ratio = rhs / entry;\n                 if (ratio < minRatio) {\n                     minRatio = ratio;"}
{"project": "Math", "bug_id": "84", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "85", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": " if ((fa * fb > 0.0) && (numIterations < maximumIterations)) {", "diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..f925f9221 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -195,7 +195,7 @@ public class UnivariateRealSolverUtils {\n         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n                 ((a > lowerBound) || (b < upperBound)));\n    \n-        if (fa * fb >= 0.0 ) {\n+ if ((fa * fb > 0.0) && (numIterations < maximumIterations)) {\n             throw new ConvergenceException(\n                       \"number of iterations={0}, maximum iterations={1}, \" +\n                       \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +"}
{"project": "Math", "bug_id": "86", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "87", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "88", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "89", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "91", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "94", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "95", "eval": "PASS", "attempt": 2, "mode": "SF", "patch": " public double getInitialDomain(double p){\n        return Math.pow((p*(1-p)) / (p+1-p), -1.0);\n    }\n", "diff": "diff --git a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\nindex e19e97aef..6b9245dd7 100644\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n@@ -140,13 +140,10 @@ public class FDistributionImpl\n      * @param p the desired probability for the critical value\n      * @return initial domain value\n      */\n-    protected double getInitialDomain(double p) {\n-        double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+ public double getInitialDomain(double p){\n+        return Math.pow((p*(1-p)) / (p+1-p), -1.0);\n     }\n+\n     \n     /**\n      * Modify the numerator degrees of freedom."}
{"project": "Math", "bug_id": "96", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "97", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "101", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "102", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "103", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "104", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Math", "bug_id": "105", "eval": "PASS", "attempt": 8, "mode": "SL", "patch": " return Math.max(sumYY - sumXY * sumXY / sumXX, 0.0);", "diff": "diff --git a/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\nindex dcf512b72..a1e032ae2 100644\n--- a/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n@@ -261,7 +261,7 @@ public class SimpleRegression implements Serializable {\n      * @return sum of squared errors associated with the regression model\n      */\n     public double getSumSquaredErrors() {\n-        return sumYY - sumXY * sumXY / sumXX;\n+ return Math.max(sumYY - sumXY * sumXY / sumXX, 0.0);\n     }\n \n     /**"}
{"project": "Math", "bug_id": "106", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Mockito", "bug_id": "1", "eval": "PASS", "attempt": 8, "mode": "SH", "patch": " int varargIndex = Array.getLength(invocation.getRawArguments()) - 1;\n", "diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..c81cdb806 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,8 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+ int varargIndex = Array.getLength(invocation.getRawArguments()) - 1;\n+\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {"}
{"project": "Mockito", "bug_id": "5", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Mockito", "bug_id": "7", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Mockito", "bug_id": "8", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Mockito", "bug_id": "12", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Mockito", "bug_id": "13", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Mockito", "bug_id": "18", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Mockito", "bug_id": "20", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Mockito", "bug_id": "22", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Mockito", "bug_id": "24", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Mockito", "bug_id": "26", "eval": "PASS", "attempt": 1, "mode": "SL", "patch": " primitiveValues.put(double.class, new Double(0.0));", "diff": "diff --git a/src/org/mockito/internal/util/Primitives.java b/src/org/mockito/internal/util/Primitives.java\nindex b44b8253d..ca2dd9567 100644\n--- a/src/org/mockito/internal/util/Primitives.java\n+++ b/src/org/mockito/internal/util/Primitives.java\n@@ -63,6 +63,6 @@ public class Primitives {\n         primitiveValues.put(int.class, 0);\n         primitiveValues.put(long.class, 0L);\n         primitiveValues.put(float.class, 0F);\n-        primitiveValues.put(double.class, 0);\n+ primitiveValues.put(double.class, new Double(0.0));\n     }\n-}\n\\ No newline at end of file\n+}"}
{"project": "Mockito", "bug_id": "27", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Mockito", "bug_id": "28", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Mockito", "bug_id": "29", "eval": "PASS", "attempt": 3, "mode": "SL", "patch": " description.appendText(wanted == null ? \"null\" : wanted.toString());", "diff": "diff --git a/src/org/mockito/internal/matchers/Same.java b/src/org/mockito/internal/matchers/Same.java\nindex 6c172fee2..443898180 100644\n--- a/src/org/mockito/internal/matchers/Same.java\n+++ b/src/org/mockito/internal/matchers/Same.java\n@@ -26,7 +26,7 @@ public class Same extends ArgumentMatcher<Object> implements Serializable {\n     public void describeTo(Description description) {\n         description.appendText(\"same(\");\n         appendQuoting(description);\n-        description.appendText(wanted.toString());\n+ description.appendText(wanted == null ? \"null\" : wanted.toString());\n         appendQuoting(description);\n         description.appendText(\")\");\n     }"}
{"project": "Mockito", "bug_id": "33", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Mockito", "bug_id": "34", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Mockito", "bug_id": "38", "eval": "PASS", "attempt": 10, "mode": "SL", "patch": " return StringDescription.toString(m).equals(arg == null ? \"\" : arg.toString());", "diff": "diff --git a/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java b/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\nindex 671fbc539..771e0e2b4 100644\n--- a/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\n+++ b/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\n@@ -44,7 +44,8 @@ public class ArgumentMatchingTool {\n         }\n     }\n \n+\n     private boolean toStringEquals(Matcher m, Object arg) {\n-        return StringDescription.toString(m).equals(arg.toString());\n+ return StringDescription.toString(m).equals(arg == null ? \"\" : arg.toString());\n     }\n }"}
{"project": "Time", "bug_id": "4", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "5", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "7", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "8", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "14", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "15", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "16", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "17", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "18", "eval": "PASS", "attempt": 17, "mode": "SF", "patch": " int[] yearsToMonth = {0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33};\n", "diff": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 29e559d4..2c38197b 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -347,35 +347,8 @@ public final class GJChronology extends AssembledChronology {\n         return instant;\n     }\n \n-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n-                                  int hourOfDay, int minuteOfHour,\n-                                  int secondOfMinute, int millisOfSecond)\n-        throws IllegalArgumentException\n-    {\n-        Chronology base;\n-        if ((base = getBase()) != null) {\n-            return base.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        }\n+ int[] yearsToMonth = {0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33};\n \n-        // Assume date is Gregorian.\n-        long instant;\n-            instant = iGregorianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        if (instant < iCutoverMillis) {\n-            // Maybe it's Julian.\n-            instant = iJulianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-            if (instant >= iCutoverMillis) {\n-                // Okay, it's in the illegal cutover gap.\n-                throw new IllegalArgumentException(\"Specified date does not exist\");\n-            }\n-        }\n-        return instant;\n-    }\n \n     /**\n      * Gets the cutover instant between Gregorian and Julian chronologies."}
{"project": "Time", "bug_id": "19", "eval": "FAIL", "attempt": 20, "mode": "SL", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "20", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "22", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "23", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "24", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "25", "eval": "FAIL", "attempt": 20, "mode": "SH", "patch": "", "diff": ""}
{"project": "Time", "bug_id": "27", "eval": "FAIL", "attempt": 20, "mode": "SF", "patch": "", "diff": ""}
